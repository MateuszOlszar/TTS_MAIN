
TTS_Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008350  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080084d8  080084d8  000094d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008540  08008540  0000a070  2**0
                  CONTENTS
  4 .ARM          00000000  08008540  08008540  0000a070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008540  08008540  0000a070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008540  08008540  00009540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008544  08008544  00009544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008548  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dc0  20000070  080085b8  0000a070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000e30  080085b8  0000ae30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eac6  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032d0  00000000  00000000  00018b66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  0001be38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a05  00000000  00000000  0001cb90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c580  00000000  00000000  0001d595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000139cc  00000000  00000000  00039b15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cba8  00000000  00000000  0004d4e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ea089  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ae0  00000000  00000000  000ea0cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000edbac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080084c0 	.word	0x080084c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	080084c0 	.word	0x080084c0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <App_Init>:
void CalibFunc();
void ParseCalibData();
int16_t AvreageTemp(uint8_t* tyre_region, int16_t* temps);

void App_Init()
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
	_state = Init;
 8000b44:	4b0d      	ldr	r3, [pc, #52]	@ (8000b7c <App_Init+0x3c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	701a      	strb	r2, [r3, #0]

	while(1)
	{
		switch(_state)
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <App_Init+0x3c>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b02      	cmp	r3, #2
 8000b50:	d00c      	beq.n	8000b6c <App_Init+0x2c>
 8000b52:	2b02      	cmp	r3, #2
 8000b54:	dc0d      	bgt.n	8000b72 <App_Init+0x32>
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d002      	beq.n	8000b60 <App_Init+0x20>
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d003      	beq.n	8000b66 <App_Init+0x26>
 8000b5e:	e008      	b.n	8000b72 <App_Init+0x32>
		{
		case Init:
			InitFunc();
 8000b60:	f000 f80e 	bl	8000b80 <InitFunc>
			break;
 8000b64:	e008      	b.n	8000b78 <App_Init+0x38>
		case Operational:
			OpFunc();
 8000b66:	f000 f8dd 	bl	8000d24 <OpFunc>
			break;
 8000b6a:	e005      	b.n	8000b78 <App_Init+0x38>
		case Calibration:
			CalibFunc();
 8000b6c:	f000 f9c4 	bl	8000ef8 <CalibFunc>
			break;
 8000b70:	e002      	b.n	8000b78 <App_Init+0x38>
		default:
			InitFunc();
 8000b72:	f000 f805 	bl	8000b80 <InitFunc>
			break;
 8000b76:	bf00      	nop
		switch(_state)
 8000b78:	e7e7      	b.n	8000b4a <App_Init+0xa>
 8000b7a:	bf00      	nop
 8000b7c:	2000008c 	.word	0x2000008c

08000b80 <InitFunc>:
		}
	}
}

void InitFunc()
{
 8000b80:	b590      	push	{r4, r7, lr}
 8000b82:	b08f      	sub	sp, #60	@ 0x3c
 8000b84:	af02      	add	r7, sp, #8
	CAN_Init(&hcan);
 8000b86:	4844      	ldr	r0, [pc, #272]	@ (8000c98 <InitFunc+0x118>)
 8000b88:	f001 fe92 	bl	80028b0 <CAN_Init>
	for(uint8_t i = 0; i<16; i++)
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000b92:	e017      	b.n	8000bc4 <InitFunc+0x44>
	{
		CAN_InitFrame(&ramka[i], &hcan, ID_BASE+i, 100, 8);
 8000b94:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000b98:	4613      	mov	r3, r2
 8000b9a:	00db      	lsls	r3, r3, #3
 8000b9c:	4413      	add	r3, r2
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	4a3e      	ldr	r2, [pc, #248]	@ (8000c9c <InitFunc+0x11c>)
 8000ba2:	1898      	adds	r0, r3, r2
 8000ba4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	3369      	adds	r3, #105	@ 0x69
 8000bac:	b29a      	uxth	r2, r3
 8000bae:	2308      	movs	r3, #8
 8000bb0:	9300      	str	r3, [sp, #0]
 8000bb2:	2364      	movs	r3, #100	@ 0x64
 8000bb4:	4938      	ldr	r1, [pc, #224]	@ (8000c98 <InitFunc+0x118>)
 8000bb6:	f001 febb 	bl	8002930 <CAN_InitFrame>
	for(uint8_t i = 0; i<16; i++)
 8000bba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000bc4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bc8:	2b0f      	cmp	r3, #15
 8000bca:	d9e3      	bls.n	8000b94 <InitFunc+0x14>
	}
	CAN_InitFrame(&tire_data_frame, &hcan, ID_BASE, 100, 8);
 8000bcc:	2308      	movs	r3, #8
 8000bce:	9300      	str	r3, [sp, #0]
 8000bd0:	2364      	movs	r3, #100	@ 0x64
 8000bd2:	2269      	movs	r2, #105	@ 0x69
 8000bd4:	4930      	ldr	r1, [pc, #192]	@ (8000c98 <InitFunc+0x118>)
 8000bd6:	4832      	ldr	r0, [pc, #200]	@ (8000ca0 <InitFunc+0x120>)
 8000bd8:	f001 feaa 	bl	8002930 <CAN_InitFrame>
	CAN_InitFrame(&calib_data_frame, &hcan, ID_CALIB_REQ, 1000, 8);
 8000bdc:	2308      	movs	r3, #8
 8000bde:	9300      	str	r3, [sp, #0]
 8000be0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000be4:	f240 7229 	movw	r2, #1833	@ 0x729
 8000be8:	492b      	ldr	r1, [pc, #172]	@ (8000c98 <InitFunc+0x118>)
 8000bea:	482e      	ldr	r0, [pc, #184]	@ (8000ca4 <InitFunc+0x124>)
 8000bec:	f001 fea0 	bl	8002930 <CAN_InitFrame>
	MLX90621_DumpEE(mlxee);
 8000bf0:	482d      	ldr	r0, [pc, #180]	@ (8000ca8 <InitFunc+0x128>)
 8000bf2:	f000 fb9b 	bl	800132c <MLX90621_DumpEE>
	MLX90621_ExtractParameters(mlxee, &params);
 8000bf6:	492d      	ldr	r1, [pc, #180]	@ (8000cac <InitFunc+0x12c>)
 8000bf8:	482b      	ldr	r0, [pc, #172]	@ (8000ca8 <InitFunc+0x128>)
 8000bfa:	f000 fc01 	bl	8001400 <MLX90621_ExtractParameters>
	MLX90621_GetConfiguration(&cfgReg);
 8000bfe:	482c      	ldr	r0, [pc, #176]	@ (8000cb0 <InitFunc+0x130>)
 8000c00:	f000 fbe8 	bl	80013d4 <MLX90621_GetConfiguration>
	MLX90621_Configure(mlxee);
 8000c04:	4828      	ldr	r0, [pc, #160]	@ (8000ca8 <InitFunc+0x128>)
 8000c06:	f000 fbb7 	bl	8001378 <MLX90621_Configure>
	MLX90621_SetRefreshRate(0x08);
 8000c0a:	2008      	movs	r0, #8
 8000c0c:	f000 fc33 	bl	8001476 <MLX90621_SetRefreshRate>

	curRR = MLX90621_GetRefreshRate();
 8000c10:	f000 fc58 	bl	80014c4 <MLX90621_GetRefreshRate>
 8000c14:	4603      	mov	r3, r0
 8000c16:	4a27      	ldr	r2, [pc, #156]	@ (8000cb4 <InitFunc+0x134>)
 8000c18:	6013      	str	r3, [r2, #0]
	curRes = MLX90621_GetCurResolution();
 8000c1a:	f000 fc15 	bl	8001448 <MLX90621_GetCurResolution>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	4a25      	ldr	r2, [pc, #148]	@ (8000cb8 <InitFunc+0x138>)
 8000c22:	6013      	str	r3, [r2, #0]

	regions[0] = NULL;
 8000c24:	4b25      	ldr	r3, [pc, #148]	@ (8000cbc <InitFunc+0x13c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
	regions[1] = inner_idx;
 8000c2a:	4b24      	ldr	r3, [pc, #144]	@ (8000cbc <InitFunc+0x13c>)
 8000c2c:	4a24      	ldr	r2, [pc, #144]	@ (8000cc0 <InitFunc+0x140>)
 8000c2e:	605a      	str	r2, [r3, #4]
	regions[2] = middle_idx;
 8000c30:	4b22      	ldr	r3, [pc, #136]	@ (8000cbc <InitFunc+0x13c>)
 8000c32:	4a24      	ldr	r2, [pc, #144]	@ (8000cc4 <InitFunc+0x144>)
 8000c34:	609a      	str	r2, [r3, #8]
	regions[3] = outer_idx;
 8000c36:	4b21      	ldr	r3, [pc, #132]	@ (8000cbc <InitFunc+0x13c>)
 8000c38:	4a23      	ldr	r2, [pc, #140]	@ (8000cc8 <InitFunc+0x148>)
 8000c3a:	60da      	str	r2, [r3, #12]

	uint32_t buf[11] = {0};
 8000c3c:	463b      	mov	r3, r7
 8000c3e:	222c      	movs	r2, #44	@ 0x2c
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f006 fc72 	bl	800752c <memset>

	Flash_Read_Data(FLASH_DATA_ADDR, buf, 11);
 8000c48:	463b      	mov	r3, r7
 8000c4a:	220b      	movs	r2, #11
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	481f      	ldr	r0, [pc, #124]	@ (8000ccc <InitFunc+0x14c>)
 8000c50:	f000 fb4e 	bl	80012f0 <Flash_Read_Data>
	memcpy(inner_idx, (uint8_t*)buf, 14);
 8000c54:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc0 <InitFunc+0x140>)
 8000c56:	461c      	mov	r4, r3
 8000c58:	463b      	mov	r3, r7
 8000c5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c5c:	c407      	stmia	r4!, {r0, r1, r2}
 8000c5e:	8023      	strh	r3, [r4, #0]
	memcpy(middle_idx, (uint8_t*)buf + 14, 14);
 8000c60:	463a      	mov	r2, r7
 8000c62:	320e      	adds	r2, #14
 8000c64:	4b17      	ldr	r3, [pc, #92]	@ (8000cc4 <InitFunc+0x144>)
 8000c66:	4614      	mov	r4, r2
 8000c68:	6820      	ldr	r0, [r4, #0]
 8000c6a:	6861      	ldr	r1, [r4, #4]
 8000c6c:	68a2      	ldr	r2, [r4, #8]
 8000c6e:	c307      	stmia	r3!, {r0, r1, r2}
 8000c70:	89a2      	ldrh	r2, [r4, #12]
 8000c72:	801a      	strh	r2, [r3, #0]
	memcpy(outer_idx, (uint8_t*)buf + 28, 14);
 8000c74:	463a      	mov	r2, r7
 8000c76:	321c      	adds	r2, #28
 8000c78:	4b13      	ldr	r3, [pc, #76]	@ (8000cc8 <InitFunc+0x148>)
 8000c7a:	4614      	mov	r4, r2
 8000c7c:	6820      	ldr	r0, [r4, #0]
 8000c7e:	6861      	ldr	r1, [r4, #4]
 8000c80:	68a2      	ldr	r2, [r4, #8]
 8000c82:	c307      	stmia	r3!, {r0, r1, r2}
 8000c84:	89a2      	ldrh	r2, [r4, #12]
 8000c86:	801a      	strh	r2, [r3, #0]

	_state = Operational;
 8000c88:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <InitFunc+0x150>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	701a      	strb	r2, [r3, #0]
}
 8000c8e:	bf00      	nop
 8000c90:	3734      	adds	r7, #52	@ 0x34
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd90      	pop	{r4, r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000a40 	.word	0x20000a40
 8000c9c:	2000079c 	.word	0x2000079c
 8000ca0:	200009dc 	.word	0x200009dc
 8000ca4:	20000a00 	.word	0x20000a00
 8000ca8:	20000364 	.word	0x20000364
 8000cac:	20000464 	.word	0x20000464
 8000cb0:	200002dc 	.word	0x200002dc
 8000cb4:	20000a28 	.word	0x20000a28
 8000cb8:	20000a2c 	.word	0x20000a2c
 8000cbc:	200000c0 	.word	0x200000c0
 8000cc0:	20000090 	.word	0x20000090
 8000cc4:	200000a0 	.word	0x200000a0
 8000cc8:	200000b0 	.word	0x200000b0
 8000ccc:	0800f800 	.word	0x0800f800
 8000cd0:	2000008c 	.word	0x2000008c

08000cd4 <SendTemp>:

void SendTemp(uint16_t* inner_temps, uint16_t* middle_temps, uint16_t* outer_temps)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
	memcpy(&tire_data_frame.core.data[0], inner_temps, 2);
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	881b      	ldrh	r3, [r3, #0]
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d1c <SendTemp+0x48>)
 8000ce8:	821a      	strh	r2, [r3, #16]
	memcpy(&tire_data_frame.core.data[2], middle_temps, 2);
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	881b      	ldrh	r3, [r3, #0]
 8000cee:	b29a      	uxth	r2, r3
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8000d1c <SendTemp+0x48>)
 8000cf2:	825a      	strh	r2, [r3, #18]
	memcpy(&tire_data_frame.core.data[4], outer_temps, 2);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	881b      	ldrh	r3, [r3, #0]
 8000cf8:	b29a      	uxth	r2, r3
 8000cfa:	4b08      	ldr	r3, [pc, #32]	@ (8000d1c <SendTemp+0x48>)
 8000cfc:	829a      	strh	r2, [r3, #20]

	tire_data_frame.core.data[7] = _state;
 8000cfe:	4b08      	ldr	r3, [pc, #32]	@ (8000d20 <SendTemp+0x4c>)
 8000d00:	781a      	ldrb	r2, [r3, #0]
 8000d02:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <SendTemp+0x48>)
 8000d04:	75da      	strb	r2, [r3, #23]
//	tire_data_frame.core.data[2] = inner_temps;
//	tire_data_frame.core.data[4] = middle_temps;
//	tire_data_frame.core.data[6] = outer_temps;
	HAL_Delay(100);
 8000d06:	2064      	movs	r0, #100	@ 0x64
 8000d08:	f002 f92a 	bl	8002f60 <HAL_Delay>
	CAN_SendFrame(&tire_data_frame);
 8000d0c:	4803      	ldr	r0, [pc, #12]	@ (8000d1c <SendTemp+0x48>)
 8000d0e:	f001 fe69 	bl	80029e4 <CAN_SendFrame>
}
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200009dc 	.word	0x200009dc
 8000d20:	2000008c 	.word	0x2000008c

08000d24 <OpFunc>:

void OpFunc()
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
	MLX90621_GetFrameData(frame);
 8000d2a:	4861      	ldr	r0, [pc, #388]	@ (8000eb0 <OpFunc+0x18c>)
 8000d2c:	f000 fb0e 	bl	800134c <MLX90621_GetFrameData>
	tambient = MLX90621_GetTa(frame, &params);
 8000d30:	4960      	ldr	r1, [pc, #384]	@ (8000eb4 <OpFunc+0x190>)
 8000d32:	485f      	ldr	r0, [pc, #380]	@ (8000eb0 <OpFunc+0x18c>)
 8000d34:	f000 fd9e 	bl	8001874 <MLX90621_GetTa>
 8000d38:	eef0 7a40 	vmov.f32	s15, s0
 8000d3c:	4b5e      	ldr	r3, [pc, #376]	@ (8000eb8 <OpFunc+0x194>)
 8000d3e:	edc3 7a00 	vstr	s15, [r3]
	MLX90621_CalculateTo(frame, &params, EMISSIVITY, tambient, result);
 8000d42:	4b5d      	ldr	r3, [pc, #372]	@ (8000eb8 <OpFunc+0x194>)
 8000d44:	edd3 7a00 	vldr	s15, [r3]
 8000d48:	4a5c      	ldr	r2, [pc, #368]	@ (8000ebc <OpFunc+0x198>)
 8000d4a:	eef0 0a67 	vmov.f32	s1, s15
 8000d4e:	ed9f 0a5c 	vldr	s0, [pc, #368]	@ 8000ec0 <OpFunc+0x19c>
 8000d52:	4958      	ldr	r1, [pc, #352]	@ (8000eb4 <OpFunc+0x190>)
 8000d54:	4856      	ldr	r0, [pc, #344]	@ (8000eb0 <OpFunc+0x18c>)
 8000d56:	f000 fbcb 	bl	80014f0 <MLX90621_CalculateTo>

	for(uint8_t i = 0; i<64; i++)
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	73fb      	strb	r3, [r7, #15]
 8000d5e:	e015      	b.n	8000d8c <OpFunc+0x68>
	{
		temp[i] = (int16_t)(result[i]*10);
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
 8000d62:	4a56      	ldr	r2, [pc, #344]	@ (8000ebc <OpFunc+0x198>)
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	4413      	add	r3, r2
 8000d68:	edd3 7a00 	vldr	s15, [r3]
 8000d6c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000d70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d74:	7bfb      	ldrb	r3, [r7, #15]
 8000d76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d7a:	ee17 2a90 	vmov	r2, s15
 8000d7e:	b211      	sxth	r1, r2
 8000d80:	4a50      	ldr	r2, [pc, #320]	@ (8000ec4 <OpFunc+0x1a0>)
 8000d82:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i = 0; i<64; i++)
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	73fb      	strb	r3, [r7, #15]
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d90:	d9e6      	bls.n	8000d60 <OpFunc+0x3c>
	}

	for(int i = 0; i < 16; i++)
 8000d92:	2300      	movs	r3, #0
 8000d94:	60bb      	str	r3, [r7, #8]
 8000d96:	e01a      	b.n	8000dce <OpFunc+0xaa>
	{
		for(int j = 0; j < 4; j++)
 8000d98:	2300      	movs	r3, #0
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	e011      	b.n	8000dc2 <OpFunc+0x9e>
		{
			matrix[i][j] = temp[i * 4 + j];
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	009a      	lsls	r2, r3, #2
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	4a47      	ldr	r2, [pc, #284]	@ (8000ec4 <OpFunc+0x1a0>)
 8000da8:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8000dac:	4946      	ldr	r1, [pc, #280]	@ (8000ec8 <OpFunc+0x1a4>)
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	009a      	lsls	r2, r3, #2
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	4602      	mov	r2, r0
 8000db8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j = 0; j < 4; j++)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b03      	cmp	r3, #3
 8000dc6:	ddea      	ble.n	8000d9e <OpFunc+0x7a>
	for(int i = 0; i < 16; i++)
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	2b0f      	cmp	r3, #15
 8000dd2:	dde1      	ble.n	8000d98 <OpFunc+0x74>
		}
	}

	if(DEBUG_Preview)
 8000dd4:	4b3d      	ldr	r3, [pc, #244]	@ (8000ecc <OpFunc+0x1a8>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d027      	beq.n	8000e2c <OpFunc+0x108>
	{
		for(uint8_t i = 0; i < 16; i++)
 8000ddc:	2300      	movs	r3, #0
 8000dde:	70fb      	strb	r3, [r7, #3]
 8000de0:	e021      	b.n	8000e26 <OpFunc+0x102>
		{
			memcpy(ramka[i].core.data, &matrix[i], 8);
 8000de2:	78fa      	ldrb	r2, [r7, #3]
 8000de4:	4613      	mov	r3, r2
 8000de6:	00db      	lsls	r3, r3, #3
 8000de8:	4413      	add	r3, r2
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	3308      	adds	r3, #8
 8000dee:	4a38      	ldr	r2, [pc, #224]	@ (8000ed0 <OpFunc+0x1ac>)
 8000df0:	4413      	add	r3, r2
 8000df2:	f103 0008 	add.w	r0, r3, #8
 8000df6:	78fb      	ldrb	r3, [r7, #3]
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	4a33      	ldr	r2, [pc, #204]	@ (8000ec8 <OpFunc+0x1a4>)
 8000dfc:	4413      	add	r3, r2
 8000dfe:	2208      	movs	r2, #8
 8000e00:	4619      	mov	r1, r3
 8000e02:	f006 fbc5 	bl	8007590 <memcpy>
			HAL_Delay(5);
 8000e06:	2005      	movs	r0, #5
 8000e08:	f002 f8aa 	bl	8002f60 <HAL_Delay>
			CAN_SendFrame(&ramka[i]);
 8000e0c:	78fa      	ldrb	r2, [r7, #3]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	00db      	lsls	r3, r3, #3
 8000e12:	4413      	add	r3, r2
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	4a2e      	ldr	r2, [pc, #184]	@ (8000ed0 <OpFunc+0x1ac>)
 8000e18:	4413      	add	r3, r2
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f001 fde2 	bl	80029e4 <CAN_SendFrame>
		for(uint8_t i = 0; i < 16; i++)
 8000e20:	78fb      	ldrb	r3, [r7, #3]
 8000e22:	3301      	adds	r3, #1
 8000e24:	70fb      	strb	r3, [r7, #3]
 8000e26:	78fb      	ldrb	r3, [r7, #3]
 8000e28:	2b0f      	cmp	r3, #15
 8000e2a:	d9da      	bls.n	8000de2 <OpFunc+0xbe>
		}
	}

	inner_temp = AvreageTemp(inner_idx, temp);
 8000e2c:	4925      	ldr	r1, [pc, #148]	@ (8000ec4 <OpFunc+0x1a0>)
 8000e2e:	4829      	ldr	r0, [pc, #164]	@ (8000ed4 <OpFunc+0x1b0>)
 8000e30:	f000 f99c 	bl	800116c <AvreageTemp>
 8000e34:	4603      	mov	r3, r0
 8000e36:	461a      	mov	r2, r3
 8000e38:	4b27      	ldr	r3, [pc, #156]	@ (8000ed8 <OpFunc+0x1b4>)
 8000e3a:	801a      	strh	r2, [r3, #0]
	outer_temp = AvreageTemp(outer_idx, temp);
 8000e3c:	4921      	ldr	r1, [pc, #132]	@ (8000ec4 <OpFunc+0x1a0>)
 8000e3e:	4827      	ldr	r0, [pc, #156]	@ (8000edc <OpFunc+0x1b8>)
 8000e40:	f000 f994 	bl	800116c <AvreageTemp>
 8000e44:	4603      	mov	r3, r0
 8000e46:	461a      	mov	r2, r3
 8000e48:	4b25      	ldr	r3, [pc, #148]	@ (8000ee0 <OpFunc+0x1bc>)
 8000e4a:	801a      	strh	r2, [r3, #0]
	middle_temp = AvreageTemp(middle_idx, temp);
 8000e4c:	491d      	ldr	r1, [pc, #116]	@ (8000ec4 <OpFunc+0x1a0>)
 8000e4e:	4825      	ldr	r0, [pc, #148]	@ (8000ee4 <OpFunc+0x1c0>)
 8000e50:	f000 f98c 	bl	800116c <AvreageTemp>
 8000e54:	4603      	mov	r3, r0
 8000e56:	461a      	mov	r2, r3
 8000e58:	4b23      	ldr	r3, [pc, #140]	@ (8000ee8 <OpFunc+0x1c4>)
 8000e5a:	801a      	strh	r2, [r3, #0]

	SendTemp(&inner_temp, &middle_temp, &outer_temp);
 8000e5c:	4a20      	ldr	r2, [pc, #128]	@ (8000ee0 <OpFunc+0x1bc>)
 8000e5e:	4922      	ldr	r1, [pc, #136]	@ (8000ee8 <OpFunc+0x1c4>)
 8000e60:	481d      	ldr	r0, [pc, #116]	@ (8000ed8 <OpFunc+0x1b4>)
 8000e62:	f7ff ff37 	bl	8000cd4 <SendTemp>

	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000e66:	2101      	movs	r1, #1
 8000e68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e6c:	f003 faee 	bl	800444c <HAL_GPIO_TogglePin>

	if(calib_data_frame.recieve_time_ms != lastCalibFrameTime)
 8000e70:	4b1e      	ldr	r3, [pc, #120]	@ (8000eec <OpFunc+0x1c8>)
 8000e72:	69da      	ldr	r2, [r3, #28]
 8000e74:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef0 <OpFunc+0x1cc>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d015      	beq.n	8000ea8 <OpFunc+0x184>
	{
		lastCalibFrameTime = calib_data_frame.recieve_time_ms;
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000eec <OpFunc+0x1c8>)
 8000e7e:	69db      	ldr	r3, [r3, #28]
 8000e80:	4a1b      	ldr	r2, [pc, #108]	@ (8000ef0 <OpFunc+0x1cc>)
 8000e82:	6013      	str	r3, [r2, #0]
		memset(inner_idx, 0, sizeof(inner_idx));
 8000e84:	220e      	movs	r2, #14
 8000e86:	2100      	movs	r1, #0
 8000e88:	4812      	ldr	r0, [pc, #72]	@ (8000ed4 <OpFunc+0x1b0>)
 8000e8a:	f006 fb4f 	bl	800752c <memset>
		memset(middle_idx, 0, sizeof(middle_idx));
 8000e8e:	220e      	movs	r2, #14
 8000e90:	2100      	movs	r1, #0
 8000e92:	4814      	ldr	r0, [pc, #80]	@ (8000ee4 <OpFunc+0x1c0>)
 8000e94:	f006 fb4a 	bl	800752c <memset>
		memset(outer_idx, 0, sizeof(outer_idx));
 8000e98:	220e      	movs	r2, #14
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	480f      	ldr	r0, [pc, #60]	@ (8000edc <OpFunc+0x1b8>)
 8000e9e:	f006 fb45 	bl	800752c <memset>
		_state = Calibration;
 8000ea2:	4b14      	ldr	r3, [pc, #80]	@ (8000ef4 <OpFunc+0x1d0>)
 8000ea4:	2202      	movs	r2, #2
 8000ea6:	701a      	strb	r2, [r3, #0]
	}

}
 8000ea8:	bf00      	nop
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	200002e0 	.word	0x200002e0
 8000eb4:	20000464 	.word	0x20000464
 8000eb8:	200000d8 	.word	0x200000d8
 8000ebc:	200000dc 	.word	0x200000dc
 8000ec0:	3f7ae148 	.word	0x3f7ae148
 8000ec4:	2000025c 	.word	0x2000025c
 8000ec8:	200001dc 	.word	0x200001dc
 8000ecc:	2000008d 	.word	0x2000008d
 8000ed0:	2000079c 	.word	0x2000079c
 8000ed4:	20000090 	.word	0x20000090
 8000ed8:	200000d0 	.word	0x200000d0
 8000edc:	200000b0 	.word	0x200000b0
 8000ee0:	200000d2 	.word	0x200000d2
 8000ee4:	200000a0 	.word	0x200000a0
 8000ee8:	200000d4 	.word	0x200000d4
 8000eec:	20000a00 	.word	0x20000a00
 8000ef0:	20000a24 	.word	0x20000a24
 8000ef4:	2000008c 	.word	0x2000008c

08000ef8 <CalibFunc>:


void CalibFunc()
{
 8000ef8:	b590      	push	{r4, r7, lr}
 8000efa:	b091      	sub	sp, #68	@ 0x44
 8000efc:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i<64; i++)
 8000efe:	2300      	movs	r3, #0
 8000f00:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000f04:	e019      	b.n	8000f3a <CalibFunc+0x42>
		{
			temp[i] = (int16_t)(result[i]*10);
 8000f06:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000f0a:	4a63      	ldr	r2, [pc, #396]	@ (8001098 <CalibFunc+0x1a0>)
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	edd3 7a00 	vldr	s15, [r3]
 8000f14:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000f18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f1c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000f20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f24:	ee17 2a90 	vmov	r2, s15
 8000f28:	b211      	sxth	r1, r2
 8000f2a:	4a5c      	ldr	r2, [pc, #368]	@ (800109c <CalibFunc+0x1a4>)
 8000f2c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i = 0; i<64; i++)
 8000f30:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000f34:	3301      	adds	r3, #1
 8000f36:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000f3a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000f3e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f40:	d9e1      	bls.n	8000f06 <CalibFunc+0xe>
		}

		for(int i = 0; i < 16; i++)
 8000f42:	2300      	movs	r3, #0
 8000f44:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000f46:	e01a      	b.n	8000f7e <CalibFunc+0x86>
		{
			for(int j = 0; j < 4; j++)
 8000f48:	2300      	movs	r3, #0
 8000f4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8000f4c:	e011      	b.n	8000f72 <CalibFunc+0x7a>
			{
				matrix[i][j] = temp[i * 4 + j];
 8000f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f50:	009a      	lsls	r2, r3, #2
 8000f52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f54:	4413      	add	r3, r2
 8000f56:	4a51      	ldr	r2, [pc, #324]	@ (800109c <CalibFunc+0x1a4>)
 8000f58:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8000f5c:	4950      	ldr	r1, [pc, #320]	@ (80010a0 <CalibFunc+0x1a8>)
 8000f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f60:	009a      	lsls	r2, r3, #2
 8000f62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f64:	4413      	add	r3, r2
 8000f66:	4602      	mov	r2, r0
 8000f68:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for(int j = 0; j < 4; j++)
 8000f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f6e:	3301      	adds	r3, #1
 8000f70:	637b      	str	r3, [r7, #52]	@ 0x34
 8000f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f74:	2b03      	cmp	r3, #3
 8000f76:	ddea      	ble.n	8000f4e <CalibFunc+0x56>
		for(int i = 0; i < 16; i++)
 8000f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f80:	2b0f      	cmp	r3, #15
 8000f82:	dde1      	ble.n	8000f48 <CalibFunc+0x50>
			}
		}
		for(uint8_t i = 0; i < 16; i++)
 8000f84:	2300      	movs	r3, #0
 8000f86:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8000f8a:	e026      	b.n	8000fda <CalibFunc+0xe2>
		{

			memcpy(ramka[i].core.data, &matrix[i], 8);
 8000f8c:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8000f90:	4613      	mov	r3, r2
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	4413      	add	r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	3308      	adds	r3, #8
 8000f9a:	4a42      	ldr	r2, [pc, #264]	@ (80010a4 <CalibFunc+0x1ac>)
 8000f9c:	4413      	add	r3, r2
 8000f9e:	f103 0008 	add.w	r0, r3, #8
 8000fa2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	4a3d      	ldr	r2, [pc, #244]	@ (80010a0 <CalibFunc+0x1a8>)
 8000faa:	4413      	add	r3, r2
 8000fac:	2208      	movs	r2, #8
 8000fae:	4619      	mov	r1, r3
 8000fb0:	f006 faee 	bl	8007590 <memcpy>
			HAL_Delay(5);
 8000fb4:	2005      	movs	r0, #5
 8000fb6:	f001 ffd3 	bl	8002f60 <HAL_Delay>
			CAN_SendFrame(&ramka[i]);
 8000fba:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	4413      	add	r3, r2
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	4a37      	ldr	r2, [pc, #220]	@ (80010a4 <CalibFunc+0x1ac>)
 8000fc8:	4413      	add	r3, r2
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f001 fd0a 	bl	80029e4 <CAN_SendFrame>
		for(uint8_t i = 0; i < 16; i++)
 8000fd0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8000fda:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000fde:	2b0f      	cmp	r3, #15
 8000fe0:	d9d4      	bls.n	8000f8c <CalibFunc+0x94>
		}
		MLX90621_GetFrameData(frame);
 8000fe2:	4831      	ldr	r0, [pc, #196]	@ (80010a8 <CalibFunc+0x1b0>)
 8000fe4:	f000 f9b2 	bl	800134c <MLX90621_GetFrameData>
		tambient = MLX90621_GetTa(frame, &params);
 8000fe8:	4930      	ldr	r1, [pc, #192]	@ (80010ac <CalibFunc+0x1b4>)
 8000fea:	482f      	ldr	r0, [pc, #188]	@ (80010a8 <CalibFunc+0x1b0>)
 8000fec:	f000 fc42 	bl	8001874 <MLX90621_GetTa>
 8000ff0:	eef0 7a40 	vmov.f32	s15, s0
 8000ff4:	4b2e      	ldr	r3, [pc, #184]	@ (80010b0 <CalibFunc+0x1b8>)
 8000ff6:	edc3 7a00 	vstr	s15, [r3]
		MLX90621_CalculateTo(frame, &params, EMISSIVITY, tambient, result);
 8000ffa:	4b2d      	ldr	r3, [pc, #180]	@ (80010b0 <CalibFunc+0x1b8>)
 8000ffc:	edd3 7a00 	vldr	s15, [r3]
 8001000:	4a25      	ldr	r2, [pc, #148]	@ (8001098 <CalibFunc+0x1a0>)
 8001002:	eef0 0a67 	vmov.f32	s1, s15
 8001006:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 80010b4 <CalibFunc+0x1bc>
 800100a:	4928      	ldr	r1, [pc, #160]	@ (80010ac <CalibFunc+0x1b4>)
 800100c:	4826      	ldr	r0, [pc, #152]	@ (80010a8 <CalibFunc+0x1b0>)
 800100e:	f000 fa6f 	bl	80014f0 <MLX90621_CalculateTo>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001012:	2101      	movs	r1, #1
 8001014:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001018:	f003 fa18 	bl	800444c <HAL_GPIO_TogglePin>

		if(calib_data_frame.recieve_time_ms != lastCalibFrameTime)
 800101c:	4b26      	ldr	r3, [pc, #152]	@ (80010b8 <CalibFunc+0x1c0>)
 800101e:	69da      	ldr	r2, [r3, #28]
 8001020:	4b26      	ldr	r3, [pc, #152]	@ (80010bc <CalibFunc+0x1c4>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	429a      	cmp	r2, r3
 8001026:	d034      	beq.n	8001092 <CalibFunc+0x19a>
		{
			lastCalibFrameTime = calib_data_frame.recieve_time_ms;
 8001028:	4b23      	ldr	r3, [pc, #140]	@ (80010b8 <CalibFunc+0x1c0>)
 800102a:	69db      	ldr	r3, [r3, #28]
 800102c:	4a23      	ldr	r2, [pc, #140]	@ (80010bc <CalibFunc+0x1c4>)
 800102e:	6013      	str	r3, [r2, #0]
			if(calib_data_frame.core.data[0] == 0)
 8001030:	4b21      	ldr	r3, [pc, #132]	@ (80010b8 <CalibFunc+0x1c0>)
 8001032:	7c1b      	ldrb	r3, [r3, #16]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d12a      	bne.n	800108e <CalibFunc+0x196>
			{
				_state = Operational;
 8001038:	4b21      	ldr	r3, [pc, #132]	@ (80010c0 <CalibFunc+0x1c8>)
 800103a:	2201      	movs	r2, #1
 800103c:	701a      	strb	r2, [r3, #0]
				uint32_t buf[11] = {0};
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	222c      	movs	r2, #44	@ 0x2c
 8001042:	2100      	movs	r1, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f006 fa71 	bl	800752c <memset>
				memcpy((uint8_t*)buf, inner_idx, 14);
 800104a:	4b1e      	ldr	r3, [pc, #120]	@ (80010c4 <CalibFunc+0x1cc>)
 800104c:	1d3c      	adds	r4, r7, #4
 800104e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001050:	c407      	stmia	r4!, {r0, r1, r2}
 8001052:	8023      	strh	r3, [r4, #0]
				memcpy((uint8_t*)buf + 14, middle_idx, 14);
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	330e      	adds	r3, #14
 8001058:	4a1b      	ldr	r2, [pc, #108]	@ (80010c8 <CalibFunc+0x1d0>)
 800105a:	461c      	mov	r4, r3
 800105c:	4613      	mov	r3, r2
 800105e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001060:	6020      	str	r0, [r4, #0]
 8001062:	6061      	str	r1, [r4, #4]
 8001064:	60a2      	str	r2, [r4, #8]
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	81a3      	strh	r3, [r4, #12]
				memcpy((uint8_t*)buf + 28, outer_idx, 14);
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	331c      	adds	r3, #28
 800106e:	4a17      	ldr	r2, [pc, #92]	@ (80010cc <CalibFunc+0x1d4>)
 8001070:	461c      	mov	r4, r3
 8001072:	4613      	mov	r3, r2
 8001074:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001076:	6020      	str	r0, [r4, #0]
 8001078:	6061      	str	r1, [r4, #4]
 800107a:	60a2      	str	r2, [r4, #8]
 800107c:	881b      	ldrh	r3, [r3, #0]
 800107e:	81a3      	strh	r3, [r4, #12]
				Flash_Write_Data(FLASH_DATA_ADDR, buf, 11);
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	220b      	movs	r2, #11
 8001084:	4619      	mov	r1, r3
 8001086:	4812      	ldr	r0, [pc, #72]	@ (80010d0 <CalibFunc+0x1d8>)
 8001088:	f000 f8d6 	bl	8001238 <Flash_Write_Data>
 800108c:	e001      	b.n	8001092 <CalibFunc+0x19a>
				return;
			}
			ParseCalibData();
 800108e:	f000 f821 	bl	80010d4 <ParseCalibData>
		}
}
 8001092:	3744      	adds	r7, #68	@ 0x44
 8001094:	46bd      	mov	sp, r7
 8001096:	bd90      	pop	{r4, r7, pc}
 8001098:	200000dc 	.word	0x200000dc
 800109c:	2000025c 	.word	0x2000025c
 80010a0:	200001dc 	.word	0x200001dc
 80010a4:	2000079c 	.word	0x2000079c
 80010a8:	200002e0 	.word	0x200002e0
 80010ac:	20000464 	.word	0x20000464
 80010b0:	200000d8 	.word	0x200000d8
 80010b4:	3f7ae148 	.word	0x3f7ae148
 80010b8:	20000a00 	.word	0x20000a00
 80010bc:	20000a24 	.word	0x20000a24
 80010c0:	2000008c 	.word	0x2000008c
 80010c4:	20000090 	.word	0x20000090
 80010c8:	200000a0 	.word	0x200000a0
 80010cc:	200000b0 	.word	0x200000b0
 80010d0:	0800f800 	.word	0x0800f800

080010d4 <ParseCalibData>:

void ParseCalibData()
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
	uint8_t tyre_region = calib_data_frame.core.data[0];
 80010da:	4b22      	ldr	r3, [pc, #136]	@ (8001164 <ParseCalibData+0x90>)
 80010dc:	7c1b      	ldrb	r3, [r3, #16]
 80010de:	717b      	strb	r3, [r7, #5]
	for(uint8_t i = 0; i< 7; i++)
 80010e0:	2300      	movs	r3, #0
 80010e2:	71fb      	strb	r3, [r7, #7]
 80010e4:	e033      	b.n	800114e <ParseCalibData+0x7a>
	{
		uint8_t temp_idx = calib_data_frame.core.data[i+1];
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	3301      	adds	r3, #1
 80010ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001164 <ParseCalibData+0x90>)
 80010ec:	4413      	add	r3, r2
 80010ee:	7c1b      	ldrb	r3, [r3, #16]
 80010f0:	713b      	strb	r3, [r7, #4]
		for(uint8_t j = 0; j< 14;j++)
 80010f2:	2300      	movs	r3, #0
 80010f4:	71bb      	strb	r3, [r7, #6]
 80010f6:	e024      	b.n	8001142 <ParseCalibData+0x6e>
		{
			if(regions[tyre_region]!=NULL)
 80010f8:	797b      	ldrb	r3, [r7, #5]
 80010fa:	4a1b      	ldr	r2, [pc, #108]	@ (8001168 <ParseCalibData+0x94>)
 80010fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d01b      	beq.n	800113c <ParseCalibData+0x68>
			{
				if(regions[tyre_region][j] != temp_idx && regions[tyre_region][j] == 0)
 8001104:	797b      	ldrb	r3, [r7, #5]
 8001106:	4a18      	ldr	r2, [pc, #96]	@ (8001168 <ParseCalibData+0x94>)
 8001108:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800110c:	79bb      	ldrb	r3, [r7, #6]
 800110e:	4413      	add	r3, r2
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	793a      	ldrb	r2, [r7, #4]
 8001114:	429a      	cmp	r2, r3
 8001116:	d011      	beq.n	800113c <ParseCalibData+0x68>
 8001118:	797b      	ldrb	r3, [r7, #5]
 800111a:	4a13      	ldr	r2, [pc, #76]	@ (8001168 <ParseCalibData+0x94>)
 800111c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001120:	79bb      	ldrb	r3, [r7, #6]
 8001122:	4413      	add	r3, r2
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d108      	bne.n	800113c <ParseCalibData+0x68>
				{
					regions[tyre_region][j] = temp_idx;
 800112a:	797b      	ldrb	r3, [r7, #5]
 800112c:	4a0e      	ldr	r2, [pc, #56]	@ (8001168 <ParseCalibData+0x94>)
 800112e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001132:	79bb      	ldrb	r3, [r7, #6]
 8001134:	4413      	add	r3, r2
 8001136:	793a      	ldrb	r2, [r7, #4]
 8001138:	701a      	strb	r2, [r3, #0]
					break;
 800113a:	e005      	b.n	8001148 <ParseCalibData+0x74>
		for(uint8_t j = 0; j< 14;j++)
 800113c:	79bb      	ldrb	r3, [r7, #6]
 800113e:	3301      	adds	r3, #1
 8001140:	71bb      	strb	r3, [r7, #6]
 8001142:	79bb      	ldrb	r3, [r7, #6]
 8001144:	2b0d      	cmp	r3, #13
 8001146:	d9d7      	bls.n	80010f8 <ParseCalibData+0x24>
	for(uint8_t i = 0; i< 7; i++)
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	3301      	adds	r3, #1
 800114c:	71fb      	strb	r3, [r7, #7]
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	2b06      	cmp	r3, #6
 8001152:	d9c8      	bls.n	80010e6 <ParseCalibData+0x12>
				}
			}
		}
	}
}
 8001154:	bf00      	nop
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	20000a00 	.word	0x20000a00
 8001168:	200000c0 	.word	0x200000c0

0800116c <AvreageTemp>:

int16_t AvreageTemp(uint8_t* tyre_region, int16_t* pixels)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
	int16_t temp = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	81fb      	strh	r3, [r7, #14]
	uint8_t hit = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0; i< 14;i++)
 800117e:	2300      	movs	r3, #0
 8001180:	733b      	strb	r3, [r7, #12]
 8001182:	e01b      	b.n	80011bc <AvreageTemp+0x50>
	{
		if(tyre_region[i] != 0)
 8001184:	7b3b      	ldrb	r3, [r7, #12]
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d011      	beq.n	80011b4 <AvreageTemp+0x48>
		{
			temp += pixels[tyre_region[i]];
 8001190:	7b3b      	ldrb	r3, [r7, #12]
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	4413      	add	r3, r2
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	4413      	add	r3, r2
 800119e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	89fb      	ldrh	r3, [r7, #14]
 80011a6:	4413      	add	r3, r2
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	81fb      	strh	r3, [r7, #14]
			hit++;
 80011ac:	7b7b      	ldrb	r3, [r7, #13]
 80011ae:	3301      	adds	r3, #1
 80011b0:	737b      	strb	r3, [r7, #13]
 80011b2:	e000      	b.n	80011b6 <AvreageTemp+0x4a>
		}
		else continue;
 80011b4:	bf00      	nop
	for(uint8_t i = 0; i< 14;i++)
 80011b6:	7b3b      	ldrb	r3, [r7, #12]
 80011b8:	3301      	adds	r3, #1
 80011ba:	733b      	strb	r3, [r7, #12]
 80011bc:	7b3b      	ldrb	r3, [r7, #12]
 80011be:	2b0d      	cmp	r3, #13
 80011c0:	d9e0      	bls.n	8001184 <AvreageTemp+0x18>
	}
	if(hit == 0) return 0;
 80011c2:	7b7b      	ldrb	r3, [r7, #13]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d101      	bne.n	80011cc <AvreageTemp+0x60>
 80011c8:	2300      	movs	r3, #0
 80011ca:	e005      	b.n	80011d8 <AvreageTemp+0x6c>
	return temp/hit;
 80011cc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80011d0:	7b7b      	ldrb	r3, [r7, #13]
 80011d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80011d6:	b21b      	sxth	r3, r3
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <GetPage>:
 * Some STM32F103C8 have 64 KB FLASH Memory, so I guess they have Page 0 to Page 63 only.
 */

/* FLASH_PAGE_SIZE should be able to get the size of the Page according to the controller */
static uint32_t GetPage(uint32_t Address)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<128; indx++)
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	e017      	b.n	8001222 <GetPage+0x3e>
  {
	  if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE*indx)))
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
 80011f8:	02db      	lsls	r3, r3, #11
 80011fa:	461a      	mov	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4293      	cmp	r3, r2
 8001200:	d20c      	bcs.n	800121c <GetPage+0x38>
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001208:	02db      	lsls	r3, r3, #11
 800120a:	461a      	mov	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4293      	cmp	r3, r2
 8001210:	d304      	bcc.n	800121c <GetPage+0x38>
	  {
		  return (0x08000000 + FLASH_PAGE_SIZE*indx);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001218:	02db      	lsls	r3, r3, #11
 800121a:	e006      	b.n	800122a <GetPage+0x46>
  for (int indx=0; indx<128; indx++)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	3301      	adds	r3, #1
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2b7f      	cmp	r3, #127	@ 0x7f
 8001226:	dde4      	ble.n	80011f2 <GetPage+0xe>
	  }
  }

  return 0;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <Flash_Write_Data>:
   float float_variable =  thing.a;
   return float_variable;
}

uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 8001238:	b5b0      	push	{r4, r5, r7, lr}
 800123a:	b08a      	sub	sp, #40	@ 0x28
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	4613      	mov	r3, r2
 8001244:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 8001246:	2300      	movs	r3, #0
 8001248:	627b      	str	r3, [r7, #36]	@ 0x24

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 800124a:	f002 fe01 	bl	8003e50 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 800124e:	68f8      	ldr	r0, [r7, #12]
 8001250:	f7ff ffc8 	bl	80011e4 <GetPage>
 8001254:	6238      	str	r0, [r7, #32]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 8001256:	88fb      	ldrh	r3, [r7, #6]
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	461a      	mov	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4413      	add	r3, r2
 8001260:	61fb      	str	r3, [r7, #28]
	  uint32_t EndPage = GetPage(EndPageAdress);
 8001262:	69f8      	ldr	r0, [r7, #28]
 8001264:	f7ff ffbe 	bl	80011e4 <GetPage>
 8001268:	61b8      	str	r0, [r7, #24]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 800126a:	4b20      	ldr	r3, [pc, #128]	@ (80012ec <Flash_Write_Data+0xb4>)
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.PageAddress = StartPage;
 8001270:	4a1e      	ldr	r2, [pc, #120]	@ (80012ec <Flash_Write_Data+0xb4>)
 8001272:	6a3b      	ldr	r3, [r7, #32]
 8001274:	6053      	str	r3, [r2, #4]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	6a3b      	ldr	r3, [r7, #32]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	0adb      	lsrs	r3, r3, #11
 800127e:	3301      	adds	r3, #1
 8001280:	4a1a      	ldr	r2, [pc, #104]	@ (80012ec <Flash_Write_Data+0xb4>)
 8001282:	6093      	str	r3, [r2, #8]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	4619      	mov	r1, r3
 800128a:	4818      	ldr	r0, [pc, #96]	@ (80012ec <Flash_Write_Data+0xb4>)
 800128c:	f002 feb0 	bl	8003ff0 <HAL_FLASHEx_Erase>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d01f      	beq.n	80012d6 <Flash_Write_Data+0x9e>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 8001296:	f002 fe11 	bl	8003ebc <HAL_FLASH_GetError>
 800129a:	4603      	mov	r3, r0
 800129c:	e022      	b.n	80012e4 <Flash_Write_Data+0xac>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 800129e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	4413      	add	r3, r2
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2200      	movs	r2, #0
 80012aa:	461c      	mov	r4, r3
 80012ac:	4615      	mov	r5, r2
 80012ae:	4622      	mov	r2, r4
 80012b0:	462b      	mov	r3, r5
 80012b2:	68f9      	ldr	r1, [r7, #12]
 80012b4:	2002      	movs	r0, #2
 80012b6:	f002 fd5b 	bl	8003d70 <HAL_FLASH_Program>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d106      	bne.n	80012ce <Flash_Write_Data+0x96>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	3304      	adds	r3, #4
 80012c4:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 80012c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c8:	3301      	adds	r3, #1
 80012ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80012cc:	e003      	b.n	80012d6 <Flash_Write_Data+0x9e>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 80012ce:	f002 fdf5 	bl	8003ebc <HAL_FLASH_GetError>
 80012d2:	4603      	mov	r3, r0
 80012d4:	e006      	b.n	80012e4 <Flash_Write_Data+0xac>
	   while (sofar<numberofwords)
 80012d6:	88fb      	ldrh	r3, [r7, #6]
 80012d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012da:	429a      	cmp	r2, r3
 80012dc:	dbdf      	blt.n	800129e <Flash_Write_Data+0x66>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 80012de:	f002 fddd 	bl	8003e9c <HAL_FLASH_Lock>

	   return 0;
 80012e2:	2300      	movs	r3, #0
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3728      	adds	r7, #40	@ 0x28
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bdb0      	pop	{r4, r5, r7, pc}
 80012ec:	20000a30 	.word	0x20000a30

080012f0 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartPageAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	4613      	mov	r3, r2
 80012fc:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	601a      	str	r2, [r3, #0]
		StartPageAddress += 4;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	3304      	adds	r3, #4
 800130a:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	3304      	adds	r3, #4
 8001310:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 8001312:	88fb      	ldrh	r3, [r7, #6]
 8001314:	1e5a      	subs	r2, r3, #1
 8001316:	80fa      	strh	r2, [r7, #6]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d000      	beq.n	800131e <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 800131c:	e7ef      	b.n	80012fe <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 800131e:	bf00      	nop
	}
}
 8001320:	bf00      	nop
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <MLX90621_DumpEE>:
void ExtractAlphaParameters(uint8_t *eeData, paramsMLX90621 *mlx90621);
void ExtractOffsetParameters(uint8_t *eeData, paramsMLX90621 *mlx90621);


int MLX90621_DumpEE(uint8_t *eeData)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
     return MLX90621_I2CReadEEPROM(0x50, 0, 256, eeData);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800133a:	2100      	movs	r1, #0
 800133c:	2050      	movs	r0, #80	@ 0x50
 800133e:	f000 fe2b 	bl	8001f98 <MLX90621_I2CReadEEPROM>
 8001342:	4603      	mov	r3, r0
}
 8001344:	4618      	mov	r0, r3
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <MLX90621_GetFrameData>:


int MLX90621_GetFrameData(uint16_t *frameData)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af02      	add	r7, sp, #8
 8001352:	6078      	str	r0, [r7, #4]
    int error = 1;
 8001354:	2301      	movs	r3, #1
 8001356:	60fb      	str	r3, [r7, #12]
        
    error = MLX90621_I2CRead(0x60, 0x02, 0, 1, 66, frameData);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	9301      	str	r3, [sp, #4]
 800135c:	2342      	movs	r3, #66	@ 0x42
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	2301      	movs	r3, #1
 8001362:	2200      	movs	r2, #0
 8001364:	2102      	movs	r1, #2
 8001366:	2060      	movs	r0, #96	@ 0x60
 8001368:	f000 fe46 	bl	8001ff8 <MLX90621_I2CRead>
 800136c:	60f8      	str	r0, [r7, #12]
       
    return error;    
 800136e:	68fb      	ldr	r3, [r7, #12]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <MLX90621_Configure>:

int MLX90621_Configure(uint8_t *eeData)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
    int error = 1;
 8001380:	2301      	movs	r3, #1
 8001382:	60fb      	str	r3, [r7, #12]
    uint16_t value;
    
    error = MLX90621_I2CWrite(0x60, 0x04, 0xAA, eeData[247]);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	33f7      	adds	r3, #247	@ 0xf7
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	22aa      	movs	r2, #170	@ 0xaa
 800138c:	2104      	movs	r1, #4
 800138e:	2060      	movs	r0, #96	@ 0x60
 8001390:	f000 fec4 	bl	800211c <MLX90621_I2CWrite>
 8001394:	60f8      	str	r0, [r7, #12]
    
    if (error != 0)
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MLX90621_Configure+0x28>
    {
        return error;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	e015      	b.n	80013cc <MLX90621_Configure+0x54>
    }

    value = 256*eeData[246] + eeData[245];      
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	33f6      	adds	r3, #246	@ 0xf6
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	021b      	lsls	r3, r3, #8
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	32f5      	adds	r2, #245	@ 0xf5
 80013ae:	7812      	ldrb	r2, [r2, #0]
 80013b0:	4413      	add	r3, r2
 80013b2:	817b      	strh	r3, [r7, #10]
    value = value | 0x0400;
 80013b4:	897b      	ldrh	r3, [r7, #10]
 80013b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013ba:	817b      	strh	r3, [r7, #10]
    error = MLX90621_I2CWrite(0x60, 0x03, 0x55, value);
 80013bc:	897b      	ldrh	r3, [r7, #10]
 80013be:	2255      	movs	r2, #85	@ 0x55
 80013c0:	2103      	movs	r1, #3
 80013c2:	2060      	movs	r0, #96	@ 0x60
 80013c4:	f000 feaa 	bl	800211c <MLX90621_I2CWrite>
 80013c8:	60f8      	str	r0, [r7, #12]
    
    return error;      
 80013ca:	68fb      	ldr	r3, [r7, #12]
    
}   
 80013cc:	4618      	mov	r0, r3
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <MLX90621_GetConfiguration>:
       
    return error;    
}    

int MLX90621_GetConfiguration(uint16_t *cfgReg)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af02      	add	r7, sp, #8
 80013da:	6078      	str	r0, [r7, #4]
    int error = 1;
 80013dc:	2301      	movs	r3, #1
 80013de:	60fb      	str	r3, [r7, #12]
        
    error = MLX90621_I2CRead(0x60, 0x02, 0x92, 0, 1, cfgReg);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	9301      	str	r3, [sp, #4]
 80013e4:	2301      	movs	r3, #1
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	2300      	movs	r3, #0
 80013ea:	2292      	movs	r2, #146	@ 0x92
 80013ec:	2102      	movs	r1, #2
 80013ee:	2060      	movs	r0, #96	@ 0x60
 80013f0:	f000 fe02 	bl	8001ff8 <MLX90621_I2CRead>
 80013f4:	60f8      	str	r0, [r7, #12]
       
    return error;    
 80013f6:	68fb      	ldr	r3, [r7, #12]
}   
 80013f8:	4618      	mov	r0, r3
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <MLX90621_ExtractParameters>:
 

int MLX90621_ExtractParameters(uint8_t *eeData, paramsMLX90621 *mlx90621)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
    int error = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
    
    ExtractPTATParameters(eeData, mlx90621);
 800140e:	6839      	ldr	r1, [r7, #0]
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f000 fab3 	bl	800197c <ExtractPTATParameters>
    ExtractTgcParameters(eeData, mlx90621);
 8001416:	6839      	ldr	r1, [r7, #0]
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 fb4f 	bl	8001abc <ExtractTgcParameters>
    ExtractKsTaParameters(eeData, mlx90621);
 800141e:	6839      	ldr	r1, [r7, #0]
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 fb69 	bl	8001af8 <ExtractKsTaParameters>
    ExtractKsToParameters(eeData, mlx90621);
 8001426:	6839      	ldr	r1, [r7, #0]
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f000 fba1 	bl	8001b70 <ExtractKsToParameters>
    ExtractAlphaParameters(eeData, mlx90621);
 800142e:	6839      	ldr	r1, [r7, #0]
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f000 fbe5 	bl	8001c00 <ExtractAlphaParameters>
    ExtractOffsetParameters(eeData, mlx90621);
 8001436:	6839      	ldr	r1, [r7, #0]
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f000 fca1 	bl	8001d80 <ExtractOffsetParameters>
        
    return error;
 800143e:	68fb      	ldr	r3, [r7, #12]

}
 8001440:	4618      	mov	r0, r3
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <MLX90621_GetCurResolution>:
}

//------------------------------------------------------------------------------

int MLX90621_GetCurResolution()
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
    uint16_t cfgReg;
    int resolution;
    int error;
    
    error = MLX90621_GetConfiguration(&cfgReg);
 800144e:	1dbb      	adds	r3, r7, #6
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff ffbf 	bl	80013d4 <MLX90621_GetConfiguration>
 8001456:	60f8      	str	r0, [r7, #12]
    if(error != 0)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MLX90621_GetCurResolution+0x1a>
    {
        return error;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	e005      	b.n	800146e <MLX90621_GetCurResolution+0x26>
    }    
    resolution = (cfgReg & 0x0030) >> 4;
 8001462:	88fb      	ldrh	r3, [r7, #6]
 8001464:	111b      	asrs	r3, r3, #4
 8001466:	f003 0303 	and.w	r3, r3, #3
 800146a:	60bb      	str	r3, [r7, #8]
    
    return resolution; 
 800146c:	68bb      	ldr	r3, [r7, #8]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <MLX90621_SetRefreshRate>:

//------------------------------------------------------------------------------

int MLX90621_SetRefreshRate(uint8_t refreshRate)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b086      	sub	sp, #24
 800147a:	af00      	add	r7, sp, #0
 800147c:	4603      	mov	r3, r0
 800147e:	71fb      	strb	r3, [r7, #7]
    uint16_t cfgReg;
    int value;
    int error;
    
    value = refreshRate & 0x0F;
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	613b      	str	r3, [r7, #16]
    
    error = MLX90621_GetConfiguration(&cfgReg);
 8001488:	f107 030e 	add.w	r3, r7, #14
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ffa1 	bl	80013d4 <MLX90621_GetConfiguration>
 8001492:	6178      	str	r0, [r7, #20]
        
    if(error == 0)
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d10f      	bne.n	80014ba <MLX90621_SetRefreshRate+0x44>
    {
        value = (cfgReg & 0xFFF0) | value;
 800149a:	89fb      	ldrh	r3, [r7, #14]
 800149c:	461a      	mov	r2, r3
 800149e:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80014a2:	4013      	ands	r3, r2
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        error = MLX90621_I2CWrite(0x60, 0x03, 0x55, value);        
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	2255      	movs	r2, #85	@ 0x55
 80014b0:	2103      	movs	r1, #3
 80014b2:	2060      	movs	r0, #96	@ 0x60
 80014b4:	f000 fe32 	bl	800211c <MLX90621_I2CWrite>
 80014b8:	6178      	str	r0, [r7, #20]
    }    
    
    return error;
 80014ba:	697b      	ldr	r3, [r7, #20]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <MLX90621_GetRefreshRate>:

//------------------------------------------------------------------------------

int MLX90621_GetRefreshRate()
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
    uint16_t cfgReg;
    int rr;
    int error;
    
    error = MLX90621_GetConfiguration(&cfgReg);
 80014ca:	1dbb      	adds	r3, r7, #6
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff81 	bl	80013d4 <MLX90621_GetConfiguration>
 80014d2:	60f8      	str	r0, [r7, #12]
    if(error != 0)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MLX90621_GetRefreshRate+0x1a>
    {
        return error;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	e004      	b.n	80014e8 <MLX90621_GetRefreshRate+0x24>
    }    
    rr = (cfgReg & 0x000F);
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	f003 030f 	and.w	r3, r3, #15
 80014e4:	60bb      	str	r3, [r7, #8]
    
    return rr; 
 80014e6:	68bb      	ldr	r3, [r7, #8]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <MLX90621_CalculateTo>:

//------------------------------------------------------------------------------

void MLX90621_CalculateTo(uint16_t *frameData, const paramsMLX90621 *params, float emissivity, float tr, float *result)
{
 80014f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014f4:	b090      	sub	sp, #64	@ 0x40
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6178      	str	r0, [r7, #20]
 80014fa:	6139      	str	r1, [r7, #16]
 80014fc:	ed87 0a03 	vstr	s0, [r7, #12]
 8001500:	edc7 0a02 	vstr	s1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
    float irData;
    float alphaCompensated;
    float Sx;
    float To;
    
    ta = MLX90621_GetTa(frameData, params);
 8001506:	6939      	ldr	r1, [r7, #16]
 8001508:	6978      	ldr	r0, [r7, #20]
 800150a:	f000 f9b3 	bl	8001874 <MLX90621_GetTa>
 800150e:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
    
    ta4 = (ta + 273.15);
 8001512:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001514:	f7fe ffbc 	bl	8000490 <__aeabi_f2d>
 8001518:	a3d1      	add	r3, pc, #836	@ (adr r3, 8001860 <MLX90621_CalculateTo+0x370>)
 800151a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151e:	f7fe fe59 	bl	80001d4 <__adddf3>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4610      	mov	r0, r2
 8001528:	4619      	mov	r1, r3
 800152a:	f7ff fab9 	bl	8000aa0 <__aeabi_d2f>
 800152e:	4603      	mov	r3, r0
 8001530:	62fb      	str	r3, [r7, #44]	@ 0x2c
    ta4 = ta4 * ta4;
 8001532:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001536:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800153a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    ta4 = ta4 * ta4;
 800153e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001542:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001546:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    tr4 = (tr + 273.15);
 800154a:	68b8      	ldr	r0, [r7, #8]
 800154c:	f7fe ffa0 	bl	8000490 <__aeabi_f2d>
 8001550:	a3c3      	add	r3, pc, #780	@ (adr r3, 8001860 <MLX90621_CalculateTo+0x370>)
 8001552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001556:	f7fe fe3d 	bl	80001d4 <__adddf3>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4610      	mov	r0, r2
 8001560:	4619      	mov	r1, r3
 8001562:	f7ff fa9d 	bl	8000aa0 <__aeabi_d2f>
 8001566:	4603      	mov	r3, r0
 8001568:	62bb      	str	r3, [r7, #40]	@ 0x28
    tr4 = tr4 * tr4;
 800156a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800156e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001572:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    tr4 = tr4 * tr4;
 8001576:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800157a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800157e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    taTr = tr4 - (tr4-ta4)/emissivity;
 8001582:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001586:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800158a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800158e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001592:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001596:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800159a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800159e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    
//------------------------- To calculation -------------------------------------    
        
    irDataCP = frameData[65];  
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	3382      	adds	r3, #130	@ 0x82
 80015a6:	881b      	ldrh	r3, [r3, #0]
 80015a8:	ee07 3a90 	vmov	s15, r3
 80015ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015b0:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    if(irDataCP > 32767)
 80015b4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80015b8:	ed9f 7aab 	vldr	s14, [pc, #684]	@ 8001868 <MLX90621_CalculateTo+0x378>
 80015bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c4:	dd07      	ble.n	80015d6 <MLX90621_CalculateTo+0xe6>
    {
        irDataCP = irDataCP - 65536;
 80015c6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80015ca:	ed9f 7aa8 	vldr	s14, [pc, #672]	@ 800186c <MLX90621_CalculateTo+0x37c>
 80015ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80015d2:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    }

    irDataCP = irDataCP - (params->cpA + params->cpB * (ta - 25));
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	ed93 7ac7 	vldr	s14, [r3, #796]	@ 0x31c
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	edd3 6ac8 	vldr	s13, [r3, #800]	@ 0x320
 80015e2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80015e6:	eeb3 6a09 	vmov.f32	s12, #57	@ 0x41c80000  25.0
 80015ea:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80015ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f6:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80015fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015fe:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    
    for( int pixelNumber = 0; pixelNumber < 64; pixelNumber++)
 8001602:	2300      	movs	r3, #0
 8001604:	637b      	str	r3, [r7, #52]	@ 0x34
 8001606:	e121      	b.n	800184c <MLX90621_CalculateTo+0x35c>
    {    
        irData = frameData[pixelNumber];
 8001608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	697a      	ldr	r2, [r7, #20]
 800160e:	4413      	add	r3, r2
 8001610:	881b      	ldrh	r3, [r3, #0]
 8001612:	ee07 3a90 	vmov	s15, r3
 8001616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800161a:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
        if(irData > 32767)
 800161e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001622:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 8001868 <MLX90621_CalculateTo+0x378>
 8001626:	eef4 7ac7 	vcmpe.f32	s15, s14
 800162a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800162e:	dd07      	ble.n	8001640 <MLX90621_CalculateTo+0x150>
        {
            irData = irData - 65536;
 8001630:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001634:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 800186c <MLX90621_CalculateTo+0x37c>
 8001638:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800163c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
        }
        
        irData = irData - (params->ai[pixelNumber] + params->bi[pixelNumber] * (ta - 25));
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001644:	3346      	adds	r3, #70	@ 0x46
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4413      	add	r3, r2
 800164a:	ed93 7a00 	vldr	s14, [r3]
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001652:	3386      	adds	r3, #134	@ 0x86
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	edd3 6a00 	vldr	s13, [r3]
 800165c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001660:	eeb3 6a09 	vmov.f32	s12, #57	@ 0x41c80000  25.0
 8001664:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8001668:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800166c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001670:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001674:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001678:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
        
        irData = irData - params->tgc * irDataCP;
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001682:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800168a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800168e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001692:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
        irData = irData / emissivity;
 8001696:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 800169a:	ed97 7a03 	vldr	s14, [r7, #12]
 800169e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016a2:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
        
        alphaCompensated = params->alpha[pixelNumber] - params->tgc * params->cpAlpha;
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016aa:	3306      	adds	r3, #6
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	ed93 7a00 	vldr	s14, [r3]
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	edd3 6a03 	vldr	s13, [r3, #12]
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	edd3 7ac6 	vldr	s15, [r3, #792]	@ 0x318
 80016c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016c8:	edc7 7a08 	vstr	s15, [r7, #32]
        alphaCompensated = alphaCompensated *(1 + params->KsTa * (ta - 25));
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	ed93 7a04 	vldr	s14, [r3, #16]
 80016d2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80016d6:	eef3 6a09 	vmov.f32	s13, #57	@ 0x41c80000  25.0
 80016da:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80016de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80016e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016ea:	ed97 7a08 	vldr	s14, [r7, #32]
 80016ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016f2:	edc7 7a08 	vstr	s15, [r7, #32]
                    
        Sx = alphaCompensated * alphaCompensated * alphaCompensated * (irData + alphaCompensated * taTr);
 80016f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80016fa:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80016fe:	edd7 7a08 	vldr	s15, [r7, #32]
 8001702:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001706:	edd7 6a08 	vldr	s13, [r7, #32]
 800170a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800170e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001712:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800171a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800171e:	edc7 7a07 	vstr	s15, [r7, #28]
        Sx = sqrt(sqrt(Sx)) * params->ksTo;            
 8001722:	69f8      	ldr	r0, [r7, #28]
 8001724:	f7fe feb4 	bl	8000490 <__aeabi_f2d>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	ec43 2b10 	vmov	d0, r2, r3
 8001730:	f005 ffac 	bl	800768c <sqrt>
 8001734:	eeb0 7a40 	vmov.f32	s14, s0
 8001738:	eef0 7a60 	vmov.f32	s15, s1
 800173c:	eeb0 0a47 	vmov.f32	s0, s14
 8001740:	eef0 0a67 	vmov.f32	s1, s15
 8001744:	f005 ffa2 	bl	800768c <sqrt>
 8001748:	ec55 4b10 	vmov	r4, r5, d0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe fe9d 	bl	8000490 <__aeabi_f2d>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4620      	mov	r0, r4
 800175c:	4629      	mov	r1, r5
 800175e:	f7fe feef 	bl	8000540 <__aeabi_dmul>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4610      	mov	r0, r2
 8001768:	4619      	mov	r1, r3
 800176a:	f7ff f999 	bl	8000aa0 <__aeabi_d2f>
 800176e:	4603      	mov	r3, r0
 8001770:	61fb      	str	r3, [r7, #28]
        
        To = sqrt(sqrt(irData/(alphaCompensated * (1 - params->ksTo * 273.15) + Sx) + taTr)) - 273.15;                     
 8001772:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001774:	f7fe fe8c 	bl	8000490 <__aeabi_f2d>
 8001778:	4604      	mov	r4, r0
 800177a:	460d      	mov	r5, r1
 800177c:	6a38      	ldr	r0, [r7, #32]
 800177e:	f7fe fe87 	bl	8000490 <__aeabi_f2d>
 8001782:	4680      	mov	r8, r0
 8001784:	4689      	mov	r9, r1
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	4618      	mov	r0, r3
 800178c:	f7fe fe80 	bl	8000490 <__aeabi_f2d>
 8001790:	a333      	add	r3, pc, #204	@ (adr r3, 8001860 <MLX90621_CalculateTo+0x370>)
 8001792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001796:	f7fe fed3 	bl	8000540 <__aeabi_dmul>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	f04f 0000 	mov.w	r0, #0
 80017a2:	4933      	ldr	r1, [pc, #204]	@ (8001870 <MLX90621_CalculateTo+0x380>)
 80017a4:	f7fe fd14 	bl	80001d0 <__aeabi_dsub>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4640      	mov	r0, r8
 80017ae:	4649      	mov	r1, r9
 80017b0:	f7fe fec6 	bl	8000540 <__aeabi_dmul>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4690      	mov	r8, r2
 80017ba:	4699      	mov	r9, r3
 80017bc:	69f8      	ldr	r0, [r7, #28]
 80017be:	f7fe fe67 	bl	8000490 <__aeabi_f2d>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4640      	mov	r0, r8
 80017c8:	4649      	mov	r1, r9
 80017ca:	f7fe fd03 	bl	80001d4 <__adddf3>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4620      	mov	r0, r4
 80017d4:	4629      	mov	r1, r5
 80017d6:	f7fe ffdd 	bl	8000794 <__aeabi_ddiv>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4614      	mov	r4, r2
 80017e0:	461d      	mov	r5, r3
 80017e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80017e4:	f7fe fe54 	bl	8000490 <__aeabi_f2d>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4620      	mov	r0, r4
 80017ee:	4629      	mov	r1, r5
 80017f0:	f7fe fcf0 	bl	80001d4 <__adddf3>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	ec43 2b17 	vmov	d7, r2, r3
 80017fc:	eeb0 0a47 	vmov.f32	s0, s14
 8001800:	eef0 0a67 	vmov.f32	s1, s15
 8001804:	f005 ff42 	bl	800768c <sqrt>
 8001808:	eeb0 7a40 	vmov.f32	s14, s0
 800180c:	eef0 7a60 	vmov.f32	s15, s1
 8001810:	eeb0 0a47 	vmov.f32	s0, s14
 8001814:	eef0 0a67 	vmov.f32	s1, s15
 8001818:	f005 ff38 	bl	800768c <sqrt>
 800181c:	ec51 0b10 	vmov	r0, r1, d0
 8001820:	a30f      	add	r3, pc, #60	@ (adr r3, 8001860 <MLX90621_CalculateTo+0x370>)
 8001822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001826:	f7fe fcd3 	bl	80001d0 <__aeabi_dsub>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4610      	mov	r0, r2
 8001830:	4619      	mov	r1, r3
 8001832:	f7ff f935 	bl	8000aa0 <__aeabi_d2f>
 8001836:	4603      	mov	r3, r0
 8001838:	61bb      	str	r3, [r7, #24]
                                    
        result[pixelNumber] = To;
 800183a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	601a      	str	r2, [r3, #0]
    for( int pixelNumber = 0; pixelNumber < 64; pixelNumber++)
 8001846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001848:	3301      	adds	r3, #1
 800184a:	637b      	str	r3, [r7, #52]	@ 0x34
 800184c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800184e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001850:	f77f aeda 	ble.w	8001608 <MLX90621_CalculateTo+0x118>
    
    }
}
 8001854:	bf00      	nop
 8001856:	bf00      	nop
 8001858:	3740      	adds	r7, #64	@ 0x40
 800185a:	46bd      	mov	sp, r7
 800185c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001860:	66666666 	.word	0x66666666
 8001864:	40711266 	.word	0x40711266
 8001868:	46fffe00 	.word	0x46fffe00
 800186c:	47800000 	.word	0x47800000
 8001870:	3ff00000 	.word	0x3ff00000

08001874 <MLX90621_GetTa>:
}

//------------------------------------------------------------------------------

float MLX90621_GetTa(uint16_t *frameData, const paramsMLX90621 *params)
{
 8001874:	b5b0      	push	{r4, r5, r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
    float ptat;
    float ta;
    
    ptat = frameData[64];
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	3380      	adds	r3, #128	@ 0x80
 8001882:	881b      	ldrh	r3, [r3, #0]
 8001884:	ee07 3a90 	vmov	s15, r3
 8001888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800188c:	edc7 7a03 	vstr	s15, [r7, #12]
    if(ptat > 32767)
 8001890:	edd7 7a03 	vldr	s15, [r7, #12]
 8001894:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8001974 <MLX90621_GetTa+0x100>
 8001898:	eef4 7ac7 	vcmpe.f32	s15, s14
 800189c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a0:	dd07      	ble.n	80018b2 <MLX90621_GetTa+0x3e>
    {
        ptat = ptat - 65536;
 80018a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80018a6:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001978 <MLX90621_GetTa+0x104>
 80018aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018ae:	edc7 7a03 	vstr	s15, [r7, #12]
    }
       
    ta = params->vTh25 - ptat;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018b8:	ee07 3a90 	vmov	s15, r3
 80018bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80018c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018c8:	edc7 7a02 	vstr	s15, [r7, #8]
    ta = 4*params->kT2*ta;
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	edd3 7a02 	vldr	s15, [r3, #8]
 80018d2:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80018d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018da:	ed97 7a02 	vldr	s14, [r7, #8]
 80018de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018e2:	edc7 7a02 	vstr	s15, [r7, #8]
    ta = params->kT1*params->kT1 - ta;
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80018f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80018fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018fe:	edc7 7a02 	vstr	s15, [r7, #8]
    ta = sqrt(ta)-params->kT1;
 8001902:	68b8      	ldr	r0, [r7, #8]
 8001904:	f7fe fdc4 	bl	8000490 <__aeabi_f2d>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	ec43 2b10 	vmov	d0, r2, r3
 8001910:	f005 febc 	bl	800768c <sqrt>
 8001914:	ec55 4b10 	vmov	r4, r5, d0
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	4618      	mov	r0, r3
 800191e:	f7fe fdb7 	bl	8000490 <__aeabi_f2d>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4620      	mov	r0, r4
 8001928:	4629      	mov	r1, r5
 800192a:	f7fe fc51 	bl	80001d0 <__aeabi_dsub>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	4610      	mov	r0, r2
 8001934:	4619      	mov	r1, r3
 8001936:	f7ff f8b3 	bl	8000aa0 <__aeabi_d2f>
 800193a:	4603      	mov	r3, r0
 800193c:	60bb      	str	r3, [r7, #8]
    ta = ta / (2*params->kT2);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	edd3 7a02 	vldr	s15, [r3, #8]
 8001944:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001948:	edd7 6a02 	vldr	s13, [r7, #8]
 800194c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001950:	edc7 7a02 	vstr	s15, [r7, #8]
    ta = ta + 25;
 8001954:	edd7 7a02 	vldr	s15, [r7, #8]
 8001958:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800195c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001960:	edc7 7a02 	vstr	s15, [r7, #8]
    
    return ta;
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	ee07 3a90 	vmov	s15, r3
}
 800196a:	eeb0 0a67 	vmov.f32	s0, s15
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bdb0      	pop	{r4, r5, r7, pc}
 8001974:	46fffe00 	.word	0x46fffe00
 8001978:	47800000 	.word	0x47800000

0800197c <ExtractPTATParameters>:

//------------------------------------------------------------------------------

void ExtractPTATParameters(uint8_t *eeData, paramsMLX90621 *mlx90621)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b088      	sub	sp, #32
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
    float kt1;
    float kt2;
    int16_t vth25;
    int kt1Scale = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]
    int kt2Scale = 0;
 800198a:	2300      	movs	r3, #0
 800198c:	613b      	str	r3, [r7, #16]
    int resolution = 3;
 800198e:	2303      	movs	r3, #3
 8001990:	60fb      	str	r3, [r7, #12]
    uint16_t data;
    
    resolution = resolution - MLX90621_GetCurResolution();
 8001992:	f7ff fd59 	bl	8001448 <MLX90621_GetCurResolution>
 8001996:	4602      	mov	r2, r0
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	1a9b      	subs	r3, r3, r2
 800199c:	60fb      	str	r3, [r7, #12]
    kt1Scale = (eeData[210] & 0xF0) >> 4;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	33d2      	adds	r3, #210	@ 0xd2
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	091b      	lsrs	r3, r3, #4
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	617b      	str	r3, [r7, #20]
    kt2Scale = eeData[210] & 0x0F;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	33d2      	adds	r3, #210	@ 0xd2
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	f003 030f 	and.w	r3, r3, #15
 80019b4:	613b      	str	r3, [r7, #16]
    kt2Scale = kt2Scale + 10;
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	330a      	adds	r3, #10
 80019ba:	613b      	str	r3, [r7, #16]
    kt1Scale = kt1Scale + resolution;
 80019bc:	697a      	ldr	r2, [r7, #20]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	4413      	add	r3, r2
 80019c2:	617b      	str	r3, [r7, #20]
    kt2Scale = kt2Scale + resolution;
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	4413      	add	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
    
    data = (eeData[219]<<8) + eeData[218];
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	33db      	adds	r3, #219	@ 0xdb
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	021b      	lsls	r3, r3, #8
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	32da      	adds	r2, #218	@ 0xda
 80019da:	7812      	ldrb	r2, [r2, #0]
 80019dc:	4413      	add	r3, r2
 80019de:	817b      	strh	r3, [r7, #10]
    vth25 = data;
 80019e0:	897b      	ldrh	r3, [r7, #10]
 80019e2:	813b      	strh	r3, [r7, #8]
    
    kt1 = (eeData[221]<<8) + eeData[220];
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	33dd      	adds	r3, #221	@ 0xdd
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	021b      	lsls	r3, r3, #8
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	32dc      	adds	r2, #220	@ 0xdc
 80019f0:	7812      	ldrb	r2, [r2, #0]
 80019f2:	4413      	add	r3, r2
 80019f4:	ee07 3a90 	vmov	s15, r3
 80019f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019fc:	edc7 7a07 	vstr	s15, [r7, #28]
    if (kt1 > 32767)
 8001a00:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a04:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001ab4 <ExtractPTATParameters+0x138>
 8001a08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a10:	dd07      	ble.n	8001a22 <ExtractPTATParameters+0xa6>
    {
        kt1 = kt1 - 65536;
 8001a12:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a16:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001ab8 <ExtractPTATParameters+0x13c>
 8001a1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a1e:	edc7 7a07 	vstr	s15, [r7, #28]
    }  
    
    kt1 = kt1 / (1<<kt1Scale);  
 8001a22:	2201      	movs	r2, #1
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	ee07 3a90 	vmov	s15, r3
 8001a2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a32:	edd7 6a07 	vldr	s13, [r7, #28]
 8001a36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a3a:	edc7 7a07 	vstr	s15, [r7, #28]
    
    kt2 = (eeData[223]<<8) + eeData[222];
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	33df      	adds	r3, #223	@ 0xdf
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	021b      	lsls	r3, r3, #8
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	32de      	adds	r2, #222	@ 0xde
 8001a4a:	7812      	ldrb	r2, [r2, #0]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	ee07 3a90 	vmov	s15, r3
 8001a52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a56:	edc7 7a06 	vstr	s15, [r7, #24]
    if (kt2 > 32767)
 8001a5a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a5e:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001ab4 <ExtractPTATParameters+0x138>
 8001a62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6a:	dd07      	ble.n	8001a7c <ExtractPTATParameters+0x100>
    {
        kt2 = kt2 - 65536;
 8001a6c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a70:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001ab8 <ExtractPTATParameters+0x13c>
 8001a74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a78:	edc7 7a06 	vstr	s15, [r7, #24]
    }  
    
    kt2 = kt2 / (1<<kt2Scale); 
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	ee07 3a90 	vmov	s15, r3
 8001a88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a8c:	edd7 6a06 	vldr	s13, [r7, #24]
 8001a90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a94:	edc7 7a06 	vstr	s15, [r7, #24]
    
    mlx90621->vTh25 = vth25;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	893a      	ldrh	r2, [r7, #8]
 8001a9c:	801a      	strh	r2, [r3, #0]
    mlx90621->kT1 = kt1;    
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	69fa      	ldr	r2, [r7, #28]
 8001aa2:	605a      	str	r2, [r3, #4]
    mlx90621->kT2 = kt2;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	609a      	str	r2, [r3, #8]
      
}
 8001aaa:	bf00      	nop
 8001aac:	3720      	adds	r7, #32
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	46fffe00 	.word	0x46fffe00
 8001ab8:	47800000 	.word	0x47800000

08001abc <ExtractTgcParameters>:

//------------------------------------------------------------------------------

void ExtractTgcParameters(uint8_t *eeData, paramsMLX90621 *mlx90621)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
    float tgc;
    tgc = eeData[216]/32.0f;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	33d8      	adds	r3, #216	@ 0xd8
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	ee07 3a90 	vmov	s15, r3
 8001ad0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ad4:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8001af4 <ExtractTgcParameters+0x38>
 8001ad8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001adc:	edc7 7a03 	vstr	s15, [r7, #12]
        
    mlx90621->tgc = tgc;        
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	60da      	str	r2, [r3, #12]
}
 8001ae6:	bf00      	nop
 8001ae8:	3714      	adds	r7, #20
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	42000000 	.word	0x42000000

08001af8 <ExtractKsTaParameters>:

//------------------------------------------------------------------------------

void ExtractKsTaParameters(uint8_t *eeData, paramsMLX90621 *mlx90621)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
    float KsTa;
    KsTa = (eeData[231] << 8) + eeData[230];
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	33e7      	adds	r3, #231	@ 0xe7
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	021b      	lsls	r3, r3, #8
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	32e6      	adds	r2, #230	@ 0xe6
 8001b0e:	7812      	ldrb	r2, [r2, #0]
 8001b10:	4413      	add	r3, r2
 8001b12:	ee07 3a90 	vmov	s15, r3
 8001b16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b1a:	edc7 7a03 	vstr	s15, [r7, #12]
    if(KsTa > 32767)
 8001b1e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b22:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001b64 <ExtractKsTaParameters+0x6c>
 8001b26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b2e:	dd07      	ble.n	8001b40 <ExtractKsTaParameters+0x48>
    {
        KsTa = KsTa - 65536;
 8001b30:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b34:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001b68 <ExtractKsTaParameters+0x70>
 8001b38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b3c:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    KsTa = KsTa / (1<<20);
 8001b40:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b44:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8001b6c <ExtractKsTaParameters+0x74>
 8001b48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b4c:	edc7 7a03 	vstr	s15, [r7, #12]
    
    mlx90621->KsTa = KsTa;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	611a      	str	r2, [r3, #16]
}
 8001b56:	bf00      	nop
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	46fffe00 	.word	0x46fffe00
 8001b68:	47800000 	.word	0x47800000
 8001b6c:	49800000 	.word	0x49800000

08001b70 <ExtractKsToParameters>:

//------------------------------------------------------------------------------

void ExtractKsToParameters(uint8_t *eeData, paramsMLX90621 *mlx90621)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
    int scale;
        
    scale = eeData[192] & 0x0F;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	33c0      	adds	r3, #192	@ 0xc0
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	f003 030f 	and.w	r3, r3, #15
 8001b84:	60fb      	str	r3, [r7, #12]
    scale = scale + 8;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	3308      	adds	r3, #8
 8001b8a:	60fb      	str	r3, [r7, #12]
    
    mlx90621->ksTo = eeData[196];
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	33c4      	adds	r3, #196	@ 0xc4
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	ee07 3a90 	vmov	s15, r3
 8001b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	edc3 7a05 	vstr	s15, [r3, #20]
       
    if(mlx90621->ksTo > 127)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ba6:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001bf4 <ExtractKsToParameters+0x84>
 8001baa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb2:	dd09      	ble.n	8001bc8 <ExtractKsToParameters+0x58>
    {
        mlx90621->ksTo = mlx90621->ksTo - 256;
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	edd3 7a05 	vldr	s15, [r3, #20]
 8001bba:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001bf8 <ExtractKsToParameters+0x88>
 8001bbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	edc3 7a05 	vstr	s15, [r3, #20]
    }
    mlx90621->ksTo = mlx90621->ksTo / (1 << scale);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	edd3 6a05 	vldr	s13, [r3, #20]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	ee07 3a90 	vmov	s15, r3
 8001bda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	edc3 7a05 	vstr	s15, [r3, #20]
    
}
 8001be8:	bf00      	nop
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	42fe0000 	.word	0x42fe0000
 8001bf8:	43800000 	.word	0x43800000
 8001bfc:	00000000 	.word	0x00000000

08001c00 <ExtractAlphaParameters>:

//------------------------------------------------------------------------------

void ExtractAlphaParameters(uint8_t *eeData, paramsMLX90621 *mlx90621)
{    
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08c      	sub	sp, #48	@ 0x30
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
    uint8_t resScale;
    float alphaCom; 
    float alphaTemp;
    float temp;
    
    alphaScale = eeData[226];
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	33e2      	adds	r3, #226	@ 0xe2
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe fc1b 	bl	800044c <__aeabi_ui2d>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    deltaScale = eeData[227];
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	33e3      	adds	r3, #227	@ 0xe3
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7fe fc11 	bl	800044c <__aeabi_ui2d>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    resScale = 3 - MLX90621_GetCurResolution();
 8001c32:	f7ff fc09 	bl	8001448 <MLX90621_GetCurResolution>
 8001c36:	4603      	mov	r3, r0
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	f1c3 0303 	rsb	r3, r3, #3
 8001c3e:	75fb      	strb	r3, [r7, #23]
    alphaCom = (eeData[225]<<8) + eeData[224];
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	33e1      	adds	r3, #225	@ 0xe1
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	021b      	lsls	r3, r3, #8
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	32e0      	adds	r2, #224	@ 0xe0
 8001c4c:	7812      	ldrb	r2, [r2, #0]
 8001c4e:	4413      	add	r3, r2
 8001c50:	ee07 3a90 	vmov	s15, r3
 8001c54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c58:	edc7 7a04 	vstr	s15, [r7, #16]
    alphaScale = pow(2,alphaScale);
 8001c5c:	ed97 1b08 	vldr	d1, [r7, #32]
 8001c60:	ed9f 0b45 	vldr	d0, [pc, #276]	@ 8001d78 <ExtractAlphaParameters+0x178>
 8001c64:	f005 fca2 	bl	80075ac <pow>
 8001c68:	ed87 0b08 	vstr	d0, [r7, #32]
    deltaScale = pow(2,deltaScale);
 8001c6c:	ed97 1b06 	vldr	d1, [r7, #24]
 8001c70:	ed9f 0b41 	vldr	d0, [pc, #260]	@ 8001d78 <ExtractAlphaParameters+0x178>
 8001c74:	f005 fc9a 	bl	80075ac <pow>
 8001c78:	ed87 0b06 	vstr	d0, [r7, #24]
    alphaCom = alphaCom / alphaScale;
 8001c7c:	6938      	ldr	r0, [r7, #16]
 8001c7e:	f7fe fc07 	bl	8000490 <__aeabi_f2d>
 8001c82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c86:	f7fe fd85 	bl	8000794 <__aeabi_ddiv>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	4610      	mov	r0, r2
 8001c90:	4619      	mov	r1, r3
 8001c92:	f7fe ff05 	bl	8000aa0 <__aeabi_d2f>
 8001c96:	4603      	mov	r3, r0
 8001c98:	613b      	str	r3, [r7, #16]
  
    for(int i = 0; i < 64; i++)
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c9e:	e036      	b.n	8001d0e <ExtractAlphaParameters+0x10e>
    {
        temp = eeData[128+i];
 8001ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ca2:	3380      	adds	r3, #128	@ 0x80
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4413      	add	r3, r2
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	ee07 3a90 	vmov	s15, r3
 8001cb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cb4:	edc7 7a02 	vstr	s15, [r7, #8]
        temp = temp / deltaScale;        
 8001cb8:	68b8      	ldr	r0, [r7, #8]
 8001cba:	f7fe fbe9 	bl	8000490 <__aeabi_f2d>
 8001cbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cc2:	f7fe fd67 	bl	8000794 <__aeabi_ddiv>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	4610      	mov	r0, r2
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f7fe fee7 	bl	8000aa0 <__aeabi_d2f>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	60bb      	str	r3, [r7, #8]
        alphaTemp = (alphaCom + temp)/(1<<resScale);
 8001cd6:	ed97 7a04 	vldr	s14, [r7, #16]
 8001cda:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cde:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001ce2:	7dfb      	ldrb	r3, [r7, #23]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	ee07 3a90 	vmov	s15, r3
 8001cee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cf6:	edc7 7a03 	vstr	s15, [r7, #12]
        mlx90621->alpha[i] = alphaTemp;
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cfe:	3306      	adds	r3, #6
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < 64; i++)
 8001d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d10:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d12:	ddc5      	ble.n	8001ca0 <ExtractAlphaParameters+0xa0>
    } 
    
    alphaTemp = (eeData[215]<<8) + eeData[214];
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	33d7      	adds	r3, #215	@ 0xd7
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	021b      	lsls	r3, r3, #8
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	32d6      	adds	r2, #214	@ 0xd6
 8001d20:	7812      	ldrb	r2, [r2, #0]
 8001d22:	4413      	add	r3, r2
 8001d24:	ee07 3a90 	vmov	s15, r3
 8001d28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d2c:	edc7 7a03 	vstr	s15, [r7, #12]
    alphaTemp = alphaTemp / alphaScale;
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f7fe fbad 	bl	8000490 <__aeabi_f2d>
 8001d36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d3a:	f7fe fd2b 	bl	8000794 <__aeabi_ddiv>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	4610      	mov	r0, r2
 8001d44:	4619      	mov	r1, r3
 8001d46:	f7fe feab 	bl	8000aa0 <__aeabi_d2f>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	60fb      	str	r3, [r7, #12]
    
    mlx90621->cpAlpha = alphaTemp / (1<<resScale);
 8001d4e:	7dfb      	ldrb	r3, [r7, #23]
 8001d50:	2201      	movs	r2, #1
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	ee07 3a90 	vmov	s15, r3
 8001d5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d5e:	edd7 6a03 	vldr	s13, [r7, #12]
 8001d62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	edc3 7ac6 	vstr	s15, [r3, #792]	@ 0x318
}
 8001d6c:	bf00      	nop
 8001d6e:	3730      	adds	r7, #48	@ 0x30
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	f3af 8000 	nop.w
 8001d78:	00000000 	.word	0x00000000
 8001d7c:	40000000 	.word	0x40000000

08001d80 <ExtractOffsetParameters>:

//------------------------------------------------------------------------------

void ExtractOffsetParameters(uint8_t *eeData, paramsMLX90621 *mlx90621)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08a      	sub	sp, #40	@ 0x28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
    int16_t aCom;
    float aTemp;
    float bTemp;
    uint16_t data;
    
    aScale = eeData[217]>>4;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	33d9      	adds	r3, #217	@ 0xd9
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	091b      	lsrs	r3, r3, #4
 8001d92:	76fb      	strb	r3, [r7, #27]
    bScale = eeData[217] & 0x0F;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	33d9      	adds	r3, #217	@ 0xd9
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	ee07 3a90 	vmov	s15, r3
 8001da2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001da6:	edc7 7a05 	vstr	s15, [r7, #20]
    resScale = 3 - MLX90621_GetCurResolution();
 8001daa:	f7ff fb4d 	bl	8001448 <MLX90621_GetCurResolution>
 8001dae:	4603      	mov	r3, r0
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	f1c3 0303 	rsb	r3, r3, #3
 8001db6:	74fb      	strb	r3, [r7, #19]
    bScale = pow(2, (double)(bScale+resScale));
 8001db8:	7cfb      	ldrb	r3, [r7, #19]
 8001dba:	ee07 3a90 	vmov	s15, r3
 8001dbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dc2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dca:	ee17 0a90 	vmov	r0, s15
 8001dce:	f7fe fb5f 	bl	8000490 <__aeabi_f2d>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	ec43 2b11 	vmov	d1, r2, r3
 8001dda:	ed9f 0b69 	vldr	d0, [pc, #420]	@ 8001f80 <ExtractOffsetParameters+0x200>
 8001dde:	f005 fbe5 	bl	80075ac <pow>
 8001de2:	ec53 2b10 	vmov	r2, r3, d0
 8001de6:	4610      	mov	r0, r2
 8001de8:	4619      	mov	r1, r3
 8001dea:	f7fe fe59 	bl	8000aa0 <__aeabi_d2f>
 8001dee:	4603      	mov	r3, r0
 8001df0:	617b      	str	r3, [r7, #20]
    
    data = (eeData[209]<<8) + eeData[208];
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	33d1      	adds	r3, #209	@ 0xd1
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	021b      	lsls	r3, r3, #8
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	32d0      	adds	r2, #208	@ 0xd0
 8001e00:	7812      	ldrb	r2, [r2, #0]
 8001e02:	4413      	add	r3, r2
 8001e04:	823b      	strh	r3, [r7, #16]
    aCom = data;    
 8001e06:	8a3b      	ldrh	r3, [r7, #16]
 8001e08:	81fb      	strh	r3, [r7, #14]

    for(int i=0; i<64; i++)
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61fb      	str	r3, [r7, #28]
 8001e0e:	e057      	b.n	8001ec0 <ExtractOffsetParameters+0x140>
    {
        aTemp = eeData[i]<<aScale; 
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	4413      	add	r3, r2
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	7efb      	ldrb	r3, [r7, #27]
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	ee07 3a90 	vmov	s15, r3
 8001e24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e28:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        bTemp = eeData[64+i];
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	3340      	adds	r3, #64	@ 0x40
 8001e30:	461a      	mov	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	ee07 3a90 	vmov	s15, r3
 8001e3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e40:	edc7 7a08 	vstr	s15, [r7, #32]
        if (bTemp > 127)
 8001e44:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e48:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8001f88 <ExtractOffsetParameters+0x208>
 8001e4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e54:	dd07      	ble.n	8001e66 <ExtractOffsetParameters+0xe6>
        {
            bTemp = bTemp - 256;
 8001e56:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e5a:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8001f8c <ExtractOffsetParameters+0x20c>
 8001e5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e62:	edc7 7a08 	vstr	s15, [r7, #32]
        }            
        bTemp = bTemp / bScale;
 8001e66:	edd7 6a08 	vldr	s13, [r7, #32]
 8001e6a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e72:	edc7 7a08 	vstr	s15, [r7, #32]
        
        mlx90621->ai[i] = (aCom + aTemp) / (1<<resScale);
 8001e76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e7a:	ee07 3a90 	vmov	s15, r3
 8001e7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e82:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001e86:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001e8a:	7cfb      	ldrb	r3, [r7, #19]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	ee07 3a90 	vmov	s15, r3
 8001e96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	3346      	adds	r3, #70	@ 0x46
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	edc3 7a00 	vstr	s15, [r3]
        mlx90621->bi[i] = bTemp;
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3386      	adds	r3, #134	@ 0x86
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	6a3a      	ldr	r2, [r7, #32]
 8001eb8:	601a      	str	r2, [r3, #0]
    for(int i=0; i<64; i++)
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	61fb      	str	r3, [r7, #28]
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ec4:	dda4      	ble.n	8001e10 <ExtractOffsetParameters+0x90>
    } 
    
    aTemp = (eeData[212]<<8) + eeData[211];
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	33d4      	adds	r3, #212	@ 0xd4
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	021b      	lsls	r3, r3, #8
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	32d3      	adds	r2, #211	@ 0xd3
 8001ed2:	7812      	ldrb	r2, [r2, #0]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	ee07 3a90 	vmov	s15, r3
 8001eda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ede:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    if (aTemp > 32767)
 8001ee2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001ee6:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001f90 <ExtractOffsetParameters+0x210>
 8001eea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef2:	dd07      	ble.n	8001f04 <ExtractOffsetParameters+0x184>
    {
        aTemp = aTemp - 65536;
 8001ef4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001ef8:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001f94 <ExtractOffsetParameters+0x214>
 8001efc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f00:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    }    
    aTemp = aTemp / (1<<resScale); 
 8001f04:	7cfb      	ldrb	r3, [r7, #19]
 8001f06:	2201      	movs	r2, #1
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	ee07 3a90 	vmov	s15, r3
 8001f10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f14:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001f18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f1c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    
    bTemp = eeData[213];
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	33d5      	adds	r3, #213	@ 0xd5
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	ee07 3a90 	vmov	s15, r3
 8001f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f2e:	edc7 7a08 	vstr	s15, [r7, #32]
    if (bTemp > 127)
 8001f32:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f36:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001f88 <ExtractOffsetParameters+0x208>
 8001f3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f42:	dd07      	ble.n	8001f54 <ExtractOffsetParameters+0x1d4>
    {
        bTemp = bTemp - 256;
 8001f44:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f48:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001f8c <ExtractOffsetParameters+0x20c>
 8001f4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f50:	edc7 7a08 	vstr	s15, [r7, #32]
    }     
    bTemp = bTemp / bScale;      
 8001f54:	edd7 6a08 	vldr	s13, [r7, #32]
 8001f58:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f60:	edc7 7a08 	vstr	s15, [r7, #32]
    
    mlx90621->cpA = aTemp;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f68:	f8c3 231c 	str.w	r2, [r3, #796]	@ 0x31c
    mlx90621->cpB = bTemp;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	6a3a      	ldr	r2, [r7, #32]
 8001f70:	f8c3 2320 	str.w	r2, [r3, #800]	@ 0x320
}
 8001f74:	bf00      	nop
 8001f76:	3728      	adds	r7, #40	@ 0x28
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	f3af 8000 	nop.w
 8001f80:	00000000 	.word	0x00000000
 8001f84:	40000000 	.word	0x40000000
 8001f88:	42fe0000 	.word	0x42fe0000
 8001f8c:	43800000 	.word	0x43800000
 8001f90:	46fffe00 	.word	0x46fffe00
 8001f94:	47800000 	.word	0x47800000

08001f98 <MLX90621_I2CReadEEPROM>:
void MLX90621_I2CInit()
{   
}

int MLX90621_I2CReadEEPROM(uint8_t slaveAddr, uint8_t startAddress, uint16_t nMemAddressRead, uint8_t *data)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af02      	add	r7, sp, #8
 8001f9e:	603b      	str	r3, [r7, #0]
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	71fb      	strb	r3, [r7, #7]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	71bb      	strb	r3, [r7, #6]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	80bb      	strh	r3, [r7, #4]
	uint8_t sa;
	uint8_t cmd = 0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	73bb      	strb	r3, [r7, #14]

	sa = (slaveAddr << 1);
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	73fb      	strb	r3, [r7, #15]


	if(HAL_I2C_Master_Transmit(&hi2c1, sa, &cmd, 1, 1000)==HAL_OK)
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
 8001fb8:	b299      	uxth	r1, r3
 8001fba:	f107 020e 	add.w	r2, r7, #14
 8001fbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fc2:	9300      	str	r3, [sp, #0]
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	480b      	ldr	r0, [pc, #44]	@ (8001ff4 <MLX90621_I2CReadEEPROM+0x5c>)
 8001fc8:	f002 faea 	bl	80045a0 <HAL_I2C_Master_Transmit>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10b      	bne.n	8001fea <MLX90621_I2CReadEEPROM+0x52>
	{
//		sa = sa | 0x01;
		return HAL_I2C_Master_Receive(&hi2c1, sa, data, nMemAddressRead, 1000);
 8001fd2:	7bfb      	ldrb	r3, [r7, #15]
 8001fd4:	b299      	uxth	r1, r3
 8001fd6:	88bb      	ldrh	r3, [r7, #4]
 8001fd8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001fdc:	9200      	str	r2, [sp, #0]
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	4804      	ldr	r0, [pc, #16]	@ (8001ff4 <MLX90621_I2CReadEEPROM+0x5c>)
 8001fe2:	f002 fbd1 	bl	8004788 <HAL_I2C_Master_Receive>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	e000      	b.n	8001fec <MLX90621_I2CReadEEPROM+0x54>
	}

	return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
} 
 8001fec:	4618      	mov	r0, r3
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	20000a68 	.word	0x20000a68

08001ff8 <MLX90621_I2CRead>:

int MLX90621_I2CRead(uint8_t slaveAddr,uint8_t command, uint8_t startAddress, uint8_t addressStep, uint8_t nMemAddressRead, uint16_t *data)
{
 8001ff8:	b590      	push	{r4, r7, lr}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af02      	add	r7, sp, #8
 8001ffe:	4604      	mov	r4, r0
 8002000:	4608      	mov	r0, r1
 8002002:	4611      	mov	r1, r2
 8002004:	461a      	mov	r2, r3
 8002006:	4623      	mov	r3, r4
 8002008:	71fb      	strb	r3, [r7, #7]
 800200a:	4603      	mov	r3, r0
 800200c:	71bb      	strb	r3, [r7, #6]
 800200e:	460b      	mov	r3, r1
 8002010:	717b      	strb	r3, [r7, #5]
 8002012:	4613      	mov	r3, r2
 8002014:	713b      	strb	r3, [r7, #4]
	MLX90621_I2CRead_Polling(slaveAddr, command, startAddress, addressStep, nMemAddressRead, data);
 8002016:	793c      	ldrb	r4, [r7, #4]
 8002018:	797a      	ldrb	r2, [r7, #5]
 800201a:	79b9      	ldrb	r1, [r7, #6]
 800201c:	79f8      	ldrb	r0, [r7, #7]
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	9301      	str	r3, [sp, #4]
 8002022:	7e3b      	ldrb	r3, [r7, #24]
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	4623      	mov	r3, r4
 8002028:	f000 f806 	bl	8002038 <MLX90621_I2CRead_Polling>
//	{
//		return -1;
//	}
//
//	return HAL_OK;
} 
 800202c:	bf00      	nop
 800202e:	4618      	mov	r0, r3
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	bd90      	pop	{r4, r7, pc}
	...

08002038 <MLX90621_I2CRead_Polling>:

}


static int MLX90621_I2CRead_Polling(uint8_t slaveAddr,uint8_t command, uint8_t startAddress, uint8_t addressStep, uint8_t nMemAddressRead, uint16_t *data)
{
 8002038:	b590      	push	{r4, r7, lr}
 800203a:	b0ad      	sub	sp, #180	@ 0xb4
 800203c:	af06      	add	r7, sp, #24
 800203e:	4604      	mov	r4, r0
 8002040:	4608      	mov	r0, r1
 8002042:	4611      	mov	r1, r2
 8002044:	461a      	mov	r2, r3
 8002046:	4623      	mov	r3, r4
 8002048:	71fb      	strb	r3, [r7, #7]
 800204a:	4603      	mov	r3, r0
 800204c:	71bb      	strb	r3, [r7, #6]
 800204e:	460b      	mov	r3, r1
 8002050:	717b      	strb	r3, [r7, #5]
 8002052:	4613      	mov	r3, r2
 8002054:	713b      	strb	r3, [r7, #4]
    int cnt = 0;
 8002056:	2300      	movs	r3, #0
 8002058:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    int i = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    uint8_t i2cData[132] = {0};
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	f107 0310 	add.w	r3, r7, #16
 800206a:	2280      	movs	r2, #128	@ 0x80
 800206c:	2100      	movs	r1, #0
 800206e:	4618      	mov	r0, r3
 8002070:	f005 fa5c 	bl	800752c <memset>


    if(Custom_HAL_I2C_Mem_Read(&hi2c1, (slaveAddr << 1), command, startAddress, addressStep, nMemAddressRead, i2cData, 2*nMemAddressRead, 100) != HAL_OK)
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	b29b      	uxth	r3, r3
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	b299      	uxth	r1, r3
 800207c:	f897 30a8 	ldrb.w	r3, [r7, #168]	@ 0xa8
 8002080:	b29b      	uxth	r3, r3
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	b29b      	uxth	r3, r3
 8002086:	7978      	ldrb	r0, [r7, #5]
 8002088:	79ba      	ldrb	r2, [r7, #6]
 800208a:	2464      	movs	r4, #100	@ 0x64
 800208c:	9404      	str	r4, [sp, #16]
 800208e:	9303      	str	r3, [sp, #12]
 8002090:	f107 030c 	add.w	r3, r7, #12
 8002094:	9302      	str	r3, [sp, #8]
 8002096:	f897 30a8 	ldrb.w	r3, [r7, #168]	@ 0xa8
 800209a:	9301      	str	r3, [sp, #4]
 800209c:	793b      	ldrb	r3, [r7, #4]
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	4603      	mov	r3, r0
 80020a2:	481d      	ldr	r0, [pc, #116]	@ (8002118 <MLX90621_I2CRead_Polling+0xe0>)
 80020a4:	f003 fcd4 	bl	8005a50 <Custom_HAL_I2C_Mem_Read>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d002      	beq.n	80020b4 <MLX90621_I2CRead_Polling+0x7c>
    {
    	return -1;
 80020ae:	f04f 33ff 	mov.w	r3, #4294967295
 80020b2:	e02c      	b.n	800210e <MLX90621_I2CRead_Polling+0xd6>
    }

    for(cnt=0; cnt < nMemAddressRead; cnt++)
 80020b4:	2300      	movs	r3, #0
 80020b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80020ba:	e021      	b.n	8002100 <MLX90621_I2CRead_Polling+0xc8>
    {
        i = cnt << 1;
 80020bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        *data++ = (uint16_t)i2cData[i+1]*256 + (uint16_t)i2cData[i];
 80020c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80020ca:	3301      	adds	r3, #1
 80020cc:	3398      	adds	r3, #152	@ 0x98
 80020ce:	443b      	add	r3, r7
 80020d0:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 80020d4:	021b      	lsls	r3, r3, #8
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	f107 010c 	add.w	r1, r7, #12
 80020dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80020e0:	440b      	add	r3, r1
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80020ea:	1c99      	adds	r1, r3, #2
 80020ec:	f8c7 10ac 	str.w	r1, [r7, #172]	@ 0xac
 80020f0:	4402      	add	r2, r0
 80020f2:	b292      	uxth	r2, r2
 80020f4:	801a      	strh	r2, [r3, #0]
    for(cnt=0; cnt < nMemAddressRead; cnt++)
 80020f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80020fa:	3301      	adds	r3, #1
 80020fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002100:	f897 30a8 	ldrb.w	r3, [r7, #168]	@ 0xa8
 8002104:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002108:	429a      	cmp	r2, r3
 800210a:	dbd7      	blt.n	80020bc <MLX90621_I2CRead_Polling+0x84>
    }

    return 0;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	379c      	adds	r7, #156	@ 0x9c
 8002112:	46bd      	mov	sp, r7
 8002114:	bd90      	pop	{r4, r7, pc}
 8002116:	bf00      	nop
 8002118:	20000a68 	.word	0x20000a68

0800211c <MLX90621_I2CWrite>:


int MLX90621_I2CWrite(uint8_t slaveAddr, uint8_t command, uint8_t checkValue, uint16_t data)
{
 800211c:	b590      	push	{r4, r7, lr}
 800211e:	b087      	sub	sp, #28
 8002120:	af02      	add	r7, sp, #8
 8002122:	4604      	mov	r4, r0
 8002124:	4608      	mov	r0, r1
 8002126:	4611      	mov	r1, r2
 8002128:	461a      	mov	r2, r3
 800212a:	4623      	mov	r3, r4
 800212c:	71fb      	strb	r3, [r7, #7]
 800212e:	4603      	mov	r3, r0
 8002130:	71bb      	strb	r3, [r7, #6]
 8002132:	460b      	mov	r3, r1
 8002134:	717b      	strb	r3, [r7, #5]
 8002136:	4613      	mov	r3, r2
 8002138:	807b      	strh	r3, [r7, #2]
    uint8_t sa;
    char cmd[5] = {0,0,0,0,0};
 800213a:	4a24      	ldr	r2, [pc, #144]	@ (80021cc <MLX90621_I2CWrite+0xb0>)
 800213c:	f107 0308 	add.w	r3, r7, #8
 8002140:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002144:	6018      	str	r0, [r3, #0]
 8002146:	3304      	adds	r3, #4
 8002148:	7019      	strb	r1, [r3, #0]
    static uint16_t dataCheck = 0;
    

    sa = (slaveAddr << 1);
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	73fb      	strb	r3, [r7, #15]
    cmd[0] = command;
 8002150:	79bb      	ldrb	r3, [r7, #6]
 8002152:	723b      	strb	r3, [r7, #8]
    cmd[2] = data & 0x00FF;
 8002154:	887b      	ldrh	r3, [r7, #2]
 8002156:	b2db      	uxtb	r3, r3
 8002158:	72bb      	strb	r3, [r7, #10]
    cmd[1] = cmd[2] - checkValue;
 800215a:	7aba      	ldrb	r2, [r7, #10]
 800215c:	797b      	ldrb	r3, [r7, #5]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	b2db      	uxtb	r3, r3
 8002162:	727b      	strb	r3, [r7, #9]
    cmd[4] = data >> 8;
 8002164:	887b      	ldrh	r3, [r7, #2]
 8002166:	0a1b      	lsrs	r3, r3, #8
 8002168:	b29b      	uxth	r3, r3
 800216a:	b2db      	uxtb	r3, r3
 800216c:	733b      	strb	r3, [r7, #12]
    cmd[3] = cmd[4] - checkValue;
 800216e:	7b3a      	ldrb	r2, [r7, #12]
 8002170:	797b      	ldrb	r3, [r7, #5]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	b2db      	uxtb	r3, r3
 8002176:	72fb      	strb	r3, [r7, #11]

//    &hi2c1, sa, cmd, 5, 1000
    if(HAL_I2C_Master_Transmit(&hi2c1, sa, cmd, 5, 1000)!=HAL_OK)
 8002178:	7bfb      	ldrb	r3, [r7, #15]
 800217a:	b299      	uxth	r1, r3
 800217c:	f107 0208 	add.w	r2, r7, #8
 8002180:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	2305      	movs	r3, #5
 8002188:	4811      	ldr	r0, [pc, #68]	@ (80021d0 <MLX90621_I2CWrite+0xb4>)
 800218a:	f002 fa09 	bl	80045a0 <HAL_I2C_Master_Transmit>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <MLX90621_I2CWrite+0x7c>
    {
    	return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e014      	b.n	80021c2 <MLX90621_I2CWrite+0xa6>
    }

    MLX90621_I2CRead_Polling(slaveAddr, 0x02, 0x8F+command, 0, 1, &dataCheck);
 8002198:	79bb      	ldrb	r3, [r7, #6]
 800219a:	3b71      	subs	r3, #113	@ 0x71
 800219c:	b2da      	uxtb	r2, r3
 800219e:	79f8      	ldrb	r0, [r7, #7]
 80021a0:	4b0c      	ldr	r3, [pc, #48]	@ (80021d4 <MLX90621_I2CWrite+0xb8>)
 80021a2:	9301      	str	r3, [sp, #4]
 80021a4:	2301      	movs	r3, #1
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	2300      	movs	r3, #0
 80021aa:	2102      	movs	r1, #2
 80021ac:	f7ff ff44 	bl	8002038 <MLX90621_I2CRead_Polling>

    if (dataCheck != data)
 80021b0:	4b08      	ldr	r3, [pc, #32]	@ (80021d4 <MLX90621_I2CWrite+0xb8>)
 80021b2:	881b      	ldrh	r3, [r3, #0]
 80021b4:	887a      	ldrh	r2, [r7, #2]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d002      	beq.n	80021c0 <MLX90621_I2CWrite+0xa4>
    {
        return -2;
 80021ba:	f06f 0301 	mvn.w	r3, #1
 80021be:	e000      	b.n	80021c2 <MLX90621_I2CWrite+0xa6>
    }

    return 0;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd90      	pop	{r4, r7, pc}
 80021ca:	bf00      	nop
 80021cc:	080084d8 	.word	0x080084d8
 80021d0:	20000a68 	.word	0x20000a68
 80021d4:	20000a3c 	.word	0x20000a3c

080021d8 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80021dc:	4b17      	ldr	r3, [pc, #92]	@ (800223c <MX_CAN_Init+0x64>)
 80021de:	4a18      	ldr	r2, [pc, #96]	@ (8002240 <MX_CAN_Init+0x68>)
 80021e0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 80021e2:	4b16      	ldr	r3, [pc, #88]	@ (800223c <MX_CAN_Init+0x64>)
 80021e4:	2202      	movs	r2, #2
 80021e6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80021e8:	4b14      	ldr	r3, [pc, #80]	@ (800223c <MX_CAN_Init+0x64>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80021ee:	4b13      	ldr	r3, [pc, #76]	@ (800223c <MX_CAN_Init+0x64>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 80021f4:	4b11      	ldr	r3, [pc, #68]	@ (800223c <MX_CAN_Init+0x64>)
 80021f6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80021fa:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 80021fc:	4b0f      	ldr	r3, [pc, #60]	@ (800223c <MX_CAN_Init+0x64>)
 80021fe:	f44f 02e0 	mov.w	r2, #7340032	@ 0x700000
 8002202:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002204:	4b0d      	ldr	r3, [pc, #52]	@ (800223c <MX_CAN_Init+0x64>)
 8002206:	2200      	movs	r2, #0
 8002208:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 800220a:	4b0c      	ldr	r3, [pc, #48]	@ (800223c <MX_CAN_Init+0x64>)
 800220c:	2201      	movs	r2, #1
 800220e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002210:	4b0a      	ldr	r3, [pc, #40]	@ (800223c <MX_CAN_Init+0x64>)
 8002212:	2200      	movs	r2, #0
 8002214:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002216:	4b09      	ldr	r3, [pc, #36]	@ (800223c <MX_CAN_Init+0x64>)
 8002218:	2200      	movs	r2, #0
 800221a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800221c:	4b07      	ldr	r3, [pc, #28]	@ (800223c <MX_CAN_Init+0x64>)
 800221e:	2200      	movs	r2, #0
 8002220:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002222:	4b06      	ldr	r3, [pc, #24]	@ (800223c <MX_CAN_Init+0x64>)
 8002224:	2200      	movs	r2, #0
 8002226:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002228:	4804      	ldr	r0, [pc, #16]	@ (800223c <MX_CAN_Init+0x64>)
 800222a:	f000 febd 	bl	8002fa8 <HAL_CAN_Init>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8002234:	f000 f9d2 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8002238:	bf00      	nop
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20000a40 	.word	0x20000a40
 8002240:	40006400 	.word	0x40006400

08002244 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08a      	sub	sp, #40	@ 0x28
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224c:	f107 0314 	add.w	r3, r7, #20
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a28      	ldr	r2, [pc, #160]	@ (8002304 <HAL_CAN_MspInit+0xc0>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d149      	bne.n	80022fa <HAL_CAN_MspInit+0xb6>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002266:	4b28      	ldr	r3, [pc, #160]	@ (8002308 <HAL_CAN_MspInit+0xc4>)
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	4a27      	ldr	r2, [pc, #156]	@ (8002308 <HAL_CAN_MspInit+0xc4>)
 800226c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002270:	61d3      	str	r3, [r2, #28]
 8002272:	4b25      	ldr	r3, [pc, #148]	@ (8002308 <HAL_CAN_MspInit+0xc4>)
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800227e:	4b22      	ldr	r3, [pc, #136]	@ (8002308 <HAL_CAN_MspInit+0xc4>)
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	4a21      	ldr	r2, [pc, #132]	@ (8002308 <HAL_CAN_MspInit+0xc4>)
 8002284:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002288:	6153      	str	r3, [r2, #20]
 800228a:	4b1f      	ldr	r3, [pc, #124]	@ (8002308 <HAL_CAN_MspInit+0xc4>)
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002296:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800229a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229c:	2302      	movs	r3, #2
 800229e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022a4:	2303      	movs	r3, #3
 80022a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 80022a8:	2309      	movs	r3, #9
 80022aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ac:	f107 0314 	add.w	r3, r7, #20
 80022b0:	4619      	mov	r1, r3
 80022b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022b6:	f001 ff3f 	bl	8004138 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN_TX_IRQn, 0, 0);
 80022ba:	2200      	movs	r2, #0
 80022bc:	2100      	movs	r1, #0
 80022be:	2013      	movs	r0, #19
 80022c0:	f001 fcd5 	bl	8003c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN_TX_IRQn);
 80022c4:	2013      	movs	r0, #19
 80022c6:	f001 fcee 	bl	8003ca6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 80022ca:	2200      	movs	r2, #0
 80022cc:	2100      	movs	r1, #0
 80022ce:	2014      	movs	r0, #20
 80022d0:	f001 fccd 	bl	8003c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 80022d4:	2014      	movs	r0, #20
 80022d6:	f001 fce6 	bl	8003ca6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 80022da:	2200      	movs	r2, #0
 80022dc:	2100      	movs	r1, #0
 80022de:	2015      	movs	r0, #21
 80022e0:	f001 fcc5 	bl	8003c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 80022e4:	2015      	movs	r0, #21
 80022e6:	f001 fcde 	bl	8003ca6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 0, 0);
 80022ea:	2200      	movs	r2, #0
 80022ec:	2100      	movs	r1, #0
 80022ee:	2016      	movs	r0, #22
 80022f0:	f001 fcbd 	bl	8003c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 80022f4:	2016      	movs	r0, #22
 80022f6:	f001 fcd6 	bl	8003ca6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 80022fa:	bf00      	nop
 80022fc:	3728      	adds	r7, #40	@ 0x28
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40006400 	.word	0x40006400
 8002308:	40021000 	.word	0x40021000

0800230c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b088      	sub	sp, #32
 8002310:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002312:	f107 030c 	add.w	r3, r7, #12
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	605a      	str	r2, [r3, #4]
 800231c:	609a      	str	r2, [r3, #8]
 800231e:	60da      	str	r2, [r3, #12]
 8002320:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002322:	4b1e      	ldr	r3, [pc, #120]	@ (800239c <MX_GPIO_Init+0x90>)
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	4a1d      	ldr	r2, [pc, #116]	@ (800239c <MX_GPIO_Init+0x90>)
 8002328:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800232c:	6153      	str	r3, [r2, #20]
 800232e:	4b1b      	ldr	r3, [pc, #108]	@ (800239c <MX_GPIO_Init+0x90>)
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002336:	60bb      	str	r3, [r7, #8]
 8002338:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800233a:	4b18      	ldr	r3, [pc, #96]	@ (800239c <MX_GPIO_Init+0x90>)
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	4a17      	ldr	r2, [pc, #92]	@ (800239c <MX_GPIO_Init+0x90>)
 8002340:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002344:	6153      	str	r3, [r2, #20]
 8002346:	4b15      	ldr	r3, [pc, #84]	@ (800239c <MX_GPIO_Init+0x90>)
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800234e:	607b      	str	r3, [r7, #4]
 8002350:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002352:	4b12      	ldr	r3, [pc, #72]	@ (800239c <MX_GPIO_Init+0x90>)
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	4a11      	ldr	r2, [pc, #68]	@ (800239c <MX_GPIO_Init+0x90>)
 8002358:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800235c:	6153      	str	r3, [r2, #20]
 800235e:	4b0f      	ldr	r3, [pc, #60]	@ (800239c <MX_GPIO_Init+0x90>)
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002366:	603b      	str	r3, [r7, #0]
 8002368:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800236a:	2200      	movs	r2, #0
 800236c:	2101      	movs	r1, #1
 800236e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002372:	f002 f853 	bl	800441c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002376:	2301      	movs	r3, #1
 8002378:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800237a:	2301      	movs	r3, #1
 800237c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002382:	2300      	movs	r3, #0
 8002384:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002386:	f107 030c 	add.w	r3, r7, #12
 800238a:	4619      	mov	r1, r3
 800238c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002390:	f001 fed2 	bl	8004138 <HAL_GPIO_Init>

}
 8002394:	bf00      	nop
 8002396:	3720      	adds	r7, #32
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40021000 	.word	0x40021000

080023a0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002414 <MX_I2C1_Init+0x74>)
 80023a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002418 <MX_I2C1_Init+0x78>)
 80023a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00101D2D;
 80023aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002414 <MX_I2C1_Init+0x74>)
 80023ac:	4a1b      	ldr	r2, [pc, #108]	@ (800241c <MX_I2C1_Init+0x7c>)
 80023ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80023b0:	4b18      	ldr	r3, [pc, #96]	@ (8002414 <MX_I2C1_Init+0x74>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023b6:	4b17      	ldr	r3, [pc, #92]	@ (8002414 <MX_I2C1_Init+0x74>)
 80023b8:	2201      	movs	r2, #1
 80023ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023bc:	4b15      	ldr	r3, [pc, #84]	@ (8002414 <MX_I2C1_Init+0x74>)
 80023be:	2200      	movs	r2, #0
 80023c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80023c2:	4b14      	ldr	r3, [pc, #80]	@ (8002414 <MX_I2C1_Init+0x74>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80023c8:	4b12      	ldr	r3, [pc, #72]	@ (8002414 <MX_I2C1_Init+0x74>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023ce:	4b11      	ldr	r3, [pc, #68]	@ (8002414 <MX_I2C1_Init+0x74>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002414 <MX_I2C1_Init+0x74>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023da:	480e      	ldr	r0, [pc, #56]	@ (8002414 <MX_I2C1_Init+0x74>)
 80023dc:	f002 f850 	bl	8004480 <HAL_I2C_Init>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80023e6:	f000 f8f9 	bl	80025dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80023ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80023ee:	4809      	ldr	r0, [pc, #36]	@ (8002414 <MX_I2C1_Init+0x74>)
 80023f0:	f003 fc4c 	bl	8005c8c <HAL_I2CEx_ConfigAnalogFilter>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80023fa:	f000 f8ef 	bl	80025dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80023fe:	2100      	movs	r1, #0
 8002400:	4804      	ldr	r0, [pc, #16]	@ (8002414 <MX_I2C1_Init+0x74>)
 8002402:	f003 fc8e 	bl	8005d22 <HAL_I2CEx_ConfigDigitalFilter>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800240c:	f000 f8e6 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002410:	bf00      	nop
 8002412:	bd80      	pop	{r7, pc}
 8002414:	20000a68 	.word	0x20000a68
 8002418:	40005400 	.word	0x40005400
 800241c:	00101d2d 	.word	0x00101d2d

08002420 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08a      	sub	sp, #40	@ 0x28
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002428:	f107 0314 	add.w	r3, r7, #20
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	60da      	str	r2, [r3, #12]
 8002436:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a2e      	ldr	r2, [pc, #184]	@ (80024f8 <HAL_I2C_MspInit+0xd8>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d155      	bne.n	80024ee <HAL_I2C_MspInit+0xce>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002442:	4b2e      	ldr	r3, [pc, #184]	@ (80024fc <HAL_I2C_MspInit+0xdc>)
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	4a2d      	ldr	r2, [pc, #180]	@ (80024fc <HAL_I2C_MspInit+0xdc>)
 8002448:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800244c:	6153      	str	r3, [r2, #20]
 800244e:	4b2b      	ldr	r3, [pc, #172]	@ (80024fc <HAL_I2C_MspInit+0xdc>)
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800245a:	4b28      	ldr	r3, [pc, #160]	@ (80024fc <HAL_I2C_MspInit+0xdc>)
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	4a27      	ldr	r2, [pc, #156]	@ (80024fc <HAL_I2C_MspInit+0xdc>)
 8002460:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002464:	6153      	str	r3, [r2, #20]
 8002466:	4b25      	ldr	r3, [pc, #148]	@ (80024fc <HAL_I2C_MspInit+0xdc>)
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002472:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002478:	2312      	movs	r3, #18
 800247a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247c:	2300      	movs	r3, #0
 800247e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002480:	2303      	movs	r3, #3
 8002482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002484:	2304      	movs	r3, #4
 8002486:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002488:	f107 0314 	add.w	r3, r7, #20
 800248c:	4619      	mov	r1, r3
 800248e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002492:	f001 fe51 	bl	8004138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002496:	2380      	movs	r3, #128	@ 0x80
 8002498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800249a:	2312      	movs	r3, #18
 800249c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024a2:	2303      	movs	r3, #3
 80024a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024a6:	2304      	movs	r3, #4
 80024a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024aa:	f107 0314 	add.w	r3, r7, #20
 80024ae:	4619      	mov	r1, r3
 80024b0:	4813      	ldr	r0, [pc, #76]	@ (8002500 <HAL_I2C_MspInit+0xe0>)
 80024b2:	f001 fe41 	bl	8004138 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024b6:	4b11      	ldr	r3, [pc, #68]	@ (80024fc <HAL_I2C_MspInit+0xdc>)
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	4a10      	ldr	r2, [pc, #64]	@ (80024fc <HAL_I2C_MspInit+0xdc>)
 80024bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80024c0:	61d3      	str	r3, [r2, #28]
 80024c2:	4b0e      	ldr	r3, [pc, #56]	@ (80024fc <HAL_I2C_MspInit+0xdc>)
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024ca:	60bb      	str	r3, [r7, #8]
 80024cc:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80024ce:	2200      	movs	r2, #0
 80024d0:	2100      	movs	r1, #0
 80024d2:	201f      	movs	r0, #31
 80024d4:	f001 fbcb 	bl	8003c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80024d8:	201f      	movs	r0, #31
 80024da:	f001 fbe4 	bl	8003ca6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80024de:	2200      	movs	r2, #0
 80024e0:	2100      	movs	r1, #0
 80024e2:	2020      	movs	r0, #32
 80024e4:	f001 fbc3 	bl	8003c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80024e8:	2020      	movs	r0, #32
 80024ea:	f001 fbdc 	bl	8003ca6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80024ee:	bf00      	nop
 80024f0:	3728      	adds	r7, #40	@ 0x28
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40005400 	.word	0x40005400
 80024fc:	40021000 	.word	0x40021000
 8002500:	48000400 	.word	0x48000400

08002504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002508:	f000 fcc4 	bl	8002e94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800250c:	f000 f80a 	bl	8002524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002510:	f7ff fefc 	bl	800230c <MX_GPIO_Init>
  MX_CAN_Init();
 8002514:	f7ff fe60 	bl	80021d8 <MX_CAN_Init>
  MX_I2C1_Init();
 8002518:	f7ff ff42 	bl	80023a0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  App_Init();
 800251c:	f7fe fb10 	bl	8000b40 <App_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002520:	bf00      	nop
 8002522:	e7fd      	b.n	8002520 <main+0x1c>

08002524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b09c      	sub	sp, #112	@ 0x70
 8002528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800252a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800252e:	2228      	movs	r2, #40	@ 0x28
 8002530:	2100      	movs	r1, #0
 8002532:	4618      	mov	r0, r3
 8002534:	f004 fffa 	bl	800752c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002538:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002548:	463b      	mov	r3, r7
 800254a:	2234      	movs	r2, #52	@ 0x34
 800254c:	2100      	movs	r1, #0
 800254e:	4618      	mov	r0, r3
 8002550:	f004 ffec 	bl	800752c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002554:	2303      	movs	r3, #3
 8002556:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002558:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800255c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800255e:	2301      	movs	r3, #1
 8002560:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002562:	2301      	movs	r3, #1
 8002564:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002566:	2310      	movs	r3, #16
 8002568:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800256a:	2302      	movs	r3, #2
 800256c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800256e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002572:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002574:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002578:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800257a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800257e:	4618      	mov	r0, r3
 8002580:	f003 fc1c 	bl	8005dbc <HAL_RCC_OscConfig>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800258a:	f000 f827 	bl	80025dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800258e:	230f      	movs	r3, #15
 8002590:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002592:	2302      	movs	r3, #2
 8002594:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002596:	2300      	movs	r3, #0
 8002598:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800259a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800259e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025a0:	2300      	movs	r3, #0
 80025a2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80025a4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80025a8:	2102      	movs	r1, #2
 80025aa:	4618      	mov	r0, r3
 80025ac:	f004 fc44 	bl	8006e38 <HAL_RCC_ClockConfig>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <SystemClock_Config+0x96>
  {
    Error_Handler();
 80025b6:	f000 f811 	bl	80025dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80025ba:	2320      	movs	r3, #32
 80025bc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80025be:	2300      	movs	r3, #0
 80025c0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025c2:	463b      	mov	r3, r7
 80025c4:	4618      	mov	r0, r3
 80025c6:	f004 fe1f 	bl	8007208 <HAL_RCCEx_PeriphCLKConfig>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80025d0:	f000 f804 	bl	80025dc <Error_Handler>
  }
}
 80025d4:	bf00      	nop
 80025d6:	3770      	adds	r7, #112	@ 0x70
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025e0:	b672      	cpsid	i
}
 80025e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025e4:	bf00      	nop
 80025e6:	e7fd      	b.n	80025e4 <Error_Handler+0x8>

080025e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ee:	4b0f      	ldr	r3, [pc, #60]	@ (800262c <HAL_MspInit+0x44>)
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	4a0e      	ldr	r2, [pc, #56]	@ (800262c <HAL_MspInit+0x44>)
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	6193      	str	r3, [r2, #24]
 80025fa:	4b0c      	ldr	r3, [pc, #48]	@ (800262c <HAL_MspInit+0x44>)
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	607b      	str	r3, [r7, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002606:	4b09      	ldr	r3, [pc, #36]	@ (800262c <HAL_MspInit+0x44>)
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	4a08      	ldr	r2, [pc, #32]	@ (800262c <HAL_MspInit+0x44>)
 800260c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002610:	61d3      	str	r3, [r2, #28]
 8002612:	4b06      	ldr	r3, [pc, #24]	@ (800262c <HAL_MspInit+0x44>)
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	40021000 	.word	0x40021000

08002630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002634:	bf00      	nop
 8002636:	e7fd      	b.n	8002634 <NMI_Handler+0x4>

08002638 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800263c:	bf00      	nop
 800263e:	e7fd      	b.n	800263c <HardFault_Handler+0x4>

08002640 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002644:	bf00      	nop
 8002646:	e7fd      	b.n	8002644 <MemManage_Handler+0x4>

08002648 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800264c:	bf00      	nop
 800264e:	e7fd      	b.n	800264c <BusFault_Handler+0x4>

08002650 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002654:	bf00      	nop
 8002656:	e7fd      	b.n	8002654 <UsageFault_Handler+0x4>

08002658 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800265c:	bf00      	nop
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002666:	b480      	push	{r7}
 8002668:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002678:	bf00      	nop
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002686:	f000 fc4b 	bl	8002f20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <USB_HP_CAN_TX_IRQHandler>:

/**
  * @brief This function handles CAN TX and USB high priority interrupts.
  */
void USB_HP_CAN_TX_IRQHandler(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002694:	4802      	ldr	r0, [pc, #8]	@ (80026a0 <USB_HP_CAN_TX_IRQHandler+0x10>)
 8002696:	f000 ffd8 	bl	800364a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20000a40 	.word	0x20000a40

080026a4 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 and USB low priority interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80026a8:	4802      	ldr	r0, [pc, #8]	@ (80026b4 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80026aa:	f000 ffce 	bl	800364a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	20000a40 	.word	0x20000a40

080026b8 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80026bc:	4802      	ldr	r0, [pc, #8]	@ (80026c8 <CAN_RX1_IRQHandler+0x10>)
 80026be:	f000 ffc4 	bl	800364a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20000a40 	.word	0x20000a40

080026cc <CAN_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN_SCE_IRQHandler(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_SCE_IRQn 0 */

  /* USER CODE END CAN_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80026d0:	4802      	ldr	r0, [pc, #8]	@ (80026dc <CAN_SCE_IRQHandler+0x10>)
 80026d2:	f000 ffba 	bl	800364a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_SCE_IRQn 1 */

  /* USER CODE END CAN_SCE_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20000a40 	.word	0x20000a40

080026e0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80026e4:	4802      	ldr	r0, [pc, #8]	@ (80026f0 <I2C1_EV_IRQHandler+0x10>)
 80026e6:	f002 f945 	bl	8004974 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20000a68 	.word	0x20000a68

080026f4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80026f8:	4802      	ldr	r0, [pc, #8]	@ (8002704 <I2C1_ER_IRQHandler+0x10>)
 80026fa:	f002 f955 	bl	80049a8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80026fe:	bf00      	nop
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	20000a68 	.word	0x20000a68

08002708 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800270c:	4b06      	ldr	r3, [pc, #24]	@ (8002728 <SystemInit+0x20>)
 800270e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002712:	4a05      	ldr	r2, [pc, #20]	@ (8002728 <SystemInit+0x20>)
 8002714:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002718:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800271c:	bf00      	nop
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	e000ed00 	.word	0xe000ed00

0800272c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800272c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002764 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002730:	f7ff ffea 	bl	8002708 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002734:	480c      	ldr	r0, [pc, #48]	@ (8002768 <LoopForever+0x6>)
  ldr r1, =_edata
 8002736:	490d      	ldr	r1, [pc, #52]	@ (800276c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002738:	4a0d      	ldr	r2, [pc, #52]	@ (8002770 <LoopForever+0xe>)
  movs r3, #0
 800273a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800273c:	e002      	b.n	8002744 <LoopCopyDataInit>

0800273e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800273e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002742:	3304      	adds	r3, #4

08002744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002748:	d3f9      	bcc.n	800273e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800274a:	4a0a      	ldr	r2, [pc, #40]	@ (8002774 <LoopForever+0x12>)
  ldr r4, =_ebss
 800274c:	4c0a      	ldr	r4, [pc, #40]	@ (8002778 <LoopForever+0x16>)
  movs r3, #0
 800274e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002750:	e001      	b.n	8002756 <LoopFillZerobss>

08002752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002754:	3204      	adds	r2, #4

08002756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002758:	d3fb      	bcc.n	8002752 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800275a:	f004 fef5 	bl	8007548 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800275e:	f7ff fed1 	bl	8002504 <main>

08002762 <LoopForever>:

LoopForever:
    b LoopForever
 8002762:	e7fe      	b.n	8002762 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002764:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800276c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002770:	08008548 	.word	0x08008548
  ldr r2, =_sbss
 8002774:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002778:	20000e30 	.word	0x20000e30

0800277c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800277c:	e7fe      	b.n	800277c <ADC1_IRQHandler>
	...

08002780 <CAN_FIFO_Add>:

#include "CAN_FIFO.h"


void CAN_FIFO_Add(can_fifo *fifo, uint8_t *data_ptr)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
	if(fifo->empty)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00b      	beq.n	80027ac <CAN_FIFO_Add+0x2c>
	{
		fifo->data_ptr[fifo->last_element]=data_ptr;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	785b      	ldrb	r3, [r3, #1]
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	605a      	str	r2, [r3, #4]
		fifo->empty=0;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		return;
 80027aa:	e02e      	b.n	800280a <CAN_FIFO_Add+0x8a>
	}
	fifo->last_element=(fifo->last_element+1)%CAN_FIFO_SIZE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	785b      	ldrb	r3, [r3, #1]
 80027b0:	1c5a      	adds	r2, r3, #1
 80027b2:	4b18      	ldr	r3, [pc, #96]	@ (8002814 <CAN_FIFO_Add+0x94>)
 80027b4:	fb83 1302 	smull	r1, r3, r3, r2
 80027b8:	1099      	asrs	r1, r3, #2
 80027ba:	17d3      	asrs	r3, r2, #31
 80027bc:	1ac9      	subs	r1, r1, r3
 80027be:	460b      	mov	r3, r1
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	440b      	add	r3, r1
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	1ad1      	subs	r1, r2, r3
 80027c8:	b2ca      	uxtb	r2, r1
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	705a      	strb	r2, [r3, #1]

	if(fifo->last_element==fifo->first_element)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	785a      	ldrb	r2, [r3, #1]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d110      	bne.n	80027fc <CAN_FIFO_Add+0x7c>
	{
		fifo->first_element=(fifo->first_element+1)%CAN_FIFO_SIZE;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	1c5a      	adds	r2, r3, #1
 80027e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002814 <CAN_FIFO_Add+0x94>)
 80027e2:	fb83 1302 	smull	r1, r3, r3, r2
 80027e6:	1099      	asrs	r1, r3, #2
 80027e8:	17d3      	asrs	r3, r2, #31
 80027ea:	1ac9      	subs	r1, r1, r3
 80027ec:	460b      	mov	r3, r1
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	440b      	add	r3, r1
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	1ad1      	subs	r1, r2, r3
 80027f6:	b2ca      	uxtb	r2, r1
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	701a      	strb	r2, [r3, #0]
	}
	fifo->data_ptr[fifo->last_element]=data_ptr;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	785b      	ldrb	r3, [r3, #1]
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	605a      	str	r2, [r3, #4]
}
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	66666667 	.word	0x66666667

08002818 <CAN_FIFO_Get>:

/* return 0 if FIFO is empty */
uint8_t* CAN_FIFO_Get(can_fifo *fifo)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
	uint8_t *temp;
	if(fifo->empty){
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <CAN_FIFO_Get+0x16>
		return 0;
 800282a:	2300      	movs	r3, #0
 800282c:	e024      	b.n	8002878 <CAN_FIFO_Get+0x60>
	}
	temp=fifo->data_ptr[fifo->first_element];
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	60fb      	str	r3, [r7, #12]

	if(fifo->first_element==fifo->last_element){
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	781a      	ldrb	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	785b      	ldrb	r3, [r3, #1]
 8002844:	429a      	cmp	r2, r3
 8002846:	d105      	bne.n	8002854 <CAN_FIFO_Get+0x3c>
		fifo->empty=1;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		return temp;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	e011      	b.n	8002878 <CAN_FIFO_Get+0x60>
	}
	fifo->first_element=(fifo->first_element+1)%CAN_FIFO_SIZE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	4b0a      	ldr	r3, [pc, #40]	@ (8002884 <CAN_FIFO_Get+0x6c>)
 800285c:	fb83 1302 	smull	r1, r3, r3, r2
 8002860:	1099      	asrs	r1, r3, #2
 8002862:	17d3      	asrs	r3, r2, #31
 8002864:	1ac9      	subs	r1, r1, r3
 8002866:	460b      	mov	r3, r1
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	440b      	add	r3, r1
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	1ad1      	subs	r1, r2, r3
 8002870:	b2ca      	uxtb	r2, r1
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	701a      	strb	r2, [r3, #0]

	return temp;
 8002876:	68fb      	ldr	r3, [r7, #12]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	66666667 	.word	0x66666667

08002888 <CAN_FIFO_Flush>:

void CAN_FIFO_Flush(can_fifo *fifo)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
	fifo->first_element=0;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	701a      	strb	r2, [r3, #0]
	fifo->last_element=0;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	705a      	strb	r2, [r3, #1]
	fifo->empty=1;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <CAN_Init>:

uint8_t FilterFrame(CAN_HandleTypeDef* hcan, uint16_t id);

can_info _can_info;

void CAN_Init(CAN_HandleTypeDef* hcan){
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
	static uint8_t can_number;
	if(can_number >= NUMBER_OF_CANS)
 80028b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002928 <CAN_Init+0x78>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <CAN_Init+0x14>
		Error_Handler();
 80028c0:	f7ff fe8c 	bl	80025dc <Error_Handler>

	cans[can_number].hcan = hcan;
 80028c4:	4b18      	ldr	r3, [pc, #96]	@ (8002928 <CAN_Init+0x78>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	4619      	mov	r1, r3
 80028ca:	4a18      	ldr	r2, [pc, #96]	@ (800292c <CAN_Init+0x7c>)
 80028cc:	460b      	mov	r3, r1
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	1a5b      	subs	r3, r3, r1
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	601a      	str	r2, [r3, #0]
	cans[can_number].retransmision_counter = 0;
 80028da:	4b13      	ldr	r3, [pc, #76]	@ (8002928 <CAN_Init+0x78>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	4619      	mov	r1, r3
 80028e0:	4a12      	ldr	r2, [pc, #72]	@ (800292c <CAN_Init+0x7c>)
 80028e2:	460b      	mov	r3, r1
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	1a5b      	subs	r3, r3, r1
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	3334      	adds	r3, #52	@ 0x34
 80028ee:	2200      	movs	r2, #0
 80028f0:	701a      	strb	r2, [r3, #0]

	CAN_HW_Init(hcan);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f93a 	bl	8002b6c <CAN_HW_Init>
	CAN_FIFO_Flush(&cans[can_number].fifo);
 80028f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002928 <CAN_Init+0x78>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	461a      	mov	r2, r3
 80028fe:	4613      	mov	r3, r2
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	1a9b      	subs	r3, r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4a09      	ldr	r2, [pc, #36]	@ (800292c <CAN_Init+0x7c>)
 8002908:	4413      	add	r3, r2
 800290a:	3304      	adds	r3, #4
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff ffbb 	bl	8002888 <CAN_FIFO_Flush>

	can_number++;
 8002912:	4b05      	ldr	r3, [pc, #20]	@ (8002928 <CAN_Init+0x78>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	3301      	adds	r3, #1
 8002918:	b2da      	uxtb	r2, r3
 800291a:	4b03      	ldr	r3, [pc, #12]	@ (8002928 <CAN_Init+0x78>)
 800291c:	701a      	strb	r2, [r3, #0]
}
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	20000bf0 	.word	0x20000bf0
 800292c:	20000abc 	.word	0x20000abc

08002930 <CAN_InitFrame>:

void CAN_InitFrame(can_frame* pFrame, CAN_HandleTypeDef* hcan, uint16_t id, uint16_t period, uint8_t dlc)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	4611      	mov	r1, r2
 800293c:	461a      	mov	r2, r3
 800293e:	460b      	mov	r3, r1
 8002940:	80fb      	strh	r3, [r7, #6]
 8002942:	4613      	mov	r3, r2
 8002944:	80bb      	strh	r3, [r7, #4]
	pFrame->hcan = hcan;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	601a      	str	r2, [r3, #0]
	pFrame->core.id = id;
 800294c:	88fa      	ldrh	r2, [r7, #6]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	609a      	str	r2, [r3, #8]
	pFrame->period = period;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	88ba      	ldrh	r2, [r7, #4]
 8002956:	831a      	strh	r2, [r3, #24]
	pFrame->core.dlc = dlc;
 8002958:	7e3a      	ldrb	r2, [r7, #24]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	60da      	str	r2, [r3, #12]
	_can_info.pFrames[_can_info.frames_num] = pFrame;
 800295e:	4b09      	ldr	r3, [pc, #36]	@ (8002984 <CAN_InitFrame+0x54>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	4a08      	ldr	r2, [pc, #32]	@ (8002984 <CAN_InitFrame+0x54>)
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4413      	add	r3, r2
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	605a      	str	r2, [r3, #4]
	_can_info.frames_num++;
 800296c:	4b05      	ldr	r3, [pc, #20]	@ (8002984 <CAN_InitFrame+0x54>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	3301      	adds	r3, #1
 8002972:	b2da      	uxtb	r2, r3
 8002974:	4b03      	ldr	r3, [pc, #12]	@ (8002984 <CAN_InitFrame+0x54>)
 8002976:	701a      	strb	r2, [r3, #0]

}
 8002978:	bf00      	nop
 800297a:	3714      	adds	r7, #20
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	20000b70 	.word	0x20000b70

08002988 <FilterFrame>:
}

/* returns index of frame in _can_info or
   returns 255 if didn't found matching frame */
uint8_t FilterFrame(CAN_HandleTypeDef* hcan, uint16_t id)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	460b      	mov	r3, r1
 8002992:	807b      	strh	r3, [r7, #2]
	for(uint8_t i = 0; i < _can_info.frames_num; i++){
 8002994:	2300      	movs	r3, #0
 8002996:	73fb      	strb	r3, [r7, #15]
 8002998:	e016      	b.n	80029c8 <FilterFrame+0x40>
		if(_can_info.pFrames[i]->core.id == id && _can_info.pFrames[i]->hcan == hcan){
 800299a:	7bfb      	ldrb	r3, [r7, #15]
 800299c:	4a10      	ldr	r2, [pc, #64]	@ (80029e0 <FilterFrame+0x58>)
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	887b      	ldrh	r3, [r7, #2]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d10a      	bne.n	80029c2 <FilterFrame+0x3a>
 80029ac:	7bfb      	ldrb	r3, [r7, #15]
 80029ae:	4a0c      	ldr	r2, [pc, #48]	@ (80029e0 <FilterFrame+0x58>)
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4413      	add	r3, r2
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d101      	bne.n	80029c2 <FilterFrame+0x3a>
			return i;
 80029be:	7bfb      	ldrb	r3, [r7, #15]
 80029c0:	e008      	b.n	80029d4 <FilterFrame+0x4c>
	for(uint8_t i = 0; i < _can_info.frames_num; i++){
 80029c2:	7bfb      	ldrb	r3, [r7, #15]
 80029c4:	3301      	adds	r3, #1
 80029c6:	73fb      	strb	r3, [r7, #15]
 80029c8:	4b05      	ldr	r3, [pc, #20]	@ (80029e0 <FilterFrame+0x58>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	7bfa      	ldrb	r2, [r7, #15]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d3e3      	bcc.n	800299a <FilterFrame+0x12>
		}
	}
	return 255;
 80029d2:	23ff      	movs	r3, #255	@ 0xff
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	20000b70 	.word	0x20000b70

080029e4 <CAN_SendFrame>:
{
	return (pFrame->recieve_time_ms != 0) || (HAL_GetTick() - pFrame->recieve_time_ms < pFrame->period*ACTUAL_TIME_MULTIPLIER);
}

void CAN_SendFrame(can_frame* pFrame)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
	if(CAN_HW_SendFrame(pFrame) != CAN_SUCCESS){
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f909 	bl	8002c04 <CAN_HW_SendFrame>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d020      	beq.n	8002a3a <CAN_SendFrame+0x56>
		for(uint8_t i=0; i<NUMBER_OF_CANS; i++)
 80029f8:	2300      	movs	r3, #0
 80029fa:	73fb      	strb	r3, [r7, #15]
 80029fc:	e01a      	b.n	8002a34 <CAN_SendFrame+0x50>
		{
			if(pFrame->hcan == cans[i].hcan)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6819      	ldr	r1, [r3, #0]
 8002a02:	7bfa      	ldrb	r2, [r7, #15]
 8002a04:	480f      	ldr	r0, [pc, #60]	@ (8002a44 <CAN_SendFrame+0x60>)
 8002a06:	4613      	mov	r3, r2
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	1a9b      	subs	r3, r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4403      	add	r3, r0
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4299      	cmp	r1, r3
 8002a14:	d10b      	bne.n	8002a2e <CAN_SendFrame+0x4a>
			{
				CAN_FIFO_Add(&cans[i].fifo, (uint8_t*)pFrame);
 8002a16:	7bfa      	ldrb	r2, [r7, #15]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	011b      	lsls	r3, r3, #4
 8002a1c:	1a9b      	subs	r3, r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4a08      	ldr	r2, [pc, #32]	@ (8002a44 <CAN_SendFrame+0x60>)
 8002a22:	4413      	add	r3, r2
 8002a24:	3304      	adds	r3, #4
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff fea9 	bl	8002780 <CAN_FIFO_Add>
		for(uint8_t i=0; i<NUMBER_OF_CANS; i++)
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
 8002a30:	3301      	adds	r3, #1
 8002a32:	73fb      	strb	r3, [r7, #15]
 8002a34:	7bfb      	ldrb	r3, [r7, #15]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d9e1      	bls.n	80029fe <CAN_SendFrame+0x1a>
			}
		}
	}
}
 8002a3a:	bf00      	nop
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	20000abc 	.word	0x20000abc

08002a48 <CAN_ReceiveCallback>:
		}
	}
}

void CAN_ReceiveCallback(CAN_HandleTypeDef* hcan, can_msg* msg)
{
 8002a48:	b590      	push	{r4, r7, lr}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
	uint8_t index = FilterFrame(hcan, msg->id);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	4619      	mov	r1, r3
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7ff ff94 	bl	8002988 <FilterFrame>
 8002a60:	4603      	mov	r3, r0
 8002a62:	73bb      	strb	r3, [r7, #14]
	if(index==255) return;
 8002a64:	7bbb      	ldrb	r3, [r7, #14]
 8002a66:	2bff      	cmp	r3, #255	@ 0xff
 8002a68:	d045      	beq.n	8002af6 <CAN_ReceiveCallback+0xae>
	memcpy(_can_info.pFrames[index]->core.data, msg->data, 8);
 8002a6a:	7bbb      	ldrb	r3, [r7, #14]
 8002a6c:	4a24      	ldr	r2, [pc, #144]	@ (8002b00 <CAN_ReceiveCallback+0xb8>)
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f103 0010 	add.w	r0, r3, #16
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	330c      	adds	r3, #12
 8002a7c:	2208      	movs	r2, #8
 8002a7e:	4619      	mov	r1, r3
 8002a80:	f004 fd86 	bl	8007590 <memcpy>
	_can_info.pFrames[index]->recieve_time_ms = HAL_GetTick();
 8002a84:	7bbb      	ldrb	r3, [r7, #14]
 8002a86:	4a1e      	ldr	r2, [pc, #120]	@ (8002b00 <CAN_ReceiveCallback+0xb8>)
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4413      	add	r3, r2
 8002a8c:	685c      	ldr	r4, [r3, #4]
 8002a8e:	f000 fa5b 	bl	8002f48 <HAL_GetTick>
 8002a92:	4603      	mov	r3, r0
 8002a94:	61e3      	str	r3, [r4, #28]
	for(uint8_t i=0; i<NUMBER_OF_CANS; i++){
 8002a96:	2300      	movs	r3, #0
 8002a98:	73fb      	strb	r3, [r7, #15]
 8002a9a:	e028      	b.n	8002aee <CAN_ReceiveCallback+0xa6>
		if(hcan == cans[i].hcan && cans[i].callback != NULL){
 8002a9c:	7bfa      	ldrb	r2, [r7, #15]
 8002a9e:	4919      	ldr	r1, [pc, #100]	@ (8002b04 <CAN_ReceiveCallback+0xbc>)
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	1a9b      	subs	r3, r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d11a      	bne.n	8002ae8 <CAN_ReceiveCallback+0xa0>
 8002ab2:	7bfa      	ldrb	r2, [r7, #15]
 8002ab4:	4913      	ldr	r1, [pc, #76]	@ (8002b04 <CAN_ReceiveCallback+0xbc>)
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	011b      	lsls	r3, r3, #4
 8002aba:	1a9b      	subs	r3, r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	440b      	add	r3, r1
 8002ac0:	3338      	adds	r3, #56	@ 0x38
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00f      	beq.n	8002ae8 <CAN_ReceiveCallback+0xa0>
			cans[i].callback(_can_info.pFrames[index]);
 8002ac8:	7bfa      	ldrb	r2, [r7, #15]
 8002aca:	490e      	ldr	r1, [pc, #56]	@ (8002b04 <CAN_ReceiveCallback+0xbc>)
 8002acc:	4613      	mov	r3, r2
 8002ace:	011b      	lsls	r3, r3, #4
 8002ad0:	1a9b      	subs	r3, r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	3338      	adds	r3, #56	@ 0x38
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	7bbb      	ldrb	r3, [r7, #14]
 8002adc:	4908      	ldr	r1, [pc, #32]	@ (8002b00 <CAN_ReceiveCallback+0xb8>)
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	4790      	blx	r2
	for(uint8_t i=0; i<NUMBER_OF_CANS; i++){
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
 8002aea:	3301      	adds	r3, #1
 8002aec:	73fb      	strb	r3, [r7, #15]
 8002aee:	7bfb      	ldrb	r3, [r7, #15]
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d9d3      	bls.n	8002a9c <CAN_ReceiveCallback+0x54>
 8002af4:	e000      	b.n	8002af8 <CAN_ReceiveCallback+0xb0>
	if(index==255) return;
 8002af6:	bf00      	nop
		}
	}
}
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd90      	pop	{r4, r7, pc}
 8002afe:	bf00      	nop
 8002b00:	20000b70 	.word	0x20000b70
 8002b04:	20000abc 	.word	0x20000abc

08002b08 <CAN_TxCompleteCallback>:

void CAN_TxCompleteCallback(CAN_HandleTypeDef* hcan)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0; i<NUMBER_OF_CANS; i++){
 8002b10:	2300      	movs	r3, #0
 8002b12:	73fb      	strb	r3, [r7, #15]
 8002b14:	e01f      	b.n	8002b56 <CAN_TxCompleteCallback+0x4e>
		if(hcan == cans[i].hcan){
 8002b16:	7bfa      	ldrb	r2, [r7, #15]
 8002b18:	4913      	ldr	r1, [pc, #76]	@ (8002b68 <CAN_TxCompleteCallback+0x60>)
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	011b      	lsls	r3, r3, #4
 8002b1e:	1a9b      	subs	r3, r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	440b      	add	r3, r1
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d111      	bne.n	8002b50 <CAN_TxCompleteCallback+0x48>
			uint8_t* pFrame = CAN_FIFO_Get(&cans[i].fifo);
 8002b2c:	7bfa      	ldrb	r2, [r7, #15]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	1a9b      	subs	r3, r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4a0c      	ldr	r2, [pc, #48]	@ (8002b68 <CAN_TxCompleteCallback+0x60>)
 8002b38:	4413      	add	r3, r2
 8002b3a:	3304      	adds	r3, #4
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff fe6b 	bl	8002818 <CAN_FIFO_Get>
 8002b42:	60b8      	str	r0, [r7, #8]
			if(pFrame){
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d002      	beq.n	8002b50 <CAN_TxCompleteCallback+0x48>
				CAN_SendFrame((can_frame*)pFrame);
 8002b4a:	68b8      	ldr	r0, [r7, #8]
 8002b4c:	f7ff ff4a 	bl	80029e4 <CAN_SendFrame>
	for(uint8_t i=0; i<NUMBER_OF_CANS; i++){
 8002b50:	7bfb      	ldrb	r3, [r7, #15]
 8002b52:	3301      	adds	r3, #1
 8002b54:	73fb      	strb	r3, [r7, #15]
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d9dc      	bls.n	8002b16 <CAN_TxCompleteCallback+0xe>
			}
		}
	}
}
 8002b5c:	bf00      	nop
 8002b5e:	bf00      	nop
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	20000abc 	.word	0x20000abc

08002b6c <CAN_HW_Init>:
#include "CAN_LIB_HW.h"
#ifndef CAN2
#define CAN2 0
#endif

void CAN_HW_Init(CAN_HandleTypeDef* hcan){
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]

	static CAN_FilterTypeDef sFilterConfig;
	if(hcan->Instance == CAN2)sFilterConfig.FilterBank = 14;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d103      	bne.n	8002b84 <CAN_HW_Init+0x18>
 8002b7c:	4b20      	ldr	r3, [pc, #128]	@ (8002c00 <CAN_HW_Init+0x94>)
 8002b7e:	220e      	movs	r2, #14
 8002b80:	615a      	str	r2, [r3, #20]
 8002b82:	e002      	b.n	8002b8a <CAN_HW_Init+0x1e>
	else sFilterConfig.FilterBank = 0;
 8002b84:	4b1e      	ldr	r3, [pc, #120]	@ (8002c00 <CAN_HW_Init+0x94>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002b8a:	4b1d      	ldr	r3, [pc, #116]	@ (8002c00 <CAN_HW_Init+0x94>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002b90:	4b1b      	ldr	r3, [pc, #108]	@ (8002c00 <CAN_HW_Init+0x94>)
 8002b92:	2201      	movs	r2, #1
 8002b94:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8002b96:	4b1a      	ldr	r3, [pc, #104]	@ (8002c00 <CAN_HW_Init+0x94>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8002b9c:	4b18      	ldr	r3, [pc, #96]	@ (8002c00 <CAN_HW_Init+0x94>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8002ba2:	4b17      	ldr	r3, [pc, #92]	@ (8002c00 <CAN_HW_Init+0x94>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8002ba8:	4b15      	ldr	r3, [pc, #84]	@ (8002c00 <CAN_HW_Init+0x94>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002bae:	4b14      	ldr	r3, [pc, #80]	@ (8002c00 <CAN_HW_Init+0x94>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8002bb4:	4b12      	ldr	r3, [pc, #72]	@ (8002c00 <CAN_HW_Init+0x94>)
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8002bba:	4b11      	ldr	r3, [pc, #68]	@ (8002c00 <CAN_HW_Init+0x94>)
 8002bbc:	220e      	movs	r2, #14
 8002bbe:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_CAN_ConfigFilter(hcan, &sFilterConfig) != HAL_OK)
 8002bc0:	490f      	ldr	r1, [pc, #60]	@ (8002c00 <CAN_HW_Init+0x94>)
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 faeb 	bl	800319e <HAL_CAN_ConfigFilter>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <CAN_HW_Init+0x66>
	{
		/* Filter configuration Error */
		Error_Handler();
 8002bce:	f7ff fd05 	bl	80025dc <Error_Handler>
	}

	if (HAL_CAN_Start(hcan) != HAL_OK)
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 fbad 	bl	8003332 <HAL_CAN_Start>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <CAN_HW_Init+0x76>
	{
		/* Start Error */
		Error_Handler();
 8002bde:	f7ff fcfd 	bl	80025dc <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(hcan,
 8002be2:	f248 010f 	movw	r1, #32783	@ 0x800f
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 fd09 	bl	80035fe <HAL_CAN_ActivateNotification>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <CAN_HW_Init+0x8a>
			CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_OVERRUN
					| CAN_IT_RX_FIFO0_FULL | CAN_IT_TX_MAILBOX_EMPTY
					| CAN_IT_ERROR) != HAL_OK)
	{
		/* Notification Error */
		Error_Handler();
 8002bf2:	f7ff fcf3 	bl	80025dc <Error_Handler>
	}

}
 8002bf6:	bf00      	nop
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	20000ca8 	.word	0x20000ca8

08002c04 <CAN_HW_SendFrame>:

CAN_status CAN_HW_SendFrame(can_frame* pFrame){
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]

	/* Check if mailbox is free */
	if ((pFrame->hcan->Instance->TSR & CAN_TSR_TME0) == 0U)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <CAN_HW_SendFrame+0x1c>
		return CAN_FAILURE;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	e052      	b.n	8002cc6 <CAN_HW_SendFrame+0xc2>

	/* Set up the Id */
	if (pFrame->core.isExtId) {
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	791b      	ldrb	r3, [r3, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00a      	beq.n	8002c3e <CAN_HW_SendFrame+0x3a>
		pFrame->hcan->Instance->sTxMailBox[0].TIR = ((pFrame->core.id
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
				<< CAN_TI0R_EXID_Pos) | CAN_ID_EXT | CAN_RTR_DATA);
 8002c2c:	00da      	lsls	r2, r3, #3
		pFrame->hcan->Instance->sTxMailBox[0].TIR = ((pFrame->core.id
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
				<< CAN_TI0R_EXID_Pos) | CAN_ID_EXT | CAN_RTR_DATA);
 8002c34:	f042 0204 	orr.w	r2, r2, #4
		pFrame->hcan->Instance->sTxMailBox[0].TIR = ((pFrame->core.id
 8002c38:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
 8002c3c:	e007      	b.n	8002c4e <CAN_HW_SendFrame+0x4a>
	} else {
		pFrame->hcan->Instance->sTxMailBox[0].TIR = ((pFrame->core.id
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
				<< CAN_TI0R_STID_Pos) | CAN_RTR_DATA);
 8002c48:	0552      	lsls	r2, r2, #21
		pFrame->hcan->Instance->sTxMailBox[0].TIR = ((pFrame->core.id
 8002c4a:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
	}

	/* Set up the DLC */
	pFrame->hcan->Instance->sTxMailBox[0].TDTR = pFrame->core.dlc;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	68d2      	ldr	r2, [r2, #12]
 8002c58:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
	/* Set up the data field */
	WRITE_REG(pFrame->hcan->Instance->sTxMailBox[0].TDHR,
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	7ddb      	ldrb	r3, [r3, #23]
 8002c60:	061a      	lsls	r2, r3, #24
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	7d9b      	ldrb	r3, [r3, #22]
 8002c66:	041b      	lsls	r3, r3, #16
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	7d5b      	ldrb	r3, [r3, #21]
 8002c6e:	021b      	lsls	r3, r3, #8
 8002c70:	431a      	orrs	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	7d1b      	ldrb	r3, [r3, #20]
 8002c76:	4619      	mov	r1, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
			((uint32_t)pFrame->core.data[7] << CAN_TDH0R_DATA7_Pos) | ((uint32_t)pFrame->core.data[6] << CAN_TDH0R_DATA6_Pos) | ((uint32_t)pFrame->core.data[5] << CAN_TDH0R_DATA5_Pos) | ((uint32_t)pFrame->core.data[4] << CAN_TDH0R_DATA4_Pos));
	WRITE_REG(pFrame->hcan->Instance->sTxMailBox[0].TDLR,
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	7cdb      	ldrb	r3, [r3, #19]
 8002c88:	061a      	lsls	r2, r3, #24
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	7c9b      	ldrb	r3, [r3, #18]
 8002c8e:	041b      	lsls	r3, r3, #16
 8002c90:	431a      	orrs	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	7c5b      	ldrb	r3, [r3, #17]
 8002c96:	021b      	lsls	r3, r3, #8
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	7c1b      	ldrb	r3, [r3, #16]
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
			((uint32_t)pFrame->core.data[3] << CAN_TDL0R_DATA3_Pos) | ((uint32_t)pFrame->core.data[2] << CAN_TDL0R_DATA2_Pos) | ((uint32_t)pFrame->core.data[1] << CAN_TDL0R_DATA1_Pos) | ((uint32_t)pFrame->core.data[0] << CAN_TDL0R_DATA0_Pos));

	/* Request transmission */
	SET_BIT(pFrame->hcan->Instance->sTxMailBox[0].TIR, CAN_TI0R_TXRQ);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f8d3 2180 	ldr.w	r2, [r3, #384]	@ 0x180
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f042 0201 	orr.w	r2, r2, #1
 8002cc0:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180

	return CAN_SUCCESS;
 8002cc4:	2301      	movs	r3, #1
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
	...

08002cd4 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
	CAN_TxCompleteCallback(hcan);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f7ff ff13 	bl	8002b08 <CAN_TxCompleteCallback>
	for(int i=0; i<NUMBER_OF_CANS; i++)
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	e017      	b.n	8002d18 <HAL_CAN_TxMailbox0CompleteCallback+0x44>
	{
		if(hcan == cans[i].hcan){
 8002ce8:	490f      	ldr	r1, [pc, #60]	@ (8002d28 <HAL_CAN_TxMailbox0CompleteCallback+0x54>)
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	4613      	mov	r3, r2
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	1a9b      	subs	r3, r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d109      	bne.n	8002d12 <HAL_CAN_TxMailbox0CompleteCallback+0x3e>
			cans[i].retransmision_counter = 0;
 8002cfe:	490a      	ldr	r1, [pc, #40]	@ (8002d28 <HAL_CAN_TxMailbox0CompleteCallback+0x54>)
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	4613      	mov	r3, r2
 8002d04:	011b      	lsls	r3, r3, #4
 8002d06:	1a9b      	subs	r3, r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	440b      	add	r3, r1
 8002d0c:	3334      	adds	r3, #52	@ 0x34
 8002d0e:	2200      	movs	r2, #0
 8002d10:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<NUMBER_OF_CANS; i++)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	3301      	adds	r3, #1
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	dde4      	ble.n	8002ce8 <HAL_CAN_TxMailbox0CompleteCallback+0x14>
		}
	}}
 8002d1e:	bf00      	nop
 8002d20:	bf00      	nop
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	20000bf4 	.word	0x20000bf4

08002d2c <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan) {
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
	CAN_TxCompleteCallback(hcan);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f7ff fee7 	bl	8002b08 <CAN_TxCompleteCallback>
	for(int i=0; i<NUMBER_OF_CANS; i++)
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	e017      	b.n	8002d70 <HAL_CAN_TxMailbox0AbortCallback+0x44>
	{
		if(hcan == cans[i].hcan){
 8002d40:	490f      	ldr	r1, [pc, #60]	@ (8002d80 <HAL_CAN_TxMailbox0AbortCallback+0x54>)
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	4613      	mov	r3, r2
 8002d46:	011b      	lsls	r3, r3, #4
 8002d48:	1a9b      	subs	r3, r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d109      	bne.n	8002d6a <HAL_CAN_TxMailbox0AbortCallback+0x3e>
			cans[i].retransmision_counter = 0;
 8002d56:	490a      	ldr	r1, [pc, #40]	@ (8002d80 <HAL_CAN_TxMailbox0AbortCallback+0x54>)
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	011b      	lsls	r3, r3, #4
 8002d5e:	1a9b      	subs	r3, r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	440b      	add	r3, r1
 8002d64:	3334      	adds	r3, #52	@ 0x34
 8002d66:	2200      	movs	r2, #0
 8002d68:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<NUMBER_OF_CANS; i++)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	60fb      	str	r3, [r7, #12]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	dde4      	ble.n	8002d40 <HAL_CAN_TxMailbox0AbortCallback+0x14>
		}
	}
}
 8002d76:	bf00      	nop
 8002d78:	bf00      	nop
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	20000bf4 	.word	0x20000bf4

08002d84 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b08e      	sub	sp, #56	@ 0x38
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]

	can_msg msg;
	CAN_RxHeaderTypeDef RxHeader;
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, msg.data);
 8002d8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d90:	330c      	adds	r3, #12
 8002d92:	f107 0208 	add.w	r2, r7, #8
 8002d96:	2100      	movs	r1, #0
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 fb0e 	bl	80033ba <HAL_CAN_GetRxMessage>
	msg.dlc = RxHeader.DLC;
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	msg.id = RxHeader.StdId;
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	62bb      	str	r3, [r7, #40]	@ 0x28
	CAN_ReceiveCallback(hcan, &msg);
 8002da6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002daa:	4619      	mov	r1, r3
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f7ff fe4b 	bl	8002a48 <CAN_ReceiveCallback>
}
 8002db2:	bf00      	nop
 8002db4:	3738      	adds	r7, #56	@ 0x38
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_CAN_RxFifo0FullCallback>:

void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan){
 8002dba:	b480      	push	{r7}
 8002dbc:	b083      	sub	sp, #12
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]

}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
	...

08002dd0 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan){
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]

	uint32_t errorcode;
	errorcode = HAL_CAN_GetError(hcan);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 fe3d 	bl	8003a58 <HAL_CAN_GetError>
 8002dde:	60b8      	str	r0, [r7, #8]
	for(int i=0; i<NUMBER_OF_CANS; i++)
 8002de0:	2300      	movs	r3, #0
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	e04a      	b.n	8002e7c <HAL_CAN_ErrorCallback+0xac>
	{
		if(hcan == cans[i].hcan){
 8002de6:	492a      	ldr	r1, [pc, #168]	@ (8002e90 <HAL_CAN_ErrorCallback+0xc0>)
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	4613      	mov	r3, r2
 8002dec:	011b      	lsls	r3, r3, #4
 8002dee:	1a9b      	subs	r3, r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	440b      	add	r3, r1
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d13c      	bne.n	8002e76 <HAL_CAN_ErrorCallback+0xa6>
			/* arbitration lost, retransmit */
			if (errorcode & HAL_CAN_ERROR_TX_ALST0) {
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d037      	beq.n	8002e76 <HAL_CAN_ErrorCallback+0xa6>
				if (cans[i].retransmision_counter < CAN_ARB_LOST_RETR) {
 8002e06:	4922      	ldr	r1, [pc, #136]	@ (8002e90 <HAL_CAN_ErrorCallback+0xc0>)
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	1a9b      	subs	r3, r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	440b      	add	r3, r1
 8002e14:	3334      	adds	r3, #52	@ 0x34
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2b27      	cmp	r3, #39	@ 0x27
 8002e1a:	d82c      	bhi.n	8002e76 <HAL_CAN_ErrorCallback+0xa6>
					SET_BIT(cans[i].hcan->Instance->sTxMailBox[0].TIR, CAN_TI0R_TXRQ);
 8002e1c:	491c      	ldr	r1, [pc, #112]	@ (8002e90 <HAL_CAN_ErrorCallback+0xc0>)
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	4613      	mov	r3, r2
 8002e22:	011b      	lsls	r3, r3, #4
 8002e24:	1a9b      	subs	r3, r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	440b      	add	r3, r1
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f8d3 1180 	ldr.w	r1, [r3, #384]	@ 0x180
 8002e32:	4817      	ldr	r0, [pc, #92]	@ (8002e90 <HAL_CAN_ErrorCallback+0xc0>)
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	4613      	mov	r3, r2
 8002e38:	011b      	lsls	r3, r3, #4
 8002e3a:	1a9b      	subs	r3, r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4403      	add	r3, r0
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f041 0201 	orr.w	r2, r1, #1
 8002e48:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
					cans[i].retransmision_counter++;
 8002e4c:	4910      	ldr	r1, [pc, #64]	@ (8002e90 <HAL_CAN_ErrorCallback+0xc0>)
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	4613      	mov	r3, r2
 8002e52:	011b      	lsls	r3, r3, #4
 8002e54:	1a9b      	subs	r3, r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	440b      	add	r3, r1
 8002e5a:	3334      	adds	r3, #52	@ 0x34
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	b2d8      	uxtb	r0, r3
 8002e62:	490b      	ldr	r1, [pc, #44]	@ (8002e90 <HAL_CAN_ErrorCallback+0xc0>)
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	4613      	mov	r3, r2
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	1a9b      	subs	r3, r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	440b      	add	r3, r1
 8002e70:	3334      	adds	r3, #52	@ 0x34
 8002e72:	4602      	mov	r2, r0
 8002e74:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<NUMBER_OF_CANS; i++)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	ddb1      	ble.n	8002de6 <HAL_CAN_ErrorCallback+0x16>
				}
			}
		}
	}

	HAL_CAN_ResetError(hcan);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 fdf4 	bl	8003a70 <HAL_CAN_ResetError>
}
 8002e88:	bf00      	nop
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	20000bf4 	.word	0x20000bf4

08002e94 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e98:	4b08      	ldr	r3, [pc, #32]	@ (8002ebc <HAL_Init+0x28>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a07      	ldr	r2, [pc, #28]	@ (8002ebc <HAL_Init+0x28>)
 8002e9e:	f043 0310 	orr.w	r3, r3, #16
 8002ea2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ea4:	2003      	movs	r0, #3
 8002ea6:	f000 fed7 	bl	8003c58 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002eaa:	200f      	movs	r0, #15
 8002eac:	f000 f808 	bl	8002ec0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002eb0:	f7ff fb9a 	bl	80025e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40022000 	.word	0x40022000

08002ec0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ec8:	4b12      	ldr	r3, [pc, #72]	@ (8002f14 <HAL_InitTick+0x54>)
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	4b12      	ldr	r3, [pc, #72]	@ (8002f18 <HAL_InitTick+0x58>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ed6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 feef 	bl	8003cc2 <HAL_SYSTICK_Config>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e00e      	b.n	8002f0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b0f      	cmp	r3, #15
 8002ef2:	d80a      	bhi.n	8002f0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8002efc:	f000 feb7 	bl	8003c6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f00:	4a06      	ldr	r2, [pc, #24]	@ (8002f1c <HAL_InitTick+0x5c>)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
 8002f08:	e000      	b.n	8002f0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	20000000 	.word	0x20000000
 8002f18:	20000008 	.word	0x20000008
 8002f1c:	20000004 	.word	0x20000004

08002f20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f24:	4b06      	ldr	r3, [pc, #24]	@ (8002f40 <HAL_IncTick+0x20>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	461a      	mov	r2, r3
 8002f2a:	4b06      	ldr	r3, [pc, #24]	@ (8002f44 <HAL_IncTick+0x24>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4413      	add	r3, r2
 8002f30:	4a04      	ldr	r2, [pc, #16]	@ (8002f44 <HAL_IncTick+0x24>)
 8002f32:	6013      	str	r3, [r2, #0]
}
 8002f34:	bf00      	nop
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	20000008 	.word	0x20000008
 8002f44:	20000cd0 	.word	0x20000cd0

08002f48 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  return uwTick;  
 8002f4c:	4b03      	ldr	r3, [pc, #12]	@ (8002f5c <HAL_GetTick+0x14>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	20000cd0 	.word	0x20000cd0

08002f60 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f68:	f7ff ffee 	bl	8002f48 <HAL_GetTick>
 8002f6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f78:	d005      	beq.n	8002f86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002fa4 <HAL_Delay+0x44>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4413      	add	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002f86:	bf00      	nop
 8002f88:	f7ff ffde 	bl	8002f48 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d8f7      	bhi.n	8002f88 <HAL_Delay+0x28>
  {
  }
}
 8002f98:	bf00      	nop
 8002f9a:	bf00      	nop
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	20000008 	.word	0x20000008

08002fa8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e0ed      	b.n	8003196 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d102      	bne.n	8002fcc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7ff f93c 	bl	8002244 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0201 	orr.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fdc:	f7ff ffb4 	bl	8002f48 <HAL_GetTick>
 8002fe0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002fe2:	e012      	b.n	800300a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002fe4:	f7ff ffb0 	bl	8002f48 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b0a      	cmp	r3, #10
 8002ff0:	d90b      	bls.n	800300a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2205      	movs	r2, #5
 8003002:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e0c5      	b.n	8003196 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0e5      	beq.n	8002fe4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0202 	bic.w	r2, r2, #2
 8003026:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003028:	f7ff ff8e 	bl	8002f48 <HAL_GetTick>
 800302c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800302e:	e012      	b.n	8003056 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003030:	f7ff ff8a 	bl	8002f48 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b0a      	cmp	r3, #10
 800303c:	d90b      	bls.n	8003056 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003042:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2205      	movs	r2, #5
 800304e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e09f      	b.n	8003196 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1e5      	bne.n	8003030 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	7e1b      	ldrb	r3, [r3, #24]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d108      	bne.n	800307e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	e007      	b.n	800308e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800308c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	7e5b      	ldrb	r3, [r3, #25]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d108      	bne.n	80030a8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	e007      	b.n	80030b8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	7e9b      	ldrb	r3, [r3, #26]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d108      	bne.n	80030d2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0220 	orr.w	r2, r2, #32
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	e007      	b.n	80030e2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 0220 	bic.w	r2, r2, #32
 80030e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	7edb      	ldrb	r3, [r3, #27]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d108      	bne.n	80030fc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 0210 	bic.w	r2, r2, #16
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	e007      	b.n	800310c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0210 	orr.w	r2, r2, #16
 800310a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	7f1b      	ldrb	r3, [r3, #28]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d108      	bne.n	8003126 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0208 	orr.w	r2, r2, #8
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	e007      	b.n	8003136 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 0208 	bic.w	r2, r2, #8
 8003134:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	7f5b      	ldrb	r3, [r3, #29]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d108      	bne.n	8003150 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f042 0204 	orr.w	r2, r2, #4
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	e007      	b.n	8003160 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f022 0204 	bic.w	r2, r2, #4
 800315e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	431a      	orrs	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	ea42 0103 	orr.w	r1, r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	1e5a      	subs	r2, r3, #1
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800319e:	b480      	push	{r7}
 80031a0:	b087      	sub	sp, #28
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
 80031a6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031b4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80031b6:	7cfb      	ldrb	r3, [r7, #19]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d003      	beq.n	80031c4 <HAL_CAN_ConfigFilter+0x26>
 80031bc:	7cfb      	ldrb	r3, [r7, #19]
 80031be:	2b02      	cmp	r3, #2
 80031c0:	f040 80aa 	bne.w	8003318 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80031ca:	f043 0201 	orr.w	r2, r3, #1
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	f003 031f 	and.w	r3, r3, #31
 80031dc:	2201      	movs	r2, #1
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	43db      	mvns	r3, r3
 80031ee:	401a      	ands	r2, r3
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d123      	bne.n	8003246 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	43db      	mvns	r3, r3
 8003208:	401a      	ands	r2, r3
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003220:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	3248      	adds	r2, #72	@ 0x48
 8003226:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800323a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800323c:	6979      	ldr	r1, [r7, #20]
 800323e:	3348      	adds	r3, #72	@ 0x48
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	440b      	add	r3, r1
 8003244:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d122      	bne.n	8003294 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	431a      	orrs	r2, r3
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800326e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	3248      	adds	r2, #72	@ 0x48
 8003274:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003288:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800328a:	6979      	ldr	r1, [r7, #20]
 800328c:	3348      	adds	r3, #72	@ 0x48
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	440b      	add	r3, r1
 8003292:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d109      	bne.n	80032b0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	43db      	mvns	r3, r3
 80032a6:	401a      	ands	r2, r3
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80032ae:	e007      	b.n	80032c0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	431a      	orrs	r2, r3
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d109      	bne.n	80032dc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	43db      	mvns	r3, r3
 80032d2:	401a      	ands	r2, r3
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80032da:	e007      	b.n	80032ec <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	431a      	orrs	r2, r3
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d107      	bne.n	8003304 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	431a      	orrs	r2, r3
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800330a:	f023 0201 	bic.w	r2, r3, #1
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8003314:	2300      	movs	r3, #0
 8003316:	e006      	b.n	8003326 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
  }
}
 8003326:	4618      	mov	r0, r3
 8003328:	371c      	adds	r7, #28
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b084      	sub	sp, #16
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b01      	cmp	r3, #1
 8003344:	d12e      	bne.n	80033a4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2202      	movs	r2, #2
 800334a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 0201 	bic.w	r2, r2, #1
 800335c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800335e:	f7ff fdf3 	bl	8002f48 <HAL_GetTick>
 8003362:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003364:	e012      	b.n	800338c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003366:	f7ff fdef 	bl	8002f48 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b0a      	cmp	r3, #10
 8003372:	d90b      	bls.n	800338c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003378:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2205      	movs	r2, #5
 8003384:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e012      	b.n	80033b2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1e5      	bne.n	8003366 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80033a0:	2300      	movs	r3, #0
 80033a2:	e006      	b.n	80033b2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
  }
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80033ba:	b480      	push	{r7}
 80033bc:	b087      	sub	sp, #28
 80033be:	af00      	add	r7, sp, #0
 80033c0:	60f8      	str	r0, [r7, #12]
 80033c2:	60b9      	str	r1, [r7, #8]
 80033c4:	607a      	str	r2, [r7, #4]
 80033c6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033ce:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80033d0:	7dfb      	ldrb	r3, [r7, #23]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d003      	beq.n	80033de <HAL_CAN_GetRxMessage+0x24>
 80033d6:	7dfb      	ldrb	r3, [r7, #23]
 80033d8:	2b02      	cmp	r3, #2
 80033da:	f040 8103 	bne.w	80035e4 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10e      	bne.n	8003402 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d116      	bne.n	8003420 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e0f7      	b.n	80035f2 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	f003 0303 	and.w	r3, r3, #3
 800340c:	2b00      	cmp	r3, #0
 800340e:	d107      	bne.n	8003420 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003414:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e0e8      	b.n	80035f2 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	331b      	adds	r3, #27
 8003428:	011b      	lsls	r3, r3, #4
 800342a:	4413      	add	r3, r2
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0204 	and.w	r2, r3, #4
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10c      	bne.n	8003458 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	331b      	adds	r3, #27
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	4413      	add	r3, r2
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	0d5b      	lsrs	r3, r3, #21
 800344e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	601a      	str	r2, [r3, #0]
 8003456:	e00b      	b.n	8003470 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	331b      	adds	r3, #27
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	4413      	add	r3, r2
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	08db      	lsrs	r3, r3, #3
 8003468:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	331b      	adds	r3, #27
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	4413      	add	r3, r2
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0202 	and.w	r2, r3, #2
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	331b      	adds	r3, #27
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	4413      	add	r3, r2
 8003492:	3304      	adds	r3, #4
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0308 	and.w	r3, r3, #8
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2208      	movs	r2, #8
 80034a2:	611a      	str	r2, [r3, #16]
 80034a4:	e00b      	b.n	80034be <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	331b      	adds	r3, #27
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	4413      	add	r3, r2
 80034b2:	3304      	adds	r3, #4
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 020f 	and.w	r2, r3, #15
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	331b      	adds	r3, #27
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	4413      	add	r3, r2
 80034ca:	3304      	adds	r3, #4
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	0a1b      	lsrs	r3, r3, #8
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	331b      	adds	r3, #27
 80034de:	011b      	lsls	r3, r3, #4
 80034e0:	4413      	add	r3, r2
 80034e2:	3304      	adds	r3, #4
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	0c1b      	lsrs	r3, r3, #16
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	4413      	add	r3, r2
 80034f8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	b2da      	uxtb	r2, r3
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	4413      	add	r3, r2
 800350e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	0a1a      	lsrs	r2, r3, #8
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	3301      	adds	r3, #1
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	011b      	lsls	r3, r3, #4
 8003526:	4413      	add	r3, r2
 8003528:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	0c1a      	lsrs	r2, r3, #16
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	3302      	adds	r3, #2
 8003534:	b2d2      	uxtb	r2, r2
 8003536:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	4413      	add	r3, r2
 8003542:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	0e1a      	lsrs	r2, r3, #24
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	3303      	adds	r3, #3
 800354e:	b2d2      	uxtb	r2, r2
 8003550:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	4413      	add	r3, r2
 800355c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	3304      	adds	r3, #4
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	4413      	add	r3, r2
 8003574:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	0a1a      	lsrs	r2, r3, #8
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	3305      	adds	r3, #5
 8003580:	b2d2      	uxtb	r2, r2
 8003582:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	011b      	lsls	r3, r3, #4
 800358c:	4413      	add	r3, r2
 800358e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	0c1a      	lsrs	r2, r3, #16
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	3306      	adds	r3, #6
 800359a:	b2d2      	uxtb	r2, r2
 800359c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	4413      	add	r3, r2
 80035a8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	0e1a      	lsrs	r2, r3, #24
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	3307      	adds	r3, #7
 80035b4:	b2d2      	uxtb	r2, r2
 80035b6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d108      	bne.n	80035d0 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68da      	ldr	r2, [r3, #12]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f042 0220 	orr.w	r2, r2, #32
 80035cc:	60da      	str	r2, [r3, #12]
 80035ce:	e007      	b.n	80035e0 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	691a      	ldr	r2, [r3, #16]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0220 	orr.w	r2, r2, #32
 80035de:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	e006      	b.n	80035f2 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
  }
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	371c      	adds	r7, #28
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr

080035fe <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80035fe:	b480      	push	{r7}
 8003600:	b085      	sub	sp, #20
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
 8003606:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800360e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003610:	7bfb      	ldrb	r3, [r7, #15]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d002      	beq.n	800361c <HAL_CAN_ActivateNotification+0x1e>
 8003616:	7bfb      	ldrb	r3, [r7, #15]
 8003618:	2b02      	cmp	r3, #2
 800361a:	d109      	bne.n	8003630 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6959      	ldr	r1, [r3, #20]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800362c:	2300      	movs	r3, #0
 800362e:	e006      	b.n	800363e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003634:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
  }
}
 800363e:	4618      	mov	r0, r3
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b08a      	sub	sp, #40	@ 0x28
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003652:	2300      	movs	r3, #0
 8003654:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b00      	cmp	r3, #0
 800368e:	d07c      	beq.n	800378a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d023      	beq.n	80036e2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2201      	movs	r2, #1
 80036a0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d003      	beq.n	80036b4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7ff fb11 	bl	8002cd4 <HAL_CAN_TxMailbox0CompleteCallback>
 80036b2:	e016      	b.n	80036e2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	f003 0304 	and.w	r3, r3, #4
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d004      	beq.n	80036c8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80036be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80036c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80036c6:	e00c      	b.n	80036e2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d004      	beq.n	80036dc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80036d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80036d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80036da:	e002      	b.n	80036e2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f7ff fb25 	bl	8002d2c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d024      	beq.n	8003736 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80036f4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d003      	beq.n	8003708 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f959 	bl	80039b8 <HAL_CAN_TxMailbox1CompleteCallback>
 8003706:	e016      	b.n	8003736 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800370e:	2b00      	cmp	r3, #0
 8003710:	d004      	beq.n	800371c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003714:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003718:	627b      	str	r3, [r7, #36]	@ 0x24
 800371a:	e00c      	b.n	8003736 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003722:	2b00      	cmp	r3, #0
 8003724:	d004      	beq.n	8003730 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003728:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800372c:	627b      	str	r3, [r7, #36]	@ 0x24
 800372e:	e002      	b.n	8003736 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f955 	bl	80039e0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d024      	beq.n	800378a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003748:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d003      	beq.n	800375c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f939 	bl	80039cc <HAL_CAN_TxMailbox2CompleteCallback>
 800375a:	e016      	b.n	800378a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d004      	beq.n	8003770 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003768:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800376c:	627b      	str	r3, [r7, #36]	@ 0x24
 800376e:	e00c      	b.n	800378a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d004      	beq.n	8003784 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800377a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003780:	627b      	str	r3, [r7, #36]	@ 0x24
 8003782:	e002      	b.n	800378a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 f935 	bl	80039f4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800378a:	6a3b      	ldr	r3, [r7, #32]
 800378c:	f003 0308 	and.w	r3, r3, #8
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00c      	beq.n	80037ae <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f003 0310 	and.w	r3, r3, #16
 800379a:	2b00      	cmp	r3, #0
 800379c:	d007      	beq.n	80037ae <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800379e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037a4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2210      	movs	r2, #16
 80037ac:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00b      	beq.n	80037d0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d006      	beq.n	80037d0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2208      	movs	r2, #8
 80037c8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7ff faf5 	bl	8002dba <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d009      	beq.n	80037ee <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f003 0303 	and.w	r3, r3, #3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d002      	beq.n	80037ee <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7ff facb 	bl	8002d84 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00c      	beq.n	8003812 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	f003 0310 	and.w	r3, r3, #16
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d007      	beq.n	8003812 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003804:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003808:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2210      	movs	r2, #16
 8003810:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003812:	6a3b      	ldr	r3, [r7, #32]
 8003814:	f003 0320 	and.w	r3, r3, #32
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00b      	beq.n	8003834 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	f003 0308 	and.w	r3, r3, #8
 8003822:	2b00      	cmp	r3, #0
 8003824:	d006      	beq.n	8003834 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2208      	movs	r2, #8
 800382c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f8f4 	bl	8003a1c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003834:	6a3b      	ldr	r3, [r7, #32]
 8003836:	f003 0310 	and.w	r3, r3, #16
 800383a:	2b00      	cmp	r3, #0
 800383c:	d009      	beq.n	8003852 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	f003 0303 	and.w	r3, r3, #3
 8003848:	2b00      	cmp	r3, #0
 800384a:	d002      	beq.n	8003852 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 f8db 	bl	8003a08 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003852:	6a3b      	ldr	r3, [r7, #32]
 8003854:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00b      	beq.n	8003874 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	f003 0310 	and.w	r3, r3, #16
 8003862:	2b00      	cmp	r3, #0
 8003864:	d006      	beq.n	8003874 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2210      	movs	r2, #16
 800386c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f8de 	bl	8003a30 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00b      	beq.n	8003896 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	f003 0308 	and.w	r3, r3, #8
 8003884:	2b00      	cmp	r3, #0
 8003886:	d006      	beq.n	8003896 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2208      	movs	r2, #8
 800388e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 f8d7 	bl	8003a44 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003896:	6a3b      	ldr	r3, [r7, #32]
 8003898:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d07b      	beq.n	8003998 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	f003 0304 	and.w	r3, r3, #4
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d072      	beq.n	8003990 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d008      	beq.n	80038c6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80038be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c0:	f043 0301 	orr.w	r3, r3, #1
 80038c4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d008      	beq.n	80038e2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80038da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038dc:	f043 0302 	orr.w	r3, r3, #2
 80038e0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80038e2:	6a3b      	ldr	r3, [r7, #32]
 80038e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d008      	beq.n	80038fe <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80038f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f8:	f043 0304 	orr.w	r3, r3, #4
 80038fc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003904:	2b00      	cmp	r3, #0
 8003906:	d043      	beq.n	8003990 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800390e:	2b00      	cmp	r3, #0
 8003910:	d03e      	beq.n	8003990 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003918:	2b60      	cmp	r3, #96	@ 0x60
 800391a:	d02b      	beq.n	8003974 <HAL_CAN_IRQHandler+0x32a>
 800391c:	2b60      	cmp	r3, #96	@ 0x60
 800391e:	d82e      	bhi.n	800397e <HAL_CAN_IRQHandler+0x334>
 8003920:	2b50      	cmp	r3, #80	@ 0x50
 8003922:	d022      	beq.n	800396a <HAL_CAN_IRQHandler+0x320>
 8003924:	2b50      	cmp	r3, #80	@ 0x50
 8003926:	d82a      	bhi.n	800397e <HAL_CAN_IRQHandler+0x334>
 8003928:	2b40      	cmp	r3, #64	@ 0x40
 800392a:	d019      	beq.n	8003960 <HAL_CAN_IRQHandler+0x316>
 800392c:	2b40      	cmp	r3, #64	@ 0x40
 800392e:	d826      	bhi.n	800397e <HAL_CAN_IRQHandler+0x334>
 8003930:	2b30      	cmp	r3, #48	@ 0x30
 8003932:	d010      	beq.n	8003956 <HAL_CAN_IRQHandler+0x30c>
 8003934:	2b30      	cmp	r3, #48	@ 0x30
 8003936:	d822      	bhi.n	800397e <HAL_CAN_IRQHandler+0x334>
 8003938:	2b10      	cmp	r3, #16
 800393a:	d002      	beq.n	8003942 <HAL_CAN_IRQHandler+0x2f8>
 800393c:	2b20      	cmp	r3, #32
 800393e:	d005      	beq.n	800394c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003940:	e01d      	b.n	800397e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003944:	f043 0308 	orr.w	r3, r3, #8
 8003948:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800394a:	e019      	b.n	8003980 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800394c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394e:	f043 0310 	orr.w	r3, r3, #16
 8003952:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003954:	e014      	b.n	8003980 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003958:	f043 0320 	orr.w	r3, r3, #32
 800395c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800395e:	e00f      	b.n	8003980 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003962:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003966:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003968:	e00a      	b.n	8003980 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800396a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003970:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003972:	e005      	b.n	8003980 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003976:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800397a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800397c:	e000      	b.n	8003980 <HAL_CAN_IRQHandler+0x336>
            break;
 800397e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	699a      	ldr	r2, [r3, #24]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800398e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2204      	movs	r2, #4
 8003996:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399a:	2b00      	cmp	r3, #0
 800399c:	d008      	beq.n	80039b0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80039a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a4:	431a      	orrs	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7ff fa10 	bl	8002dd0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80039b0:	bf00      	nop
 80039b2:	3728      	adds	r7, #40	@ 0x28
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a82:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 8003a84:	7bbb      	ldrb	r3, [r7, #14]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d002      	beq.n	8003a90 <HAL_CAN_ResetError+0x20>
 8003a8a:	7bbb      	ldrb	r3, [r7, #14]
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d103      	bne.n	8003a98 <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	625a      	str	r2, [r3, #36]	@ 0x24
 8003a96:	e007      	b.n	8003aa8 <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	625a      	str	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3714      	adds	r7, #20
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
	...

08003ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f003 0307 	and.w	r3, r3, #7
 8003ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8003afc <__NVIC_SetPriorityGrouping+0x44>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ae0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ae4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003aea:	4a04      	ldr	r2, [pc, #16]	@ (8003afc <__NVIC_SetPriorityGrouping+0x44>)
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	60d3      	str	r3, [r2, #12]
}
 8003af0:	bf00      	nop
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	e000ed00 	.word	0xe000ed00

08003b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b04:	4b04      	ldr	r3, [pc, #16]	@ (8003b18 <__NVIC_GetPriorityGrouping+0x18>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	0a1b      	lsrs	r3, r3, #8
 8003b0a:	f003 0307 	and.w	r3, r3, #7
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	e000ed00 	.word	0xe000ed00

08003b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	4603      	mov	r3, r0
 8003b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	db0b      	blt.n	8003b46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b2e:	79fb      	ldrb	r3, [r7, #7]
 8003b30:	f003 021f 	and.w	r2, r3, #31
 8003b34:	4907      	ldr	r1, [pc, #28]	@ (8003b54 <__NVIC_EnableIRQ+0x38>)
 8003b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3a:	095b      	lsrs	r3, r3, #5
 8003b3c:	2001      	movs	r0, #1
 8003b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b46:	bf00      	nop
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	e000e100 	.word	0xe000e100

08003b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	4603      	mov	r3, r0
 8003b60:	6039      	str	r1, [r7, #0]
 8003b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	db0a      	blt.n	8003b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	490c      	ldr	r1, [pc, #48]	@ (8003ba4 <__NVIC_SetPriority+0x4c>)
 8003b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b76:	0112      	lsls	r2, r2, #4
 8003b78:	b2d2      	uxtb	r2, r2
 8003b7a:	440b      	add	r3, r1
 8003b7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b80:	e00a      	b.n	8003b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	4908      	ldr	r1, [pc, #32]	@ (8003ba8 <__NVIC_SetPriority+0x50>)
 8003b88:	79fb      	ldrb	r3, [r7, #7]
 8003b8a:	f003 030f 	and.w	r3, r3, #15
 8003b8e:	3b04      	subs	r3, #4
 8003b90:	0112      	lsls	r2, r2, #4
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	440b      	add	r3, r1
 8003b96:	761a      	strb	r2, [r3, #24]
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	e000e100 	.word	0xe000e100
 8003ba8:	e000ed00 	.word	0xe000ed00

08003bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b089      	sub	sp, #36	@ 0x24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f003 0307 	and.w	r3, r3, #7
 8003bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	f1c3 0307 	rsb	r3, r3, #7
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	bf28      	it	cs
 8003bca:	2304      	movcs	r3, #4
 8003bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	3304      	adds	r3, #4
 8003bd2:	2b06      	cmp	r3, #6
 8003bd4:	d902      	bls.n	8003bdc <NVIC_EncodePriority+0x30>
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	3b03      	subs	r3, #3
 8003bda:	e000      	b.n	8003bde <NVIC_EncodePriority+0x32>
 8003bdc:	2300      	movs	r3, #0
 8003bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003be0:	f04f 32ff 	mov.w	r2, #4294967295
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bea:	43da      	mvns	r2, r3
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	401a      	ands	r2, r3
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfe:	43d9      	mvns	r1, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c04:	4313      	orrs	r3, r2
         );
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3724      	adds	r7, #36	@ 0x24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
	...

08003c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c24:	d301      	bcc.n	8003c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c26:	2301      	movs	r3, #1
 8003c28:	e00f      	b.n	8003c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8003c54 <SysTick_Config+0x40>)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c32:	210f      	movs	r1, #15
 8003c34:	f04f 30ff 	mov.w	r0, #4294967295
 8003c38:	f7ff ff8e 	bl	8003b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c3c:	4b05      	ldr	r3, [pc, #20]	@ (8003c54 <SysTick_Config+0x40>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c42:	4b04      	ldr	r3, [pc, #16]	@ (8003c54 <SysTick_Config+0x40>)
 8003c44:	2207      	movs	r2, #7
 8003c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	e000e010 	.word	0xe000e010

08003c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f7ff ff29 	bl	8003ab8 <__NVIC_SetPriorityGrouping>
}
 8003c66:	bf00      	nop
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b086      	sub	sp, #24
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	4603      	mov	r3, r0
 8003c76:	60b9      	str	r1, [r7, #8]
 8003c78:	607a      	str	r2, [r7, #4]
 8003c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c80:	f7ff ff3e 	bl	8003b00 <__NVIC_GetPriorityGrouping>
 8003c84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	68b9      	ldr	r1, [r7, #8]
 8003c8a:	6978      	ldr	r0, [r7, #20]
 8003c8c:	f7ff ff8e 	bl	8003bac <NVIC_EncodePriority>
 8003c90:	4602      	mov	r2, r0
 8003c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c96:	4611      	mov	r1, r2
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7ff ff5d 	bl	8003b58 <__NVIC_SetPriority>
}
 8003c9e:	bf00      	nop
 8003ca0:	3718      	adds	r7, #24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b082      	sub	sp, #8
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	4603      	mov	r3, r0
 8003cae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7ff ff31 	bl	8003b1c <__NVIC_EnableIRQ>
}
 8003cba:	bf00      	nop
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b082      	sub	sp, #8
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f7ff ffa2 	bl	8003c14 <SysTick_Config>
 8003cd0:	4603      	mov	r3, r0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b084      	sub	sp, #16
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d005      	beq.n	8003cfc <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2204      	movs	r2, #4
 8003cf4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	73fb      	strb	r3, [r7, #15]
 8003cfa:	e027      	b.n	8003d4c <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 020e 	bic.w	r2, r2, #14
 8003d0a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0201 	bic.w	r2, r2, #1
 8003d1a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d24:	2101      	movs	r1, #1
 8003d26:	fa01 f202 	lsl.w	r2, r1, r2
 8003d2a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d003      	beq.n	8003d4c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	4798      	blx	r3
    } 
  }
  return status;
 8003d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003d56:	b480      	push	{r7}
 8003d58:	b083      	sub	sp, #12
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8003d82:	2300      	movs	r3, #0
 8003d84:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 8003d86:	2300      	movs	r3, #0
 8003d88:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003d8a:	4b2f      	ldr	r3, [pc, #188]	@ (8003e48 <HAL_FLASH_Program+0xd8>)
 8003d8c:	7e1b      	ldrb	r3, [r3, #24]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d101      	bne.n	8003d96 <HAL_FLASH_Program+0x26>
 8003d92:	2302      	movs	r3, #2
 8003d94:	e054      	b.n	8003e40 <HAL_FLASH_Program+0xd0>
 8003d96:	4b2c      	ldr	r3, [pc, #176]	@ (8003e48 <HAL_FLASH_Program+0xd8>)
 8003d98:	2201      	movs	r2, #1
 8003d9a:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003d9c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003da0:	f000 f8b4 	bl	8003f0c <FLASH_WaitForLastOperation>
 8003da4:	4603      	mov	r3, r0
 8003da6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003da8:	7dfb      	ldrb	r3, [r7, #23]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d144      	bne.n	8003e38 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d102      	bne.n	8003dba <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003db4:	2301      	movs	r3, #1
 8003db6:	757b      	strb	r3, [r7, #21]
 8003db8:	e007      	b.n	8003dca <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d102      	bne.n	8003dc6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	757b      	strb	r3, [r7, #21]
 8003dc4:	e001      	b.n	8003dca <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003dc6:	2304      	movs	r3, #4
 8003dc8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003dca:	2300      	movs	r3, #0
 8003dcc:	75bb      	strb	r3, [r7, #22]
 8003dce:	e02d      	b.n	8003e2c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003dd0:	7dbb      	ldrb	r3, [r7, #22]
 8003dd2:	005a      	lsls	r2, r3, #1
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	eb02 0c03 	add.w	ip, r2, r3
 8003dda:	7dbb      	ldrb	r3, [r7, #22]
 8003ddc:	0119      	lsls	r1, r3, #4
 8003dde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003de2:	f1c1 0620 	rsb	r6, r1, #32
 8003de6:	f1a1 0020 	sub.w	r0, r1, #32
 8003dea:	fa22 f401 	lsr.w	r4, r2, r1
 8003dee:	fa03 f606 	lsl.w	r6, r3, r6
 8003df2:	4334      	orrs	r4, r6
 8003df4:	fa23 f000 	lsr.w	r0, r3, r0
 8003df8:	4304      	orrs	r4, r0
 8003dfa:	fa23 f501 	lsr.w	r5, r3, r1
 8003dfe:	b2a3      	uxth	r3, r4
 8003e00:	4619      	mov	r1, r3
 8003e02:	4660      	mov	r0, ip
 8003e04:	f000 f866 	bl	8003ed4 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003e08:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003e0c:	f000 f87e 	bl	8003f0c <FLASH_WaitForLastOperation>
 8003e10:	4603      	mov	r3, r0
 8003e12:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003e14:	4b0d      	ldr	r3, [pc, #52]	@ (8003e4c <HAL_FLASH_Program+0xdc>)
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	4a0c      	ldr	r2, [pc, #48]	@ (8003e4c <HAL_FLASH_Program+0xdc>)
 8003e1a:	f023 0301 	bic.w	r3, r3, #1
 8003e1e:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8003e20:	7dfb      	ldrb	r3, [r7, #23]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d107      	bne.n	8003e36 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003e26:	7dbb      	ldrb	r3, [r7, #22]
 8003e28:	3301      	adds	r3, #1
 8003e2a:	75bb      	strb	r3, [r7, #22]
 8003e2c:	7dba      	ldrb	r2, [r7, #22]
 8003e2e:	7d7b      	ldrb	r3, [r7, #21]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d3cd      	bcc.n	8003dd0 <HAL_FLASH_Program+0x60>
 8003e34:	e000      	b.n	8003e38 <HAL_FLASH_Program+0xc8>
      {
        break;
 8003e36:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003e38:	4b03      	ldr	r3, [pc, #12]	@ (8003e48 <HAL_FLASH_Program+0xd8>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	761a      	strb	r2, [r3, #24]

  return status;
 8003e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	371c      	adds	r7, #28
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e48:	20000cd8 	.word	0x20000cd8
 8003e4c:	40022000 	.word	0x40022000

08003e50 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003e56:	2300      	movs	r3, #0
 8003e58:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e90 <HAL_FLASH_Unlock+0x40>)
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00d      	beq.n	8003e82 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003e66:	4b0a      	ldr	r3, [pc, #40]	@ (8003e90 <HAL_FLASH_Unlock+0x40>)
 8003e68:	4a0a      	ldr	r2, [pc, #40]	@ (8003e94 <HAL_FLASH_Unlock+0x44>)
 8003e6a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003e6c:	4b08      	ldr	r3, [pc, #32]	@ (8003e90 <HAL_FLASH_Unlock+0x40>)
 8003e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8003e98 <HAL_FLASH_Unlock+0x48>)
 8003e70:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003e72:	4b07      	ldr	r3, [pc, #28]	@ (8003e90 <HAL_FLASH_Unlock+0x40>)
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003e82:	79fb      	ldrb	r3, [r7, #7]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr
 8003e90:	40022000 	.word	0x40022000
 8003e94:	45670123 	.word	0x45670123
 8003e98:	cdef89ab 	.word	0xcdef89ab

08003e9c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003ea0:	4b05      	ldr	r3, [pc, #20]	@ (8003eb8 <HAL_FLASH_Lock+0x1c>)
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	4a04      	ldr	r2, [pc, #16]	@ (8003eb8 <HAL_FLASH_Lock+0x1c>)
 8003ea6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003eaa:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	40022000 	.word	0x40022000

08003ebc <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8003ec0:	4b03      	ldr	r3, [pc, #12]	@ (8003ed0 <HAL_FLASH_GetError+0x14>)
 8003ec2:	69db      	ldr	r3, [r3, #28]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	20000cd8 	.word	0x20000cd8

08003ed4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	460b      	mov	r3, r1
 8003ede:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003ee0:	4b08      	ldr	r3, [pc, #32]	@ (8003f04 <FLASH_Program_HalfWord+0x30>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003ee6:	4b08      	ldr	r3, [pc, #32]	@ (8003f08 <FLASH_Program_HalfWord+0x34>)
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	4a07      	ldr	r2, [pc, #28]	@ (8003f08 <FLASH_Program_HalfWord+0x34>)
 8003eec:	f043 0301 	orr.w	r3, r3, #1
 8003ef0:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	887a      	ldrh	r2, [r7, #2]
 8003ef6:	801a      	strh	r2, [r3, #0]
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	20000cd8 	.word	0x20000cd8
 8003f08:	40022000 	.word	0x40022000

08003f0c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003f14:	f7ff f818 	bl	8002f48 <HAL_GetTick>
 8003f18:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003f1a:	e010      	b.n	8003f3e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f22:	d00c      	beq.n	8003f3e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d007      	beq.n	8003f3a <FLASH_WaitForLastOperation+0x2e>
 8003f2a:	f7ff f80d 	bl	8002f48 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d201      	bcs.n	8003f3e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e01f      	b.n	8003f7e <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003f3e:	4b12      	ldr	r3, [pc, #72]	@ (8003f88 <FLASH_WaitForLastOperation+0x7c>)
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d0e8      	beq.n	8003f1c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003f4a:	4b0f      	ldr	r3, [pc, #60]	@ (8003f88 <FLASH_WaitForLastOperation+0x7c>)
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f003 0320 	and.w	r3, r3, #32
 8003f52:	2b20      	cmp	r3, #32
 8003f54:	d102      	bne.n	8003f5c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003f56:	4b0c      	ldr	r3, [pc, #48]	@ (8003f88 <FLASH_WaitForLastOperation+0x7c>)
 8003f58:	2220      	movs	r2, #32
 8003f5a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f88 <FLASH_WaitForLastOperation+0x7c>)
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f003 0310 	and.w	r3, r3, #16
 8003f64:	2b10      	cmp	r3, #16
 8003f66:	d005      	beq.n	8003f74 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003f68:	4b07      	ldr	r3, [pc, #28]	@ (8003f88 <FLASH_WaitForLastOperation+0x7c>)
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003f70:	2b04      	cmp	r3, #4
 8003f72:	d103      	bne.n	8003f7c <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003f74:	f000 f80a 	bl	8003f8c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e000      	b.n	8003f7e <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	40022000 	.word	0x40022000

08003f8c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003f92:	2300      	movs	r3, #0
 8003f94:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003f96:	4b14      	ldr	r3, [pc, #80]	@ (8003fe8 <FLASH_SetErrorCode+0x5c>)
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	f003 0310 	and.w	r3, r3, #16
 8003f9e:	2b10      	cmp	r3, #16
 8003fa0:	d109      	bne.n	8003fb6 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003fa2:	4b12      	ldr	r3, [pc, #72]	@ (8003fec <FLASH_SetErrorCode+0x60>)
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	f043 0302 	orr.w	r3, r3, #2
 8003faa:	4a10      	ldr	r2, [pc, #64]	@ (8003fec <FLASH_SetErrorCode+0x60>)
 8003fac:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f043 0310 	orr.w	r3, r3, #16
 8003fb4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8003fe8 <FLASH_SetErrorCode+0x5c>)
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	f003 0304 	and.w	r3, r3, #4
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	d109      	bne.n	8003fd6 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8003fec <FLASH_SetErrorCode+0x60>)
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	f043 0301 	orr.w	r3, r3, #1
 8003fca:	4a08      	ldr	r2, [pc, #32]	@ (8003fec <FLASH_SetErrorCode+0x60>)
 8003fcc:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f043 0304 	orr.w	r3, r3, #4
 8003fd4:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003fd6:	4a04      	ldr	r2, [pc, #16]	@ (8003fe8 <FLASH_SetErrorCode+0x5c>)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	60d3      	str	r3, [r2, #12]
}  
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	40022000 	.word	0x40022000
 8003fec:	20000cd8 	.word	0x20000cd8

08003ff0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003ffe:	2300      	movs	r3, #0
 8004000:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004002:	4b2e      	ldr	r3, [pc, #184]	@ (80040bc <HAL_FLASHEx_Erase+0xcc>)
 8004004:	7e1b      	ldrb	r3, [r3, #24]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d101      	bne.n	800400e <HAL_FLASHEx_Erase+0x1e>
 800400a:	2302      	movs	r3, #2
 800400c:	e052      	b.n	80040b4 <HAL_FLASHEx_Erase+0xc4>
 800400e:	4b2b      	ldr	r3, [pc, #172]	@ (80040bc <HAL_FLASHEx_Erase+0xcc>)
 8004010:	2201      	movs	r2, #1
 8004012:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d115      	bne.n	8004048 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800401c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004020:	f7ff ff74 	bl	8003f0c <FLASH_WaitForLastOperation>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d140      	bne.n	80040ac <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 800402a:	f000 f84b 	bl	80040c4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800402e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004032:	f7ff ff6b 	bl	8003f0c <FLASH_WaitForLastOperation>
 8004036:	4603      	mov	r3, r0
 8004038:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800403a:	4b21      	ldr	r3, [pc, #132]	@ (80040c0 <HAL_FLASHEx_Erase+0xd0>)
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	4a20      	ldr	r2, [pc, #128]	@ (80040c0 <HAL_FLASHEx_Erase+0xd0>)
 8004040:	f023 0304 	bic.w	r3, r3, #4
 8004044:	6113      	str	r3, [r2, #16]
 8004046:	e031      	b.n	80040ac <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004048:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800404c:	f7ff ff5e 	bl	8003f0c <FLASH_WaitForLastOperation>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d12a      	bne.n	80040ac <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	f04f 32ff 	mov.w	r2, #4294967295
 800405c:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	60bb      	str	r3, [r7, #8]
 8004064:	e019      	b.n	800409a <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004066:	68b8      	ldr	r0, [r7, #8]
 8004068:	f000 f846 	bl	80040f8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800406c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004070:	f7ff ff4c 	bl	8003f0c <FLASH_WaitForLastOperation>
 8004074:	4603      	mov	r3, r0
 8004076:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004078:	4b11      	ldr	r3, [pc, #68]	@ (80040c0 <HAL_FLASHEx_Erase+0xd0>)
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	4a10      	ldr	r2, [pc, #64]	@ (80040c0 <HAL_FLASHEx_Erase+0xd0>)
 800407e:	f023 0302 	bic.w	r3, r3, #2
 8004082:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8004084:	7bfb      	ldrb	r3, [r7, #15]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	601a      	str	r2, [r3, #0]
            break;
 8004090:	e00c      	b.n	80040ac <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004098:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	02da      	lsls	r2, r3, #11
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	4413      	add	r3, r2
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d3dc      	bcc.n	8004066 <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80040ac:	4b03      	ldr	r3, [pc, #12]	@ (80040bc <HAL_FLASHEx_Erase+0xcc>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	761a      	strb	r2, [r3, #24]

  return status;
 80040b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	20000cd8 	.word	0x20000cd8
 80040c0:	40022000 	.word	0x40022000

080040c4 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80040c8:	4b09      	ldr	r3, [pc, #36]	@ (80040f0 <FLASH_MassErase+0x2c>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80040ce:	4b09      	ldr	r3, [pc, #36]	@ (80040f4 <FLASH_MassErase+0x30>)
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	4a08      	ldr	r2, [pc, #32]	@ (80040f4 <FLASH_MassErase+0x30>)
 80040d4:	f043 0304 	orr.w	r3, r3, #4
 80040d8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80040da:	4b06      	ldr	r3, [pc, #24]	@ (80040f4 <FLASH_MassErase+0x30>)
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	4a05      	ldr	r2, [pc, #20]	@ (80040f4 <FLASH_MassErase+0x30>)
 80040e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040e4:	6113      	str	r3, [r2, #16]
}
 80040e6:	bf00      	nop
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	20000cd8 	.word	0x20000cd8
 80040f4:	40022000 	.word	0x40022000

080040f8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004100:	4b0b      	ldr	r3, [pc, #44]	@ (8004130 <FLASH_PageErase+0x38>)
 8004102:	2200      	movs	r2, #0
 8004104:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004106:	4b0b      	ldr	r3, [pc, #44]	@ (8004134 <FLASH_PageErase+0x3c>)
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	4a0a      	ldr	r2, [pc, #40]	@ (8004134 <FLASH_PageErase+0x3c>)
 800410c:	f043 0302 	orr.w	r3, r3, #2
 8004110:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8004112:	4a08      	ldr	r2, [pc, #32]	@ (8004134 <FLASH_PageErase+0x3c>)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004118:	4b06      	ldr	r3, [pc, #24]	@ (8004134 <FLASH_PageErase+0x3c>)
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	4a05      	ldr	r2, [pc, #20]	@ (8004134 <FLASH_PageErase+0x3c>)
 800411e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004122:	6113      	str	r3, [r2, #16]
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	20000cd8 	.word	0x20000cd8
 8004134:	40022000 	.word	0x40022000

08004138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004142:	2300      	movs	r3, #0
 8004144:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004146:	e14e      	b.n	80043e6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	2101      	movs	r1, #1
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	fa01 f303 	lsl.w	r3, r1, r3
 8004154:	4013      	ands	r3, r2
 8004156:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2b00      	cmp	r3, #0
 800415c:	f000 8140 	beq.w	80043e0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f003 0303 	and.w	r3, r3, #3
 8004168:	2b01      	cmp	r3, #1
 800416a:	d005      	beq.n	8004178 <HAL_GPIO_Init+0x40>
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f003 0303 	and.w	r3, r3, #3
 8004174:	2b02      	cmp	r3, #2
 8004176:	d130      	bne.n	80041da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	2203      	movs	r2, #3
 8004184:	fa02 f303 	lsl.w	r3, r2, r3
 8004188:	43db      	mvns	r3, r3
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	4013      	ands	r3, r2
 800418e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	68da      	ldr	r2, [r3, #12]
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	fa02 f303 	lsl.w	r3, r2, r3
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	4313      	orrs	r3, r2
 80041a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041ae:	2201      	movs	r2, #1
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	fa02 f303 	lsl.w	r3, r2, r3
 80041b6:	43db      	mvns	r3, r3
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	4013      	ands	r3, r2
 80041bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	091b      	lsrs	r3, r3, #4
 80041c4:	f003 0201 	and.w	r2, r3, #1
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	fa02 f303 	lsl.w	r3, r2, r3
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	d017      	beq.n	8004216 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	005b      	lsls	r3, r3, #1
 80041f0:	2203      	movs	r2, #3
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	43db      	mvns	r3, r3
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	4013      	ands	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	689a      	ldr	r2, [r3, #8]
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	fa02 f303 	lsl.w	r3, r2, r3
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	4313      	orrs	r3, r2
 800420e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d123      	bne.n	800426a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	08da      	lsrs	r2, r3, #3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	3208      	adds	r2, #8
 800422a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800422e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	220f      	movs	r2, #15
 800423a:	fa02 f303 	lsl.w	r3, r2, r3
 800423e:	43db      	mvns	r3, r3
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	4013      	ands	r3, r2
 8004244:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	691a      	ldr	r2, [r3, #16]
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f003 0307 	and.w	r3, r3, #7
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	fa02 f303 	lsl.w	r3, r2, r3
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	4313      	orrs	r3, r2
 800425a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	08da      	lsrs	r2, r3, #3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	3208      	adds	r2, #8
 8004264:	6939      	ldr	r1, [r7, #16]
 8004266:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	2203      	movs	r2, #3
 8004276:	fa02 f303 	lsl.w	r3, r2, r3
 800427a:	43db      	mvns	r3, r3
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4013      	ands	r3, r2
 8004280:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f003 0203 	and.w	r2, r3, #3
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	fa02 f303 	lsl.w	r3, r2, r3
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	4313      	orrs	r3, r2
 8004296:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 809a 	beq.w	80043e0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042ac:	4b55      	ldr	r3, [pc, #340]	@ (8004404 <HAL_GPIO_Init+0x2cc>)
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	4a54      	ldr	r2, [pc, #336]	@ (8004404 <HAL_GPIO_Init+0x2cc>)
 80042b2:	f043 0301 	orr.w	r3, r3, #1
 80042b6:	6193      	str	r3, [r2, #24]
 80042b8:	4b52      	ldr	r3, [pc, #328]	@ (8004404 <HAL_GPIO_Init+0x2cc>)
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	60bb      	str	r3, [r7, #8]
 80042c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80042c4:	4a50      	ldr	r2, [pc, #320]	@ (8004408 <HAL_GPIO_Init+0x2d0>)
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	089b      	lsrs	r3, r3, #2
 80042ca:	3302      	adds	r3, #2
 80042cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f003 0303 	and.w	r3, r3, #3
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	220f      	movs	r2, #15
 80042dc:	fa02 f303 	lsl.w	r3, r2, r3
 80042e0:	43db      	mvns	r3, r3
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	4013      	ands	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80042ee:	d013      	beq.n	8004318 <HAL_GPIO_Init+0x1e0>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a46      	ldr	r2, [pc, #280]	@ (800440c <HAL_GPIO_Init+0x2d4>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d00d      	beq.n	8004314 <HAL_GPIO_Init+0x1dc>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a45      	ldr	r2, [pc, #276]	@ (8004410 <HAL_GPIO_Init+0x2d8>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d007      	beq.n	8004310 <HAL_GPIO_Init+0x1d8>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a44      	ldr	r2, [pc, #272]	@ (8004414 <HAL_GPIO_Init+0x2dc>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d101      	bne.n	800430c <HAL_GPIO_Init+0x1d4>
 8004308:	2303      	movs	r3, #3
 800430a:	e006      	b.n	800431a <HAL_GPIO_Init+0x1e2>
 800430c:	2305      	movs	r3, #5
 800430e:	e004      	b.n	800431a <HAL_GPIO_Init+0x1e2>
 8004310:	2302      	movs	r3, #2
 8004312:	e002      	b.n	800431a <HAL_GPIO_Init+0x1e2>
 8004314:	2301      	movs	r3, #1
 8004316:	e000      	b.n	800431a <HAL_GPIO_Init+0x1e2>
 8004318:	2300      	movs	r3, #0
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	f002 0203 	and.w	r2, r2, #3
 8004320:	0092      	lsls	r2, r2, #2
 8004322:	4093      	lsls	r3, r2
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	4313      	orrs	r3, r2
 8004328:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800432a:	4937      	ldr	r1, [pc, #220]	@ (8004408 <HAL_GPIO_Init+0x2d0>)
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	089b      	lsrs	r3, r3, #2
 8004330:	3302      	adds	r3, #2
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004338:	4b37      	ldr	r3, [pc, #220]	@ (8004418 <HAL_GPIO_Init+0x2e0>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	43db      	mvns	r3, r3
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	4013      	ands	r3, r2
 8004346:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d003      	beq.n	800435c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	4313      	orrs	r3, r2
 800435a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800435c:	4a2e      	ldr	r2, [pc, #184]	@ (8004418 <HAL_GPIO_Init+0x2e0>)
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004362:	4b2d      	ldr	r3, [pc, #180]	@ (8004418 <HAL_GPIO_Init+0x2e0>)
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	43db      	mvns	r3, r3
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	4013      	ands	r3, r2
 8004370:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4313      	orrs	r3, r2
 8004384:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004386:	4a24      	ldr	r2, [pc, #144]	@ (8004418 <HAL_GPIO_Init+0x2e0>)
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800438c:	4b22      	ldr	r3, [pc, #136]	@ (8004418 <HAL_GPIO_Init+0x2e0>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	43db      	mvns	r3, r3
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	4013      	ands	r3, r2
 800439a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d003      	beq.n	80043b0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80043b0:	4a19      	ldr	r2, [pc, #100]	@ (8004418 <HAL_GPIO_Init+0x2e0>)
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043b6:	4b18      	ldr	r3, [pc, #96]	@ (8004418 <HAL_GPIO_Init+0x2e0>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	43db      	mvns	r3, r3
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	4013      	ands	r3, r2
 80043c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80043da:	4a0f      	ldr	r2, [pc, #60]	@ (8004418 <HAL_GPIO_Init+0x2e0>)
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	3301      	adds	r3, #1
 80043e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	fa22 f303 	lsr.w	r3, r2, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f47f aea9 	bne.w	8004148 <HAL_GPIO_Init+0x10>
  }
}
 80043f6:	bf00      	nop
 80043f8:	bf00      	nop
 80043fa:	371c      	adds	r7, #28
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	40021000 	.word	0x40021000
 8004408:	40010000 	.word	0x40010000
 800440c:	48000400 	.word	0x48000400
 8004410:	48000800 	.word	0x48000800
 8004414:	48000c00 	.word	0x48000c00
 8004418:	40010400 	.word	0x40010400

0800441c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	460b      	mov	r3, r1
 8004426:	807b      	strh	r3, [r7, #2]
 8004428:	4613      	mov	r3, r2
 800442a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800442c:	787b      	ldrb	r3, [r7, #1]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d003      	beq.n	800443a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004432:	887a      	ldrh	r2, [r7, #2]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004438:	e002      	b.n	8004440 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800443a:	887a      	ldrh	r2, [r7, #2]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	460b      	mov	r3, r1
 8004456:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800445e:	887a      	ldrh	r2, [r7, #2]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4013      	ands	r3, r2
 8004464:	041a      	lsls	r2, r3, #16
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	43d9      	mvns	r1, r3
 800446a:	887b      	ldrh	r3, [r7, #2]
 800446c:	400b      	ands	r3, r1
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	619a      	str	r2, [r3, #24]
}
 8004474:	bf00      	nop
 8004476:	3714      	adds	r7, #20
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e081      	b.n	8004596 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d106      	bne.n	80044ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f7fd ffba 	bl	8002420 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2224      	movs	r2, #36	@ 0x24
 80044b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f022 0201 	bic.w	r2, r2, #1
 80044c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80044d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80044e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d107      	bne.n	80044fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	689a      	ldr	r2, [r3, #8]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044f6:	609a      	str	r2, [r3, #8]
 80044f8:	e006      	b.n	8004508 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	689a      	ldr	r2, [r3, #8]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004506:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	2b02      	cmp	r3, #2
 800450e:	d104      	bne.n	800451a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004518:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6812      	ldr	r2, [r2, #0]
 8004524:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004528:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800452c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68da      	ldr	r2, [r3, #12]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800453c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691a      	ldr	r2, [r3, #16]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	430a      	orrs	r2, r1
 8004556:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	69d9      	ldr	r1, [r3, #28]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a1a      	ldr	r2, [r3, #32]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f042 0201 	orr.w	r2, r2, #1
 8004576:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2220      	movs	r2, #32
 8004582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3708      	adds	r7, #8
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
	...

080045a0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b088      	sub	sp, #32
 80045a4:	af02      	add	r7, sp, #8
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	607a      	str	r2, [r7, #4]
 80045aa:	461a      	mov	r2, r3
 80045ac:	460b      	mov	r3, r1
 80045ae:	817b      	strh	r3, [r7, #10]
 80045b0:	4613      	mov	r3, r2
 80045b2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b20      	cmp	r3, #32
 80045be:	f040 80da 	bne.w	8004776 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d101      	bne.n	80045d0 <HAL_I2C_Master_Transmit+0x30>
 80045cc:	2302      	movs	r3, #2
 80045ce:	e0d3      	b.n	8004778 <HAL_I2C_Master_Transmit+0x1d8>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80045d8:	f7fe fcb6 	bl	8002f48 <HAL_GetTick>
 80045dc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	2319      	movs	r3, #25
 80045e4:	2201      	movs	r2, #1
 80045e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f000 ff03 	bl	80053f6 <I2C_WaitOnFlagUntilTimeout>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e0be      	b.n	8004778 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2221      	movs	r2, #33	@ 0x21
 80045fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2210      	movs	r2, #16
 8004606:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	893a      	ldrh	r2, [r7, #8]
 800461a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004626:	b29b      	uxth	r3, r3
 8004628:	2bff      	cmp	r3, #255	@ 0xff
 800462a:	d90e      	bls.n	800464a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	22ff      	movs	r2, #255	@ 0xff
 8004630:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004636:	b2da      	uxtb	r2, r3
 8004638:	8979      	ldrh	r1, [r7, #10]
 800463a:	4b51      	ldr	r3, [pc, #324]	@ (8004780 <HAL_I2C_Master_Transmit+0x1e0>)
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f001 f912 	bl	800586c <I2C_TransferConfig>
 8004648:	e06c      	b.n	8004724 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800464e:	b29a      	uxth	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004658:	b2da      	uxtb	r2, r3
 800465a:	8979      	ldrh	r1, [r7, #10]
 800465c:	4b48      	ldr	r3, [pc, #288]	@ (8004780 <HAL_I2C_Master_Transmit+0x1e0>)
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f001 f901 	bl	800586c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800466a:	e05b      	b.n	8004724 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	6a39      	ldr	r1, [r7, #32]
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f000 ff0f 	bl	8005494 <I2C_WaitOnTXISFlagUntilTimeout>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e07b      	b.n	8004778 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004684:	781a      	ldrb	r2, [r3, #0]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004690:	1c5a      	adds	r2, r3, #1
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800469a:	b29b      	uxth	r3, r3
 800469c:	3b01      	subs	r3, #1
 800469e:	b29a      	uxth	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046a8:	3b01      	subs	r3, #1
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d034      	beq.n	8004724 <HAL_I2C_Master_Transmit+0x184>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d130      	bne.n	8004724 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	6a3b      	ldr	r3, [r7, #32]
 80046c8:	2200      	movs	r2, #0
 80046ca:	2180      	movs	r1, #128	@ 0x80
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f000 fe92 	bl	80053f6 <I2C_WaitOnFlagUntilTimeout>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e04d      	b.n	8004778 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	2bff      	cmp	r3, #255	@ 0xff
 80046e4:	d90e      	bls.n	8004704 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	22ff      	movs	r2, #255	@ 0xff
 80046ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046f0:	b2da      	uxtb	r2, r3
 80046f2:	8979      	ldrh	r1, [r7, #10]
 80046f4:	2300      	movs	r3, #0
 80046f6:	9300      	str	r3, [sp, #0]
 80046f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f001 f8b5 	bl	800586c <I2C_TransferConfig>
 8004702:	e00f      	b.n	8004724 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004708:	b29a      	uxth	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004712:	b2da      	uxtb	r2, r3
 8004714:	8979      	ldrh	r1, [r7, #10]
 8004716:	2300      	movs	r3, #0
 8004718:	9300      	str	r3, [sp, #0]
 800471a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f001 f8a4 	bl	800586c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004728:	b29b      	uxth	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d19e      	bne.n	800466c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	6a39      	ldr	r1, [r7, #32]
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f000 fef5 	bl	8005522 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e01a      	b.n	8004778 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2220      	movs	r2, #32
 8004748:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	6859      	ldr	r1, [r3, #4]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	4b0b      	ldr	r3, [pc, #44]	@ (8004784 <HAL_I2C_Master_Transmit+0x1e4>)
 8004756:	400b      	ands	r3, r1
 8004758:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2220      	movs	r2, #32
 800475e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004772:	2300      	movs	r3, #0
 8004774:	e000      	b.n	8004778 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004776:	2302      	movs	r3, #2
  }
}
 8004778:	4618      	mov	r0, r3
 800477a:	3718      	adds	r7, #24
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	80002000 	.word	0x80002000
 8004784:	fe00e800 	.word	0xfe00e800

08004788 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b088      	sub	sp, #32
 800478c:	af02      	add	r7, sp, #8
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	607a      	str	r2, [r7, #4]
 8004792:	461a      	mov	r2, r3
 8004794:	460b      	mov	r3, r1
 8004796:	817b      	strh	r3, [r7, #10]
 8004798:	4613      	mov	r3, r2
 800479a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	2b20      	cmp	r3, #32
 80047a6:	f040 80db 	bne.w	8004960 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d101      	bne.n	80047b8 <HAL_I2C_Master_Receive+0x30>
 80047b4:	2302      	movs	r3, #2
 80047b6:	e0d4      	b.n	8004962 <HAL_I2C_Master_Receive+0x1da>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80047c0:	f7fe fbc2 	bl	8002f48 <HAL_GetTick>
 80047c4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	9300      	str	r3, [sp, #0]
 80047ca:	2319      	movs	r3, #25
 80047cc:	2201      	movs	r2, #1
 80047ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 fe0f 	bl	80053f6 <I2C_WaitOnFlagUntilTimeout>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e0bf      	b.n	8004962 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2222      	movs	r2, #34	@ 0x22
 80047e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2210      	movs	r2, #16
 80047ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	893a      	ldrh	r2, [r7, #8]
 8004802:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800480e:	b29b      	uxth	r3, r3
 8004810:	2bff      	cmp	r3, #255	@ 0xff
 8004812:	d90e      	bls.n	8004832 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	22ff      	movs	r2, #255	@ 0xff
 8004818:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800481e:	b2da      	uxtb	r2, r3
 8004820:	8979      	ldrh	r1, [r7, #10]
 8004822:	4b52      	ldr	r3, [pc, #328]	@ (800496c <HAL_I2C_Master_Receive+0x1e4>)
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f001 f81e 	bl	800586c <I2C_TransferConfig>
 8004830:	e06d      	b.n	800490e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004836:	b29a      	uxth	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004840:	b2da      	uxtb	r2, r3
 8004842:	8979      	ldrh	r1, [r7, #10]
 8004844:	4b49      	ldr	r3, [pc, #292]	@ (800496c <HAL_I2C_Master_Receive+0x1e4>)
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f001 f80d 	bl	800586c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004852:	e05c      	b.n	800490e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	6a39      	ldr	r1, [r7, #32]
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f000 fea5 	bl	80055a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e07c      	b.n	8004962 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004872:	b2d2      	uxtb	r2, r2
 8004874:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487a:	1c5a      	adds	r2, r3, #1
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004884:	3b01      	subs	r3, #1
 8004886:	b29a      	uxth	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004890:	b29b      	uxth	r3, r3
 8004892:	3b01      	subs	r3, #1
 8004894:	b29a      	uxth	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800489e:	b29b      	uxth	r3, r3
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d034      	beq.n	800490e <HAL_I2C_Master_Receive+0x186>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d130      	bne.n	800490e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	6a3b      	ldr	r3, [r7, #32]
 80048b2:	2200      	movs	r2, #0
 80048b4:	2180      	movs	r1, #128	@ 0x80
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f000 fd9d 	bl	80053f6 <I2C_WaitOnFlagUntilTimeout>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e04d      	b.n	8004962 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	2bff      	cmp	r3, #255	@ 0xff
 80048ce:	d90e      	bls.n	80048ee <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	22ff      	movs	r2, #255	@ 0xff
 80048d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	8979      	ldrh	r1, [r7, #10]
 80048de:	2300      	movs	r3, #0
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f000 ffc0 	bl	800586c <I2C_TransferConfig>
 80048ec:	e00f      	b.n	800490e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048fc:	b2da      	uxtb	r2, r3
 80048fe:	8979      	ldrh	r1, [r7, #10]
 8004900:	2300      	movs	r3, #0
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	f000 ffaf 	bl	800586c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004912:	b29b      	uxth	r3, r3
 8004914:	2b00      	cmp	r3, #0
 8004916:	d19d      	bne.n	8004854 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	6a39      	ldr	r1, [r7, #32]
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f000 fe00 	bl	8005522 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e01a      	b.n	8004962 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2220      	movs	r2, #32
 8004932:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	6859      	ldr	r1, [r3, #4]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	4b0c      	ldr	r3, [pc, #48]	@ (8004970 <HAL_I2C_Master_Receive+0x1e8>)
 8004940:	400b      	ands	r3, r1
 8004942:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2220      	movs	r2, #32
 8004948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800495c:	2300      	movs	r3, #0
 800495e:	e000      	b.n	8004962 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004960:	2302      	movs	r3, #2
  }
}
 8004962:	4618      	mov	r0, r3
 8004964:	3718      	adds	r7, #24
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	80002400 	.word	0x80002400
 8004970:	fe00e800 	.word	0xfe00e800

08004974 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004990:	2b00      	cmp	r3, #0
 8004992:	d005      	beq.n	80049a0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	68f9      	ldr	r1, [r7, #12]
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	4798      	blx	r3
  }
}
 80049a0:	bf00      	nop
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00f      	beq.n	80049ea <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00a      	beq.n	80049ea <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049d8:	f043 0201 	orr.w	r2, r3, #1
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80049e8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00f      	beq.n	8004a14 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00a      	beq.n	8004a14 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a02:	f043 0208 	orr.w	r2, r3, #8
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004a12:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00f      	beq.n	8004a3e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00a      	beq.n	8004a3e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a2c:	f043 0202 	orr.w	r2, r3, #2
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a3c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f003 030b 	and.w	r3, r3, #11
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8004a4e:	68f9      	ldr	r1, [r7, #12]
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 fb77 	bl	8005144 <I2C_ITError>
  }
}
 8004a56:	bf00      	nop
 8004a58:	3718      	adds	r7, #24
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a5e:	b480      	push	{r7}
 8004a60:	b083      	sub	sp, #12
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004a66:	bf00      	nop
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b083      	sub	sp, #12
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004a7a:	bf00      	nop
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b083      	sub	sp, #12
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
 8004a8e:	460b      	mov	r3, r1
 8004a90:	70fb      	strb	r3, [r7, #3]
 8004a92:	4613      	mov	r3, r2
 8004a94:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b083      	sub	sp, #12
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004aaa:	bf00      	nop
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr

08004ab6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b083      	sub	sp, #12
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004abe:	bf00      	nop
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b083      	sub	sp, #12
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004ad2:	bf00      	nop
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b086      	sub	sp, #24
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	60f8      	str	r0, [r7, #12]
 8004ae6:	60b9      	str	r1, [r7, #8]
 8004ae8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aee:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d101      	bne.n	8004b02 <I2C_Slave_ISR_IT+0x24>
 8004afe:	2302      	movs	r3, #2
 8004b00:	e0e1      	b.n	8004cc6 <I2C_Slave_ISR_IT+0x1e8>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	f003 0320 	and.w	r3, r3, #32
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d008      	beq.n	8004b26 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004b1e:	6939      	ldr	r1, [r7, #16]
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f000 f9b5 	bl	8004e90 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	f003 0310 	and.w	r3, r3, #16
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d04b      	beq.n	8004bc8 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d046      	beq.n	8004bc8 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d128      	bne.n	8004b96 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b28      	cmp	r3, #40	@ 0x28
 8004b4e:	d108      	bne.n	8004b62 <I2C_Slave_ISR_IT+0x84>
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b56:	d104      	bne.n	8004b62 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004b58:	6939      	ldr	r1, [r7, #16]
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 fa9e 	bl	800509c <I2C_ITListenCplt>
 8004b60:	e031      	b.n	8004bc6 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b29      	cmp	r3, #41	@ 0x29
 8004b6c:	d10e      	bne.n	8004b8c <I2C_Slave_ISR_IT+0xae>
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b74:	d00a      	beq.n	8004b8c <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2210      	movs	r2, #16
 8004b7c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f000 fbf7 	bl	8005372 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f000 f926 	bl	8004dd6 <I2C_ITSlaveSeqCplt>
 8004b8a:	e01c      	b.n	8004bc6 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2210      	movs	r2, #16
 8004b92:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004b94:	e08f      	b.n	8004cb6 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2210      	movs	r2, #16
 8004b9c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ba2:	f043 0204 	orr.w	r2, r3, #4
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d003      	beq.n	8004bb8 <I2C_Slave_ISR_IT+0xda>
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bb6:	d17e      	bne.n	8004cb6 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f000 fac0 	bl	8005144 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004bc4:	e077      	b.n	8004cb6 <I2C_Slave_ISR_IT+0x1d8>
 8004bc6:	e076      	b.n	8004cb6 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	f003 0304 	and.w	r3, r3, #4
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d02f      	beq.n	8004c32 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d02a      	beq.n	8004c32 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d018      	beq.n	8004c18 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf0:	b2d2      	uxtb	r2, r2
 8004bf2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf8:	1c5a      	adds	r2, r3, #1
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c02:	3b01      	subs	r3, #1
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	3b01      	subs	r3, #1
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d14b      	bne.n	8004cba <I2C_Slave_ISR_IT+0x1dc>
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004c28:	d047      	beq.n	8004cba <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f000 f8d3 	bl	8004dd6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004c30:	e043      	b.n	8004cba <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	f003 0308 	and.w	r3, r3, #8
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d009      	beq.n	8004c50 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d004      	beq.n	8004c50 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004c46:	6939      	ldr	r1, [r7, #16]
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f000 f840 	bl	8004cce <I2C_ITAddrCplt>
 8004c4e:	e035      	b.n	8004cbc <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d030      	beq.n	8004cbc <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d02b      	beq.n	8004cbc <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d018      	beq.n	8004ca0 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c72:	781a      	ldrb	r2, [r3, #0]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c7e:	1c5a      	adds	r2, r3, #1
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c96:	3b01      	subs	r3, #1
 8004c98:	b29a      	uxth	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004c9e:	e00d      	b.n	8004cbc <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ca6:	d002      	beq.n	8004cae <I2C_Slave_ISR_IT+0x1d0>
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d106      	bne.n	8004cbc <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f000 f891 	bl	8004dd6 <I2C_ITSlaveSeqCplt>
 8004cb4:	e002      	b.n	8004cbc <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8004cb6:	bf00      	nop
 8004cb8:	e000      	b.n	8004cbc <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8004cba:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3718      	adds	r7, #24
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b084      	sub	sp, #16
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
 8004cd6:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004ce4:	2b28      	cmp	r3, #40	@ 0x28
 8004ce6:	d16a      	bne.n	8004dbe <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	0c1b      	lsrs	r3, r3, #16
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	0c1b      	lsrs	r3, r3, #16
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004d06:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d14:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004d22:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d138      	bne.n	8004d9e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004d2c:	897b      	ldrh	r3, [r7, #10]
 8004d2e:	09db      	lsrs	r3, r3, #7
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	89bb      	ldrh	r3, [r7, #12]
 8004d34:	4053      	eors	r3, r2
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	f003 0306 	and.w	r3, r3, #6
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d11c      	bne.n	8004d7a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004d40:	897b      	ldrh	r3, [r7, #10]
 8004d42:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d48:	1c5a      	adds	r2, r3, #1
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d13b      	bne.n	8004dce <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2208      	movs	r2, #8
 8004d62:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004d6c:	89ba      	ldrh	r2, [r7, #12]
 8004d6e:	7bfb      	ldrb	r3, [r7, #15]
 8004d70:	4619      	mov	r1, r3
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7ff fe87 	bl	8004a86 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004d78:	e029      	b.n	8004dce <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004d7a:	893b      	ldrh	r3, [r7, #8]
 8004d7c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004d7e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 fda4 	bl	80058d0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004d90:	89ba      	ldrh	r2, [r7, #12]
 8004d92:	7bfb      	ldrb	r3, [r7, #15]
 8004d94:	4619      	mov	r1, r3
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f7ff fe75 	bl	8004a86 <HAL_I2C_AddrCallback>
}
 8004d9c:	e017      	b.n	8004dce <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004d9e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 fd94 	bl	80058d0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004db0:	89ba      	ldrh	r2, [r7, #12]
 8004db2:	7bfb      	ldrb	r3, [r7, #15]
 8004db4:	4619      	mov	r1, r3
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f7ff fe65 	bl	8004a86 <HAL_I2C_AddrCallback>
}
 8004dbc:	e007      	b.n	8004dce <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2208      	movs	r2, #8
 8004dc4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8004dce:	bf00      	nop
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b084      	sub	sp, #16
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d008      	beq.n	8004e0a <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004e06:	601a      	str	r2, [r3, #0]
 8004e08:	e00c      	b.n	8004e24 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d007      	beq.n	8004e24 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e22:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b29      	cmp	r3, #41	@ 0x29
 8004e2e:	d112      	bne.n	8004e56 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2228      	movs	r2, #40	@ 0x28
 8004e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2221      	movs	r2, #33	@ 0x21
 8004e3c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004e3e:	2101      	movs	r1, #1
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 fd45 	bl	80058d0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7ff fe05 	bl	8004a5e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004e54:	e017      	b.n	8004e86 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e60:	d111      	bne.n	8004e86 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2228      	movs	r2, #40	@ 0x28
 8004e66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2222      	movs	r2, #34	@ 0x22
 8004e6e:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004e70:	2102      	movs	r1, #2
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 fd2c 	bl	80058d0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f7ff fdf6 	bl	8004a72 <HAL_I2C_SlaveRxCpltCallback>
}
 8004e86:	bf00      	nop
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
	...

08004e90 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004eac:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004eb6:	7bfb      	ldrb	r3, [r7, #15]
 8004eb8:	2b21      	cmp	r3, #33	@ 0x21
 8004eba:	d002      	beq.n	8004ec2 <I2C_ITSlaveCplt+0x32>
 8004ebc:	7bfb      	ldrb	r3, [r7, #15]
 8004ebe:	2b29      	cmp	r3, #41	@ 0x29
 8004ec0:	d108      	bne.n	8004ed4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004ec2:	f248 0101 	movw	r1, #32769	@ 0x8001
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 fd02 	bl	80058d0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2221      	movs	r2, #33	@ 0x21
 8004ed0:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ed2:	e00d      	b.n	8004ef0 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004ed4:	7bfb      	ldrb	r3, [r7, #15]
 8004ed6:	2b22      	cmp	r3, #34	@ 0x22
 8004ed8:	d002      	beq.n	8004ee0 <I2C_ITSlaveCplt+0x50>
 8004eda:	7bfb      	ldrb	r3, [r7, #15]
 8004edc:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ede:	d107      	bne.n	8004ef0 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004ee0:	f248 0102 	movw	r1, #32770	@ 0x8002
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 fcf3 	bl	80058d0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2222      	movs	r2, #34	@ 0x22
 8004eee:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	685a      	ldr	r2, [r3, #4]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004efe:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6859      	ldr	r1, [r3, #4]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	4b62      	ldr	r3, [pc, #392]	@ (8005094 <I2C_ITSlaveCplt+0x204>)
 8004f0c:	400b      	ands	r3, r1
 8004f0e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 fa2e 	bl	8005372 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d013      	beq.n	8004f48 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004f2e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d01f      	beq.n	8004f78 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004f46:	e017      	b.n	8004f78 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d012      	beq.n	8004f78 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f60:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d006      	beq.n	8004f78 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	f003 0304 	and.w	r3, r3, #4
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d020      	beq.n	8004fc4 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f023 0304 	bic.w	r3, r3, #4
 8004f88:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f94:	b2d2      	uxtb	r2, r2
 8004f96:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9c:	1c5a      	adds	r2, r3, #1
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00c      	beq.n	8004fc4 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d005      	beq.n	8004fda <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fd2:	f043 0204 	orr.w	r2, r3, #4
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d010      	beq.n	8005012 <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f8a4 	bl	8005144 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b28      	cmp	r3, #40	@ 0x28
 8005006:	d141      	bne.n	800508c <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005008:	6979      	ldr	r1, [r7, #20]
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f846 	bl	800509c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005010:	e03c      	b.n	800508c <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005016:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800501a:	d014      	beq.n	8005046 <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f7ff feda 	bl	8004dd6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a1c      	ldr	r2, [pc, #112]	@ (8005098 <I2C_ITSlaveCplt+0x208>)
 8005026:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2220      	movs	r2, #32
 800502c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f7ff fd2f 	bl	8004aa2 <HAL_I2C_ListenCpltCallback>
}
 8005044:	e022      	b.n	800508c <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b22      	cmp	r3, #34	@ 0x22
 8005050:	d10e      	bne.n	8005070 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2220      	movs	r2, #32
 8005056:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f7ff fd02 	bl	8004a72 <HAL_I2C_SlaveRxCpltCallback>
}
 800506e:	e00d      	b.n	800508c <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2220      	movs	r2, #32
 8005074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7ff fce9 	bl	8004a5e <HAL_I2C_SlaveTxCpltCallback>
}
 800508c:	bf00      	nop
 800508e:	3718      	adds	r7, #24
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	fe00e800 	.word	0xfe00e800
 8005098:	ffff0000 	.word	0xffff0000

0800509c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a25      	ldr	r2, [pc, #148]	@ (8005140 <I2C_ITListenCplt+0xa4>)
 80050aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2220      	movs	r2, #32
 80050b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	f003 0304 	and.w	r3, r3, #4
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d022      	beq.n	8005118 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050dc:	b2d2      	uxtb	r2, r2
 80050de:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e4:	1c5a      	adds	r2, r3, #1
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d012      	beq.n	8005118 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050f6:	3b01      	subs	r3, #1
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005102:	b29b      	uxth	r3, r3
 8005104:	3b01      	subs	r3, #1
 8005106:	b29a      	uxth	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005110:	f043 0204 	orr.w	r2, r3, #4
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005118:	f248 0103 	movw	r1, #32771	@ 0x8003
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 fbd7 	bl	80058d0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2210      	movs	r2, #16
 8005128:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7ff fcb5 	bl	8004aa2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005138:	bf00      	nop
 800513a:	3708      	adds	r7, #8
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	ffff0000 	.word	0xffff0000

08005144 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005154:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a6d      	ldr	r2, [pc, #436]	@ (8005318 <I2C_ITError+0x1d4>)
 8005162:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	431a      	orrs	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005176:	7bfb      	ldrb	r3, [r7, #15]
 8005178:	2b28      	cmp	r3, #40	@ 0x28
 800517a:	d005      	beq.n	8005188 <I2C_ITError+0x44>
 800517c:	7bfb      	ldrb	r3, [r7, #15]
 800517e:	2b29      	cmp	r3, #41	@ 0x29
 8005180:	d002      	beq.n	8005188 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005182:	7bfb      	ldrb	r3, [r7, #15]
 8005184:	2b2a      	cmp	r3, #42	@ 0x2a
 8005186:	d10b      	bne.n	80051a0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005188:	2103      	movs	r1, #3
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 fba0 	bl	80058d0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2228      	movs	r2, #40	@ 0x28
 8005194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a60      	ldr	r2, [pc, #384]	@ (800531c <I2C_ITError+0x1d8>)
 800519c:	635a      	str	r2, [r3, #52]	@ 0x34
 800519e:	e030      	b.n	8005202 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80051a0:	f248 0103 	movw	r1, #32771	@ 0x8003
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 fb93 	bl	80058d0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f8e1 	bl	8005372 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	2b60      	cmp	r3, #96	@ 0x60
 80051ba:	d01f      	beq.n	80051fc <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2220      	movs	r2, #32
 80051c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	f003 0320 	and.w	r3, r3, #32
 80051ce:	2b20      	cmp	r3, #32
 80051d0:	d114      	bne.n	80051fc <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	f003 0310 	and.w	r3, r3, #16
 80051dc:	2b10      	cmp	r3, #16
 80051de:	d109      	bne.n	80051f4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2210      	movs	r2, #16
 80051e6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ec:	f043 0204 	orr.w	r2, r3, #4
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2220      	movs	r2, #32
 80051fa:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005206:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800520c:	2b00      	cmp	r3, #0
 800520e:	d039      	beq.n	8005284 <I2C_ITError+0x140>
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2b11      	cmp	r3, #17
 8005214:	d002      	beq.n	800521c <I2C_ITError+0xd8>
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	2b21      	cmp	r3, #33	@ 0x21
 800521a:	d133      	bne.n	8005284 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005226:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800522a:	d107      	bne.n	800523c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800523a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005240:	4618      	mov	r0, r3
 8005242:	f7fe fd88 	bl	8003d56 <HAL_DMA_GetState>
 8005246:	4603      	mov	r3, r0
 8005248:	2b01      	cmp	r3, #1
 800524a:	d017      	beq.n	800527c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005250:	4a33      	ldr	r2, [pc, #204]	@ (8005320 <I2C_ITError+0x1dc>)
 8005252:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005260:	4618      	mov	r0, r3
 8005262:	f7fe fd3a 	bl	8003cda <HAL_DMA_Abort_IT>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d04d      	beq.n	8005308 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005270:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005276:	4610      	mov	r0, r2
 8005278:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800527a:	e045      	b.n	8005308 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f851 	bl	8005324 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005282:	e041      	b.n	8005308 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005288:	2b00      	cmp	r3, #0
 800528a:	d039      	beq.n	8005300 <I2C_ITError+0x1bc>
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	2b12      	cmp	r3, #18
 8005290:	d002      	beq.n	8005298 <I2C_ITError+0x154>
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	2b22      	cmp	r3, #34	@ 0x22
 8005296:	d133      	bne.n	8005300 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052a6:	d107      	bne.n	80052b8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80052b6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052bc:	4618      	mov	r0, r3
 80052be:	f7fe fd4a 	bl	8003d56 <HAL_DMA_GetState>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d017      	beq.n	80052f8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052cc:	4a14      	ldr	r2, [pc, #80]	@ (8005320 <I2C_ITError+0x1dc>)
 80052ce:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052dc:	4618      	mov	r0, r3
 80052de:	f7fe fcfc 	bl	8003cda <HAL_DMA_Abort_IT>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d011      	beq.n	800530c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80052f2:	4610      	mov	r0, r2
 80052f4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052f6:	e009      	b.n	800530c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 f813 	bl	8005324 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052fe:	e005      	b.n	800530c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 f80f 	bl	8005324 <I2C_TreatErrorCallback>
  }
}
 8005306:	e002      	b.n	800530e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005308:	bf00      	nop
 800530a:	e000      	b.n	800530e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800530c:	bf00      	nop
}
 800530e:	bf00      	nop
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	ffff0000 	.word	0xffff0000
 800531c:	08004adf 	.word	0x08004adf
 8005320:	080053bb 	.word	0x080053bb

08005324 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b60      	cmp	r3, #96	@ 0x60
 8005336:	d10e      	bne.n	8005356 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2220      	movs	r2, #32
 800533c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7ff fbbb 	bl	8004aca <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005354:	e009      	b.n	800536a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f7ff fba6 	bl	8004ab6 <HAL_I2C_ErrorCallback>
}
 800536a:	bf00      	nop
 800536c:	3708      	adds	r7, #8
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005372:	b480      	push	{r7}
 8005374:	b083      	sub	sp, #12
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	f003 0302 	and.w	r3, r3, #2
 8005384:	2b02      	cmp	r3, #2
 8005386:	d103      	bne.n	8005390 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2200      	movs	r2, #0
 800538e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b01      	cmp	r3, #1
 800539c:	d007      	beq.n	80053ae <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	699a      	ldr	r2, [r3, #24]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f042 0201 	orr.w	r2, r2, #1
 80053ac:	619a      	str	r2, [r3, #24]
  }
}
 80053ae:	bf00      	nop
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b084      	sub	sp, #16
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d003      	beq.n	80053d8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d4:	2200      	movs	r2, #0
 80053d6:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d003      	beq.n	80053e8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053e4:	2200      	movs	r2, #0
 80053e6:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f7ff ff9b 	bl	8005324 <I2C_TreatErrorCallback>
}
 80053ee:	bf00      	nop
 80053f0:	3710      	adds	r7, #16
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b084      	sub	sp, #16
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	60f8      	str	r0, [r7, #12]
 80053fe:	60b9      	str	r1, [r7, #8]
 8005400:	603b      	str	r3, [r7, #0]
 8005402:	4613      	mov	r3, r2
 8005404:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005406:	e031      	b.n	800546c <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540e:	d02d      	beq.n	800546c <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005410:	f7fd fd9a 	bl	8002f48 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	429a      	cmp	r2, r3
 800541e:	d302      	bcc.n	8005426 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d122      	bne.n	800546c <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	699a      	ldr	r2, [r3, #24]
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	4013      	ands	r3, r2
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	429a      	cmp	r2, r3
 8005434:	bf0c      	ite	eq
 8005436:	2301      	moveq	r3, #1
 8005438:	2300      	movne	r3, #0
 800543a:	b2db      	uxtb	r3, r3
 800543c:	461a      	mov	r2, r3
 800543e:	79fb      	ldrb	r3, [r7, #7]
 8005440:	429a      	cmp	r2, r3
 8005442:	d113      	bne.n	800546c <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005448:	f043 0220 	orr.w	r2, r3, #32
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2220      	movs	r2, #32
 8005454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e00f      	b.n	800548c <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	699a      	ldr	r2, [r3, #24]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	4013      	ands	r3, r2
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	429a      	cmp	r2, r3
 800547a:	bf0c      	ite	eq
 800547c:	2301      	moveq	r3, #1
 800547e:	2300      	movne	r3, #0
 8005480:	b2db      	uxtb	r3, r3
 8005482:	461a      	mov	r2, r3
 8005484:	79fb      	ldrb	r3, [r7, #7]
 8005486:	429a      	cmp	r2, r3
 8005488:	d0be      	beq.n	8005408 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80054a0:	e033      	b.n	800550a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	68b9      	ldr	r1, [r7, #8]
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f000 f900 	bl	80056ac <I2C_IsErrorOccurred>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e031      	b.n	800551a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054bc:	d025      	beq.n	800550a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054be:	f7fd fd43 	bl	8002f48 <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d302      	bcc.n	80054d4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d11a      	bne.n	800550a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d013      	beq.n	800550a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054e6:	f043 0220 	orr.w	r2, r3, #32
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2220      	movs	r2, #32
 80054f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e007      	b.n	800551a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	f003 0302 	and.w	r3, r3, #2
 8005514:	2b02      	cmp	r3, #2
 8005516:	d1c4      	bne.n	80054a2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b084      	sub	sp, #16
 8005526:	af00      	add	r7, sp, #0
 8005528:	60f8      	str	r0, [r7, #12]
 800552a:	60b9      	str	r1, [r7, #8]
 800552c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800552e:	e02f      	b.n	8005590 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	68b9      	ldr	r1, [r7, #8]
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f000 f8b9 	bl	80056ac <I2C_IsErrorOccurred>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d001      	beq.n	8005544 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e02d      	b.n	80055a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005544:	f7fd fd00 	bl	8002f48 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	429a      	cmp	r2, r3
 8005552:	d302      	bcc.n	800555a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d11a      	bne.n	8005590 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	f003 0320 	and.w	r3, r3, #32
 8005564:	2b20      	cmp	r3, #32
 8005566:	d013      	beq.n	8005590 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800556c:	f043 0220 	orr.w	r2, r3, #32
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2220      	movs	r2, #32
 8005578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e007      	b.n	80055a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	f003 0320 	and.w	r3, r3, #32
 800559a:	2b20      	cmp	r3, #32
 800559c:	d1c8      	bne.n	8005530 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055b4:	e06b      	b.n	800568e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	68b9      	ldr	r1, [r7, #8]
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f000 f876 	bl	80056ac <I2C_IsErrorOccurred>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e069      	b.n	800569e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	f003 0320 	and.w	r3, r3, #32
 80055d4:	2b20      	cmp	r3, #32
 80055d6:	d138      	bne.n	800564a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	f003 0304 	and.w	r3, r3, #4
 80055e2:	2b04      	cmp	r3, #4
 80055e4:	d105      	bne.n	80055f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d001      	beq.n	80055f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80055ee:	2300      	movs	r3, #0
 80055f0:	e055      	b.n	800569e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	f003 0310 	and.w	r3, r3, #16
 80055fc:	2b10      	cmp	r3, #16
 80055fe:	d107      	bne.n	8005610 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2210      	movs	r2, #16
 8005606:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2204      	movs	r2, #4
 800560c:	645a      	str	r2, [r3, #68]	@ 0x44
 800560e:	e002      	b.n	8005616 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2220      	movs	r2, #32
 800561c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	6859      	ldr	r1, [r3, #4]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	4b1f      	ldr	r3, [pc, #124]	@ (80056a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800562a:	400b      	ands	r3, r1
 800562c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2220      	movs	r2, #32
 8005632:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e029      	b.n	800569e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800564a:	f7fd fc7d 	bl	8002f48 <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	68ba      	ldr	r2, [r7, #8]
 8005656:	429a      	cmp	r2, r3
 8005658:	d302      	bcc.n	8005660 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d116      	bne.n	800568e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	f003 0304 	and.w	r3, r3, #4
 800566a:	2b04      	cmp	r3, #4
 800566c:	d00f      	beq.n	800568e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005672:	f043 0220 	orr.w	r2, r3, #32
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2220      	movs	r2, #32
 800567e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e007      	b.n	800569e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	f003 0304 	and.w	r3, r3, #4
 8005698:	2b04      	cmp	r3, #4
 800569a:	d18c      	bne.n	80055b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	fe00e800 	.word	0xfe00e800

080056ac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b08a      	sub	sp, #40	@ 0x28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056b8:	2300      	movs	r3, #0
 80056ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80056c6:	2300      	movs	r3, #0
 80056c8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	f003 0310 	and.w	r3, r3, #16
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d068      	beq.n	80057aa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2210      	movs	r2, #16
 80056de:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80056e0:	e049      	b.n	8005776 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e8:	d045      	beq.n	8005776 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80056ea:	f7fd fc2d 	bl	8002f48 <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	68ba      	ldr	r2, [r7, #8]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d302      	bcc.n	8005700 <I2C_IsErrorOccurred+0x54>
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d13a      	bne.n	8005776 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800570a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005712:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800571e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005722:	d121      	bne.n	8005768 <I2C_IsErrorOccurred+0xbc>
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800572a:	d01d      	beq.n	8005768 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800572c:	7cfb      	ldrb	r3, [r7, #19]
 800572e:	2b20      	cmp	r3, #32
 8005730:	d01a      	beq.n	8005768 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005740:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005742:	f7fd fc01 	bl	8002f48 <HAL_GetTick>
 8005746:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005748:	e00e      	b.n	8005768 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800574a:	f7fd fbfd 	bl	8002f48 <HAL_GetTick>
 800574e:	4602      	mov	r2, r0
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	2b19      	cmp	r3, #25
 8005756:	d907      	bls.n	8005768 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005758:	6a3b      	ldr	r3, [r7, #32]
 800575a:	f043 0320 	orr.w	r3, r3, #32
 800575e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005766:	e006      	b.n	8005776 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	f003 0320 	and.w	r3, r3, #32
 8005772:	2b20      	cmp	r3, #32
 8005774:	d1e9      	bne.n	800574a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	f003 0320 	and.w	r3, r3, #32
 8005780:	2b20      	cmp	r3, #32
 8005782:	d003      	beq.n	800578c <I2C_IsErrorOccurred+0xe0>
 8005784:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005788:	2b00      	cmp	r3, #0
 800578a:	d0aa      	beq.n	80056e2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800578c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005790:	2b00      	cmp	r3, #0
 8005792:	d103      	bne.n	800579c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2220      	movs	r2, #32
 800579a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800579c:	6a3b      	ldr	r3, [r7, #32]
 800579e:	f043 0304 	orr.w	r3, r3, #4
 80057a2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	699b      	ldr	r3, [r3, #24]
 80057b0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00b      	beq.n	80057d4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80057bc:	6a3b      	ldr	r3, [r7, #32]
 80057be:	f043 0301 	orr.w	r3, r3, #1
 80057c2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80057cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00b      	beq.n	80057f6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80057de:	6a3b      	ldr	r3, [r7, #32]
 80057e0:	f043 0308 	orr.w	r3, r3, #8
 80057e4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80057ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00b      	beq.n	8005818 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005800:	6a3b      	ldr	r3, [r7, #32]
 8005802:	f043 0302 	orr.w	r3, r3, #2
 8005806:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005810:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005818:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800581c:	2b00      	cmp	r3, #0
 800581e:	d01c      	beq.n	800585a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f7ff fda6 	bl	8005372 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	6859      	ldr	r1, [r3, #4]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	4b0d      	ldr	r3, [pc, #52]	@ (8005868 <I2C_IsErrorOccurred+0x1bc>)
 8005832:	400b      	ands	r3, r1
 8005834:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800583a:	6a3b      	ldr	r3, [r7, #32]
 800583c:	431a      	orrs	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2220      	movs	r2, #32
 8005846:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800585a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800585e:	4618      	mov	r0, r3
 8005860:	3728      	adds	r7, #40	@ 0x28
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	fe00e800 	.word	0xfe00e800

0800586c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800586c:	b480      	push	{r7}
 800586e:	b087      	sub	sp, #28
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	607b      	str	r3, [r7, #4]
 8005876:	460b      	mov	r3, r1
 8005878:	817b      	strh	r3, [r7, #10]
 800587a:	4613      	mov	r3, r2
 800587c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800587e:	897b      	ldrh	r3, [r7, #10]
 8005880:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005884:	7a7b      	ldrb	r3, [r7, #9]
 8005886:	041b      	lsls	r3, r3, #16
 8005888:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800588c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005892:	6a3b      	ldr	r3, [r7, #32]
 8005894:	4313      	orrs	r3, r2
 8005896:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800589a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685a      	ldr	r2, [r3, #4]
 80058a2:	6a3b      	ldr	r3, [r7, #32]
 80058a4:	0d5b      	lsrs	r3, r3, #21
 80058a6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80058aa:	4b08      	ldr	r3, [pc, #32]	@ (80058cc <I2C_TransferConfig+0x60>)
 80058ac:	430b      	orrs	r3, r1
 80058ae:	43db      	mvns	r3, r3
 80058b0:	ea02 0103 	and.w	r1, r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	430a      	orrs	r2, r1
 80058bc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80058be:	bf00      	nop
 80058c0:	371c      	adds	r7, #28
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	03ff63ff 	.word	0x03ff63ff

080058d0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	460b      	mov	r3, r1
 80058da:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80058dc:	2300      	movs	r3, #0
 80058de:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80058e0:	887b      	ldrh	r3, [r7, #2]
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00f      	beq.n	800590a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80058f0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80058fe:	2b28      	cmp	r3, #40	@ 0x28
 8005900:	d003      	beq.n	800590a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005908:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800590a:	887b      	ldrh	r3, [r7, #2]
 800590c:	f003 0302 	and.w	r3, r3, #2
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00f      	beq.n	8005934 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800591a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005922:	b2db      	uxtb	r3, r3
 8005924:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005928:	2b28      	cmp	r3, #40	@ 0x28
 800592a:	d003      	beq.n	8005934 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005932:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005934:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005938:	2b00      	cmp	r3, #0
 800593a:	da03      	bge.n	8005944 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005942:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005944:	887b      	ldrh	r3, [r7, #2]
 8005946:	2b10      	cmp	r3, #16
 8005948:	d103      	bne.n	8005952 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005950:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005952:	887b      	ldrh	r3, [r7, #2]
 8005954:	2b20      	cmp	r3, #32
 8005956:	d103      	bne.n	8005960 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f043 0320 	orr.w	r3, r3, #32
 800595e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005960:	887b      	ldrh	r3, [r7, #2]
 8005962:	2b40      	cmp	r3, #64	@ 0x40
 8005964:	d103      	bne.n	800596e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800596c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	6819      	ldr	r1, [r3, #0]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	43da      	mvns	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	400a      	ands	r2, r1
 800597e:	601a      	str	r2, [r3, #0]
}
 8005980:	bf00      	nop
 8005982:	3714      	adds	r7, #20
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <Custom_I2C_RequestMemoryRead>:


HAL_StatusTypeDef Custom_I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint8_t command, uint8_t startAddress, uint8_t addressStep, uint8_t nMemAddressRead,
											   uint32_t Timeout, uint32_t Tickstart)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af02      	add	r7, sp, #8
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	4608      	mov	r0, r1
 8005996:	4611      	mov	r1, r2
 8005998:	461a      	mov	r2, r3
 800599a:	4603      	mov	r3, r0
 800599c:	807b      	strh	r3, [r7, #2]
 800599e:	460b      	mov	r3, r1
 80059a0:	707b      	strb	r3, [r7, #1]
 80059a2:	4613      	mov	r3, r2
 80059a4:	703b      	strb	r3, [r7, #0]

									//The_num_of_bytes
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)4, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80059a6:	8879      	ldrh	r1, [r7, #2]
 80059a8:	4b28      	ldr	r3, [pc, #160]	@ (8005a4c <Custom_I2C_RequestMemoryRead+0xc0>)
 80059aa:	9300      	str	r3, [sp, #0]
 80059ac:	2300      	movs	r3, #0
 80059ae:	2204      	movs	r2, #4
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f7ff ff5b 	bl	800586c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059b6:	69fa      	ldr	r2, [r7, #28]
 80059b8:	69b9      	ldr	r1, [r7, #24]
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7ff fd6a 	bl	8005494 <I2C_WaitOnTXISFlagUntilTimeout>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <Custom_I2C_RequestMemoryRead+0x3e>
  {
    return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e03b      	b.n	8005a42 <Custom_I2C_RequestMemoryRead+0xb6>
  }

// "mem_write"
  hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(command);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	787a      	ldrb	r2, [r7, #1]
 80059d0:	629a      	str	r2, [r3, #40]	@ 0x28


  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059d2:	69fa      	ldr	r2, [r7, #28]
 80059d4:	69b9      	ldr	r1, [r7, #24]
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f7ff fd5c 	bl	8005494 <I2C_WaitOnTXISFlagUntilTimeout>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <Custom_I2C_RequestMemoryRead+0x5a>
  {
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e02d      	b.n	8005a42 <Custom_I2C_RequestMemoryRead+0xb6>
  }
  hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(startAddress);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	783a      	ldrb	r2, [r7, #0]
 80059ec:	629a      	str	r2, [r3, #40]	@ 0x28


  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059ee:	69fa      	ldr	r2, [r7, #28]
 80059f0:	69b9      	ldr	r1, [r7, #24]
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f7ff fd4e 	bl	8005494 <I2C_WaitOnTXISFlagUntilTimeout>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <Custom_I2C_RequestMemoryRead+0x76>
  {
    return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e01f      	b.n	8005a42 <Custom_I2C_RequestMemoryRead+0xb6>
  }
  hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(addressStep);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	7c3a      	ldrb	r2, [r7, #16]
 8005a08:	629a      	str	r2, [r3, #40]	@ 0x28


  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a0a:	69fa      	ldr	r2, [r7, #28]
 8005a0c:	69b9      	ldr	r1, [r7, #24]
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f7ff fd40 	bl	8005494 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d001      	beq.n	8005a1e <Custom_I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e011      	b.n	8005a42 <Custom_I2C_RequestMemoryRead+0xb6>
  }
  hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(nMemAddressRead);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	7d3a      	ldrb	r2, [r7, #20]
 8005a24:	629a      	str	r2, [r3, #40]	@ 0x28
//

  /* Wait until [Transfer Complete] flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	2140      	movs	r1, #64	@ 0x40
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f7ff fce0 	bl	80053f6 <I2C_WaitOnFlagUntilTimeout>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d001      	beq.n	8005a40 <Custom_I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e000      	b.n	8005a42 <Custom_I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3708      	adds	r7, #8
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	80002000 	.word	0x80002000

08005a50 <Custom_HAL_I2C_Mem_Read>:


HAL_StatusTypeDef Custom_HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
										  uint8_t command, uint8_t startAddress, uint8_t addressStep, uint8_t nMemAddressRead,
										  uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b088      	sub	sp, #32
 8005a54:	af04      	add	r7, sp, #16
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	4608      	mov	r0, r1
 8005a5a:	4611      	mov	r1, r2
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	4603      	mov	r3, r0
 8005a60:	807b      	strh	r3, [r7, #2]
 8005a62:	460b      	mov	r3, r1
 8005a64:	707b      	strb	r3, [r7, #1]
 8005a66:	4613      	mov	r3, r2
 8005a68:	703b      	strb	r3, [r7, #0]
  uint32_t tickstart;

  /* Check the parameters */
  //assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b20      	cmp	r3, #32
 8005a74:	f040 8101 	bne.w	8005c7a <Custom_HAL_I2C_Mem_Read+0x22a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a78:	6a3b      	ldr	r3, [r7, #32]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d002      	beq.n	8005a84 <Custom_HAL_I2C_Mem_Read+0x34>
 8005a7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d105      	bne.n	8005a90 <Custom_HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a8a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e0f5      	b.n	8005c7c <Custom_HAL_I2C_Mem_Read+0x22c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d101      	bne.n	8005a9e <Custom_HAL_I2C_Mem_Read+0x4e>
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	e0ee      	b.n	8005c7c <Custom_HAL_I2C_Mem_Read+0x22c>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005aa6:	f7fd fa4f 	bl	8002f48 <HAL_GetTick>
 8005aaa:	60f8      	str	r0, [r7, #12]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	2319      	movs	r3, #25
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f7ff fc9c 	bl	80053f6 <I2C_WaitOnFlagUntilTimeout>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <Custom_HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e0d9      	b.n	8005c7c <Custom_HAL_I2C_Mem_Read+0x22c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2222      	movs	r2, #34	@ 0x22
 8005acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2240      	movs	r2, #64	@ 0x40
 8005ad4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a3a      	ldr	r2, [r7, #32]
 8005ae2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005ae8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if(Custom_I2C_RequestMemoryRead(hi2c, DevAddress,
 8005af0:	7838      	ldrb	r0, [r7, #0]
 8005af2:	787a      	ldrb	r2, [r7, #1]
 8005af4:	8879      	ldrh	r1, [r7, #2]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	9303      	str	r3, [sp, #12]
 8005afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005afc:	9302      	str	r3, [sp, #8]
 8005afe:	7f3b      	ldrb	r3, [r7, #28]
 8005b00:	9301      	str	r3, [sp, #4]
 8005b02:	7e3b      	ldrb	r3, [r7, #24]
 8005b04:	9300      	str	r3, [sp, #0]
 8005b06:	4603      	mov	r3, r0
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f7ff ff3f 	bl	800598c <Custom_I2C_RequestMemoryRead>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d005      	beq.n	8005b20 <Custom_HAL_I2C_Mem_Read+0xd0>
									addressStep, nMemAddressRead,

									Timeout, tickstart) != HAL_OK)
    {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e0ad      	b.n	8005c7c <Custom_HAL_I2C_Mem_Read+0x22c>
    }


    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	2bff      	cmp	r3, #255	@ 0xff
 8005b28:	d90e      	bls.n	8005b48 <Custom_HAL_I2C_Mem_Read+0xf8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	22ff      	movs	r2, #255	@ 0xff
 8005b2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b34:	b2da      	uxtb	r2, r3
 8005b36:	8879      	ldrh	r1, [r7, #2]
 8005b38:	4b52      	ldr	r3, [pc, #328]	@ (8005c84 <Custom_HAL_I2C_Mem_Read+0x234>)
 8005b3a:	9300      	str	r3, [sp, #0]
 8005b3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f7ff fe93 	bl	800586c <I2C_TransferConfig>
 8005b46:	e00f      	b.n	8005b68 <Custom_HAL_I2C_Mem_Read+0x118>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	8879      	ldrh	r1, [r7, #2]
 8005b5a:	4b4a      	ldr	r3, [pc, #296]	@ (8005c84 <Custom_HAL_I2C_Mem_Read+0x234>)
 8005b5c:	9300      	str	r3, [sp, #0]
 8005b5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7ff fe82 	bl	800586c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	9300      	str	r3, [sp, #0]
 8005b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b6e:	2200      	movs	r2, #0
 8005b70:	2104      	movs	r1, #4
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7ff fc3f 	bl	80053f6 <I2C_WaitOnFlagUntilTimeout>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d001      	beq.n	8005b82 <Custom_HAL_I2C_Mem_Read+0x132>
      {
        return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e07c      	b.n	8005c7c <Custom_HAL_I2C_Mem_Read+0x22c>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b8c:	b2d2      	uxtb	r2, r2
 8005b8e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b94:	1c5a      	adds	r2, r3, #1
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	3b01      	subs	r3, #1
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d034      	beq.n	8005c28 <Custom_HAL_I2C_Mem_Read+0x1d8>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d130      	bne.n	8005c28 <Custom_HAL_I2C_Mem_Read+0x1d8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bcc:	2200      	movs	r2, #0
 8005bce:	2180      	movs	r1, #128	@ 0x80
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f7ff fc10 	bl	80053f6 <I2C_WaitOnFlagUntilTimeout>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d001      	beq.n	8005be0 <Custom_HAL_I2C_Mem_Read+0x190>
        {
          return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e04d      	b.n	8005c7c <Custom_HAL_I2C_Mem_Read+0x22c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	2bff      	cmp	r3, #255	@ 0xff
 8005be8:	d90e      	bls.n	8005c08 <Custom_HAL_I2C_Mem_Read+0x1b8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	22ff      	movs	r2, #255	@ 0xff
 8005bee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bf4:	b2da      	uxtb	r2, r3
 8005bf6:	8879      	ldrh	r1, [r7, #2]
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	9300      	str	r3, [sp, #0]
 8005bfc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f7ff fe33 	bl	800586c <I2C_TransferConfig>
 8005c06:	e00f      	b.n	8005c28 <Custom_HAL_I2C_Mem_Read+0x1d8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	8879      	ldrh	r1, [r7, #2]
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	9300      	str	r3, [sp, #0]
 8005c1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7ff fe22 	bl	800586c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d19a      	bne.n	8005b68 <Custom_HAL_I2C_Mem_Read+0x118>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f7ff fc73 	bl	8005522 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d001      	beq.n	8005c46 <Custom_HAL_I2C_Mem_Read+0x1f6>
    {
      return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e01a      	b.n	8005c7c <Custom_HAL_I2C_Mem_Read+0x22c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2220      	movs	r2, #32
 8005c4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	6859      	ldr	r1, [r3, #4]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	4b0b      	ldr	r3, [pc, #44]	@ (8005c88 <Custom_HAL_I2C_Mem_Read+0x238>)
 8005c5a:	400b      	ands	r3, r1
 8005c5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2220      	movs	r2, #32
 8005c62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005c76:	2300      	movs	r3, #0
 8005c78:	e000      	b.n	8005c7c <Custom_HAL_I2C_Mem_Read+0x22c>
  }
  else
  {
    return HAL_BUSY;
 8005c7a:	2302      	movs	r3, #2
  }
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3710      	adds	r7, #16
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	80002400 	.word	0x80002400
 8005c88:	fe00e800 	.word	0xfe00e800

08005c8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b20      	cmp	r3, #32
 8005ca0:	d138      	bne.n	8005d14 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d101      	bne.n	8005cb0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005cac:	2302      	movs	r3, #2
 8005cae:	e032      	b.n	8005d16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2224      	movs	r2, #36	@ 0x24
 8005cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f022 0201 	bic.w	r2, r2, #1
 8005cce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005cde:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6819      	ldr	r1, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	683a      	ldr	r2, [r7, #0]
 8005cec:	430a      	orrs	r2, r1
 8005cee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f042 0201 	orr.w	r2, r2, #1
 8005cfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2220      	movs	r2, #32
 8005d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005d10:	2300      	movs	r3, #0
 8005d12:	e000      	b.n	8005d16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005d14:	2302      	movs	r3, #2
  }
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b085      	sub	sp, #20
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
 8005d2a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	2b20      	cmp	r3, #32
 8005d36:	d139      	bne.n	8005dac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d101      	bne.n	8005d46 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005d42:	2302      	movs	r3, #2
 8005d44:	e033      	b.n	8005dae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2224      	movs	r2, #36	@ 0x24
 8005d52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f022 0201 	bic.w	r2, r2, #1
 8005d64:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005d74:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	021b      	lsls	r3, r3, #8
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 0201 	orr.w	r2, r2, #1
 8005d96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005da8:	2300      	movs	r3, #0
 8005daa:	e000      	b.n	8005dae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005dac:	2302      	movs	r3, #2
  }
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3714      	adds	r7, #20
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
	...

08005dbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005dc8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005dcc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005dce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005dd2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d102      	bne.n	8005de2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	f001 b823 	b.w	8006e28 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005de2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005de6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	f000 817d 	beq.w	80060f2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005df8:	4bbc      	ldr	r3, [pc, #752]	@ (80060ec <HAL_RCC_OscConfig+0x330>)
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	f003 030c 	and.w	r3, r3, #12
 8005e00:	2b04      	cmp	r3, #4
 8005e02:	d00c      	beq.n	8005e1e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005e04:	4bb9      	ldr	r3, [pc, #740]	@ (80060ec <HAL_RCC_OscConfig+0x330>)
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f003 030c 	and.w	r3, r3, #12
 8005e0c:	2b08      	cmp	r3, #8
 8005e0e:	d15c      	bne.n	8005eca <HAL_RCC_OscConfig+0x10e>
 8005e10:	4bb6      	ldr	r3, [pc, #728]	@ (80060ec <HAL_RCC_OscConfig+0x330>)
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e1c:	d155      	bne.n	8005eca <HAL_RCC_OscConfig+0x10e>
 8005e1e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005e22:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e26:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8005e2a:	fa93 f3a3 	rbit	r3, r3
 8005e2e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005e32:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e36:	fab3 f383 	clz	r3, r3
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	095b      	lsrs	r3, r3, #5
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	f043 0301 	orr.w	r3, r3, #1
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d102      	bne.n	8005e50 <HAL_RCC_OscConfig+0x94>
 8005e4a:	4ba8      	ldr	r3, [pc, #672]	@ (80060ec <HAL_RCC_OscConfig+0x330>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	e015      	b.n	8005e7c <HAL_RCC_OscConfig+0xc0>
 8005e50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005e54:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e58:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8005e5c:	fa93 f3a3 	rbit	r3, r3
 8005e60:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8005e64:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005e68:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8005e6c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8005e70:	fa93 f3a3 	rbit	r3, r3
 8005e74:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8005e78:	4b9c      	ldr	r3, [pc, #624]	@ (80060ec <HAL_RCC_OscConfig+0x330>)
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e7c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005e80:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8005e84:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8005e88:	fa92 f2a2 	rbit	r2, r2
 8005e8c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8005e90:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8005e94:	fab2 f282 	clz	r2, r2
 8005e98:	b2d2      	uxtb	r2, r2
 8005e9a:	f042 0220 	orr.w	r2, r2, #32
 8005e9e:	b2d2      	uxtb	r2, r2
 8005ea0:	f002 021f 	and.w	r2, r2, #31
 8005ea4:	2101      	movs	r1, #1
 8005ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8005eaa:	4013      	ands	r3, r2
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f000 811f 	beq.w	80060f0 <HAL_RCC_OscConfig+0x334>
 8005eb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005eb6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f040 8116 	bne.w	80060f0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	f000 bfaf 	b.w	8006e28 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005eca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ece:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005eda:	d106      	bne.n	8005eea <HAL_RCC_OscConfig+0x12e>
 8005edc:	4b83      	ldr	r3, [pc, #524]	@ (80060ec <HAL_RCC_OscConfig+0x330>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a82      	ldr	r2, [pc, #520]	@ (80060ec <HAL_RCC_OscConfig+0x330>)
 8005ee2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ee6:	6013      	str	r3, [r2, #0]
 8005ee8:	e036      	b.n	8005f58 <HAL_RCC_OscConfig+0x19c>
 8005eea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005eee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d10c      	bne.n	8005f14 <HAL_RCC_OscConfig+0x158>
 8005efa:	4b7c      	ldr	r3, [pc, #496]	@ (80060ec <HAL_RCC_OscConfig+0x330>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a7b      	ldr	r2, [pc, #492]	@ (80060ec <HAL_RCC_OscConfig+0x330>)
 8005f00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f04:	6013      	str	r3, [r2, #0]
 8005f06:	4b79      	ldr	r3, [pc, #484]	@ (80060ec <HAL_RCC_OscConfig+0x330>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a78      	ldr	r2, [pc, #480]	@ (80060ec <HAL_RCC_OscConfig+0x330>)
 8005f0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f10:	6013      	str	r3, [r2, #0]
 8005f12:	e021      	b.n	8005f58 <HAL_RCC_OscConfig+0x19c>
 8005f14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f24:	d10c      	bne.n	8005f40 <HAL_RCC_OscConfig+0x184>
 8005f26:	4b71      	ldr	r3, [pc, #452]	@ (80060ec <HAL_RCC_OscConfig+0x330>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a70      	ldr	r2, [pc, #448]	@ (80060ec <HAL_RCC_OscConfig+0x330>)
 8005f2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f30:	6013      	str	r3, [r2, #0]
 8005f32:	4b6e      	ldr	r3, [pc, #440]	@ (80060ec <HAL_RCC_OscConfig+0x330>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a6d      	ldr	r2, [pc, #436]	@ (80060ec <HAL_RCC_OscConfig+0x330>)
 8005f38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f3c:	6013      	str	r3, [r2, #0]
 8005f3e:	e00b      	b.n	8005f58 <HAL_RCC_OscConfig+0x19c>
 8005f40:	4b6a      	ldr	r3, [pc, #424]	@ (80060ec <HAL_RCC_OscConfig+0x330>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a69      	ldr	r2, [pc, #420]	@ (80060ec <HAL_RCC_OscConfig+0x330>)
 8005f46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f4a:	6013      	str	r3, [r2, #0]
 8005f4c:	4b67      	ldr	r3, [pc, #412]	@ (80060ec <HAL_RCC_OscConfig+0x330>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a66      	ldr	r2, [pc, #408]	@ (80060ec <HAL_RCC_OscConfig+0x330>)
 8005f52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f56:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005f58:	4b64      	ldr	r3, [pc, #400]	@ (80060ec <HAL_RCC_OscConfig+0x330>)
 8005f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f5c:	f023 020f 	bic.w	r2, r3, #15
 8005f60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f64:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	495f      	ldr	r1, [pc, #380]	@ (80060ec <HAL_RCC_OscConfig+0x330>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d059      	beq.n	8006036 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f82:	f7fc ffe1 	bl	8002f48 <HAL_GetTick>
 8005f86:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f8a:	e00a      	b.n	8005fa2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f8c:	f7fc ffdc 	bl	8002f48 <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	2b64      	cmp	r3, #100	@ 0x64
 8005f9a:	d902      	bls.n	8005fa2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	f000 bf43 	b.w	8006e28 <HAL_RCC_OscConfig+0x106c>
 8005fa2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005fa6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005faa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8005fae:	fa93 f3a3 	rbit	r3, r3
 8005fb2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8005fb6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fba:	fab3 f383 	clz	r3, r3
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	095b      	lsrs	r3, r3, #5
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	f043 0301 	orr.w	r3, r3, #1
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d102      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x218>
 8005fce:	4b47      	ldr	r3, [pc, #284]	@ (80060ec <HAL_RCC_OscConfig+0x330>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	e015      	b.n	8006000 <HAL_RCC_OscConfig+0x244>
 8005fd4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005fd8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fdc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8005fe0:	fa93 f3a3 	rbit	r3, r3
 8005fe4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8005fe8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005fec:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8005ff0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8005ff4:	fa93 f3a3 	rbit	r3, r3
 8005ff8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8005ffc:	4b3b      	ldr	r3, [pc, #236]	@ (80060ec <HAL_RCC_OscConfig+0x330>)
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006000:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006004:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8006008:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800600c:	fa92 f2a2 	rbit	r2, r2
 8006010:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8006014:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8006018:	fab2 f282 	clz	r2, r2
 800601c:	b2d2      	uxtb	r2, r2
 800601e:	f042 0220 	orr.w	r2, r2, #32
 8006022:	b2d2      	uxtb	r2, r2
 8006024:	f002 021f 	and.w	r2, r2, #31
 8006028:	2101      	movs	r1, #1
 800602a:	fa01 f202 	lsl.w	r2, r1, r2
 800602e:	4013      	ands	r3, r2
 8006030:	2b00      	cmp	r3, #0
 8006032:	d0ab      	beq.n	8005f8c <HAL_RCC_OscConfig+0x1d0>
 8006034:	e05d      	b.n	80060f2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006036:	f7fc ff87 	bl	8002f48 <HAL_GetTick>
 800603a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800603e:	e00a      	b.n	8006056 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006040:	f7fc ff82 	bl	8002f48 <HAL_GetTick>
 8006044:	4602      	mov	r2, r0
 8006046:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	2b64      	cmp	r3, #100	@ 0x64
 800604e:	d902      	bls.n	8006056 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	f000 bee9 	b.w	8006e28 <HAL_RCC_OscConfig+0x106c>
 8006056:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800605a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800605e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8006062:	fa93 f3a3 	rbit	r3, r3
 8006066:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800606a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800606e:	fab3 f383 	clz	r3, r3
 8006072:	b2db      	uxtb	r3, r3
 8006074:	095b      	lsrs	r3, r3, #5
 8006076:	b2db      	uxtb	r3, r3
 8006078:	f043 0301 	orr.w	r3, r3, #1
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b01      	cmp	r3, #1
 8006080:	d102      	bne.n	8006088 <HAL_RCC_OscConfig+0x2cc>
 8006082:	4b1a      	ldr	r3, [pc, #104]	@ (80060ec <HAL_RCC_OscConfig+0x330>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	e015      	b.n	80060b4 <HAL_RCC_OscConfig+0x2f8>
 8006088:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800608c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006090:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8006094:	fa93 f3a3 	rbit	r3, r3
 8006098:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800609c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80060a0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80060a4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80060a8:	fa93 f3a3 	rbit	r3, r3
 80060ac:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80060b0:	4b0e      	ldr	r3, [pc, #56]	@ (80060ec <HAL_RCC_OscConfig+0x330>)
 80060b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80060b8:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80060bc:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80060c0:	fa92 f2a2 	rbit	r2, r2
 80060c4:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80060c8:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80060cc:	fab2 f282 	clz	r2, r2
 80060d0:	b2d2      	uxtb	r2, r2
 80060d2:	f042 0220 	orr.w	r2, r2, #32
 80060d6:	b2d2      	uxtb	r2, r2
 80060d8:	f002 021f 	and.w	r2, r2, #31
 80060dc:	2101      	movs	r1, #1
 80060de:	fa01 f202 	lsl.w	r2, r1, r2
 80060e2:	4013      	ands	r3, r2
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1ab      	bne.n	8006040 <HAL_RCC_OscConfig+0x284>
 80060e8:	e003      	b.n	80060f2 <HAL_RCC_OscConfig+0x336>
 80060ea:	bf00      	nop
 80060ec:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0302 	and.w	r3, r3, #2
 8006102:	2b00      	cmp	r3, #0
 8006104:	f000 817d 	beq.w	8006402 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006108:	4ba6      	ldr	r3, [pc, #664]	@ (80063a4 <HAL_RCC_OscConfig+0x5e8>)
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f003 030c 	and.w	r3, r3, #12
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00b      	beq.n	800612c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006114:	4ba3      	ldr	r3, [pc, #652]	@ (80063a4 <HAL_RCC_OscConfig+0x5e8>)
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f003 030c 	and.w	r3, r3, #12
 800611c:	2b08      	cmp	r3, #8
 800611e:	d172      	bne.n	8006206 <HAL_RCC_OscConfig+0x44a>
 8006120:	4ba0      	ldr	r3, [pc, #640]	@ (80063a4 <HAL_RCC_OscConfig+0x5e8>)
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d16c      	bne.n	8006206 <HAL_RCC_OscConfig+0x44a>
 800612c:	2302      	movs	r3, #2
 800612e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006132:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8006136:	fa93 f3a3 	rbit	r3, r3
 800613a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800613e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006142:	fab3 f383 	clz	r3, r3
 8006146:	b2db      	uxtb	r3, r3
 8006148:	095b      	lsrs	r3, r3, #5
 800614a:	b2db      	uxtb	r3, r3
 800614c:	f043 0301 	orr.w	r3, r3, #1
 8006150:	b2db      	uxtb	r3, r3
 8006152:	2b01      	cmp	r3, #1
 8006154:	d102      	bne.n	800615c <HAL_RCC_OscConfig+0x3a0>
 8006156:	4b93      	ldr	r3, [pc, #588]	@ (80063a4 <HAL_RCC_OscConfig+0x5e8>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	e013      	b.n	8006184 <HAL_RCC_OscConfig+0x3c8>
 800615c:	2302      	movs	r3, #2
 800615e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006162:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8006166:	fa93 f3a3 	rbit	r3, r3
 800616a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800616e:	2302      	movs	r3, #2
 8006170:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8006174:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006178:	fa93 f3a3 	rbit	r3, r3
 800617c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8006180:	4b88      	ldr	r3, [pc, #544]	@ (80063a4 <HAL_RCC_OscConfig+0x5e8>)
 8006182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006184:	2202      	movs	r2, #2
 8006186:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800618a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800618e:	fa92 f2a2 	rbit	r2, r2
 8006192:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8006196:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800619a:	fab2 f282 	clz	r2, r2
 800619e:	b2d2      	uxtb	r2, r2
 80061a0:	f042 0220 	orr.w	r2, r2, #32
 80061a4:	b2d2      	uxtb	r2, r2
 80061a6:	f002 021f 	and.w	r2, r2, #31
 80061aa:	2101      	movs	r1, #1
 80061ac:	fa01 f202 	lsl.w	r2, r1, r2
 80061b0:	4013      	ands	r3, r2
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00a      	beq.n	80061cc <HAL_RCC_OscConfig+0x410>
 80061b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80061ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d002      	beq.n	80061cc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	f000 be2e 	b.w	8006e28 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061cc:	4b75      	ldr	r3, [pc, #468]	@ (80063a4 <HAL_RCC_OscConfig+0x5e8>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80061d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80061d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	695b      	ldr	r3, [r3, #20]
 80061e0:	21f8      	movs	r1, #248	@ 0xf8
 80061e2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061e6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80061ea:	fa91 f1a1 	rbit	r1, r1
 80061ee:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80061f2:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80061f6:	fab1 f181 	clz	r1, r1
 80061fa:	b2c9      	uxtb	r1, r1
 80061fc:	408b      	lsls	r3, r1
 80061fe:	4969      	ldr	r1, [pc, #420]	@ (80063a4 <HAL_RCC_OscConfig+0x5e8>)
 8006200:	4313      	orrs	r3, r2
 8006202:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006204:	e0fd      	b.n	8006402 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006206:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800620a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	2b00      	cmp	r3, #0
 8006214:	f000 8088 	beq.w	8006328 <HAL_RCC_OscConfig+0x56c>
 8006218:	2301      	movs	r3, #1
 800621a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800621e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8006222:	fa93 f3a3 	rbit	r3, r3
 8006226:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800622a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800622e:	fab3 f383 	clz	r3, r3
 8006232:	b2db      	uxtb	r3, r3
 8006234:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006238:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	461a      	mov	r2, r3
 8006240:	2301      	movs	r3, #1
 8006242:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006244:	f7fc fe80 	bl	8002f48 <HAL_GetTick>
 8006248:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800624c:	e00a      	b.n	8006264 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800624e:	f7fc fe7b 	bl	8002f48 <HAL_GetTick>
 8006252:	4602      	mov	r2, r0
 8006254:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	2b02      	cmp	r3, #2
 800625c:	d902      	bls.n	8006264 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	f000 bde2 	b.w	8006e28 <HAL_RCC_OscConfig+0x106c>
 8006264:	2302      	movs	r3, #2
 8006266:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800626a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800626e:	fa93 f3a3 	rbit	r3, r3
 8006272:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8006276:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800627a:	fab3 f383 	clz	r3, r3
 800627e:	b2db      	uxtb	r3, r3
 8006280:	095b      	lsrs	r3, r3, #5
 8006282:	b2db      	uxtb	r3, r3
 8006284:	f043 0301 	orr.w	r3, r3, #1
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2b01      	cmp	r3, #1
 800628c:	d102      	bne.n	8006294 <HAL_RCC_OscConfig+0x4d8>
 800628e:	4b45      	ldr	r3, [pc, #276]	@ (80063a4 <HAL_RCC_OscConfig+0x5e8>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	e013      	b.n	80062bc <HAL_RCC_OscConfig+0x500>
 8006294:	2302      	movs	r3, #2
 8006296:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800629a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800629e:	fa93 f3a3 	rbit	r3, r3
 80062a2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80062a6:	2302      	movs	r3, #2
 80062a8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80062ac:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80062b0:	fa93 f3a3 	rbit	r3, r3
 80062b4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80062b8:	4b3a      	ldr	r3, [pc, #232]	@ (80063a4 <HAL_RCC_OscConfig+0x5e8>)
 80062ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062bc:	2202      	movs	r2, #2
 80062be:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80062c2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80062c6:	fa92 f2a2 	rbit	r2, r2
 80062ca:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80062ce:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80062d2:	fab2 f282 	clz	r2, r2
 80062d6:	b2d2      	uxtb	r2, r2
 80062d8:	f042 0220 	orr.w	r2, r2, #32
 80062dc:	b2d2      	uxtb	r2, r2
 80062de:	f002 021f 	and.w	r2, r2, #31
 80062e2:	2101      	movs	r1, #1
 80062e4:	fa01 f202 	lsl.w	r2, r1, r2
 80062e8:	4013      	ands	r3, r2
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d0af      	beq.n	800624e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062ee:	4b2d      	ldr	r3, [pc, #180]	@ (80063a4 <HAL_RCC_OscConfig+0x5e8>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80062f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80062fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	21f8      	movs	r1, #248	@ 0xf8
 8006304:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006308:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800630c:	fa91 f1a1 	rbit	r1, r1
 8006310:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8006314:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8006318:	fab1 f181 	clz	r1, r1
 800631c:	b2c9      	uxtb	r1, r1
 800631e:	408b      	lsls	r3, r1
 8006320:	4920      	ldr	r1, [pc, #128]	@ (80063a4 <HAL_RCC_OscConfig+0x5e8>)
 8006322:	4313      	orrs	r3, r2
 8006324:	600b      	str	r3, [r1, #0]
 8006326:	e06c      	b.n	8006402 <HAL_RCC_OscConfig+0x646>
 8006328:	2301      	movs	r3, #1
 800632a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800632e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8006332:	fa93 f3a3 	rbit	r3, r3
 8006336:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800633a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800633e:	fab3 f383 	clz	r3, r3
 8006342:	b2db      	uxtb	r3, r3
 8006344:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006348:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	461a      	mov	r2, r3
 8006350:	2300      	movs	r3, #0
 8006352:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006354:	f7fc fdf8 	bl	8002f48 <HAL_GetTick>
 8006358:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800635c:	e00a      	b.n	8006374 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800635e:	f7fc fdf3 	bl	8002f48 <HAL_GetTick>
 8006362:	4602      	mov	r2, r0
 8006364:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	2b02      	cmp	r3, #2
 800636c:	d902      	bls.n	8006374 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	f000 bd5a 	b.w	8006e28 <HAL_RCC_OscConfig+0x106c>
 8006374:	2302      	movs	r3, #2
 8006376:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800637a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800637e:	fa93 f3a3 	rbit	r3, r3
 8006382:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8006386:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800638a:	fab3 f383 	clz	r3, r3
 800638e:	b2db      	uxtb	r3, r3
 8006390:	095b      	lsrs	r3, r3, #5
 8006392:	b2db      	uxtb	r3, r3
 8006394:	f043 0301 	orr.w	r3, r3, #1
 8006398:	b2db      	uxtb	r3, r3
 800639a:	2b01      	cmp	r3, #1
 800639c:	d104      	bne.n	80063a8 <HAL_RCC_OscConfig+0x5ec>
 800639e:	4b01      	ldr	r3, [pc, #4]	@ (80063a4 <HAL_RCC_OscConfig+0x5e8>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	e015      	b.n	80063d0 <HAL_RCC_OscConfig+0x614>
 80063a4:	40021000 	.word	0x40021000
 80063a8:	2302      	movs	r3, #2
 80063aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80063b2:	fa93 f3a3 	rbit	r3, r3
 80063b6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80063ba:	2302      	movs	r3, #2
 80063bc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80063c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80063c4:	fa93 f3a3 	rbit	r3, r3
 80063c8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80063cc:	4bc8      	ldr	r3, [pc, #800]	@ (80066f0 <HAL_RCC_OscConfig+0x934>)
 80063ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063d0:	2202      	movs	r2, #2
 80063d2:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80063d6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80063da:	fa92 f2a2 	rbit	r2, r2
 80063de:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80063e2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80063e6:	fab2 f282 	clz	r2, r2
 80063ea:	b2d2      	uxtb	r2, r2
 80063ec:	f042 0220 	orr.w	r2, r2, #32
 80063f0:	b2d2      	uxtb	r2, r2
 80063f2:	f002 021f 	and.w	r2, r2, #31
 80063f6:	2101      	movs	r1, #1
 80063f8:	fa01 f202 	lsl.w	r2, r1, r2
 80063fc:	4013      	ands	r3, r2
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1ad      	bne.n	800635e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006402:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006406:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0308 	and.w	r3, r3, #8
 8006412:	2b00      	cmp	r3, #0
 8006414:	f000 8110 	beq.w	8006638 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006418:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800641c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d079      	beq.n	800651c <HAL_RCC_OscConfig+0x760>
 8006428:	2301      	movs	r3, #1
 800642a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800642e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006432:	fa93 f3a3 	rbit	r3, r3
 8006436:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800643a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800643e:	fab3 f383 	clz	r3, r3
 8006442:	b2db      	uxtb	r3, r3
 8006444:	461a      	mov	r2, r3
 8006446:	4bab      	ldr	r3, [pc, #684]	@ (80066f4 <HAL_RCC_OscConfig+0x938>)
 8006448:	4413      	add	r3, r2
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	461a      	mov	r2, r3
 800644e:	2301      	movs	r3, #1
 8006450:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006452:	f7fc fd79 	bl	8002f48 <HAL_GetTick>
 8006456:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800645a:	e00a      	b.n	8006472 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800645c:	f7fc fd74 	bl	8002f48 <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	2b02      	cmp	r3, #2
 800646a:	d902      	bls.n	8006472 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	f000 bcdb 	b.w	8006e28 <HAL_RCC_OscConfig+0x106c>
 8006472:	2302      	movs	r3, #2
 8006474:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006478:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800647c:	fa93 f3a3 	rbit	r3, r3
 8006480:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006484:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006488:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800648c:	2202      	movs	r2, #2
 800648e:	601a      	str	r2, [r3, #0]
 8006490:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006494:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	fa93 f2a3 	rbit	r2, r3
 800649e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064a6:	601a      	str	r2, [r3, #0]
 80064a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064b0:	2202      	movs	r2, #2
 80064b2:	601a      	str	r2, [r3, #0]
 80064b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	fa93 f2a3 	rbit	r2, r3
 80064c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064c6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80064ca:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064cc:	4b88      	ldr	r3, [pc, #544]	@ (80066f0 <HAL_RCC_OscConfig+0x934>)
 80064ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80064d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064d4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80064d8:	2102      	movs	r1, #2
 80064da:	6019      	str	r1, [r3, #0]
 80064dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064e0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	fa93 f1a3 	rbit	r1, r3
 80064ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064ee:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80064f2:	6019      	str	r1, [r3, #0]
  return result;
 80064f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064f8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	fab3 f383 	clz	r3, r3
 8006502:	b2db      	uxtb	r3, r3
 8006504:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006508:	b2db      	uxtb	r3, r3
 800650a:	f003 031f 	and.w	r3, r3, #31
 800650e:	2101      	movs	r1, #1
 8006510:	fa01 f303 	lsl.w	r3, r1, r3
 8006514:	4013      	ands	r3, r2
 8006516:	2b00      	cmp	r3, #0
 8006518:	d0a0      	beq.n	800645c <HAL_RCC_OscConfig+0x6a0>
 800651a:	e08d      	b.n	8006638 <HAL_RCC_OscConfig+0x87c>
 800651c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006520:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006524:	2201      	movs	r2, #1
 8006526:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006528:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800652c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	fa93 f2a3 	rbit	r2, r3
 8006536:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800653a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800653e:	601a      	str	r2, [r3, #0]
  return result;
 8006540:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006544:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8006548:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800654a:	fab3 f383 	clz	r3, r3
 800654e:	b2db      	uxtb	r3, r3
 8006550:	461a      	mov	r2, r3
 8006552:	4b68      	ldr	r3, [pc, #416]	@ (80066f4 <HAL_RCC_OscConfig+0x938>)
 8006554:	4413      	add	r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	461a      	mov	r2, r3
 800655a:	2300      	movs	r3, #0
 800655c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800655e:	f7fc fcf3 	bl	8002f48 <HAL_GetTick>
 8006562:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006566:	e00a      	b.n	800657e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006568:	f7fc fcee 	bl	8002f48 <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	2b02      	cmp	r3, #2
 8006576:	d902      	bls.n	800657e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	f000 bc55 	b.w	8006e28 <HAL_RCC_OscConfig+0x106c>
 800657e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006582:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8006586:	2202      	movs	r2, #2
 8006588:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800658a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800658e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	fa93 f2a3 	rbit	r2, r3
 8006598:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800659c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80065a0:	601a      	str	r2, [r3, #0]
 80065a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065a6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80065aa:	2202      	movs	r2, #2
 80065ac:	601a      	str	r2, [r3, #0]
 80065ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065b2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	fa93 f2a3 	rbit	r2, r3
 80065bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80065c4:	601a      	str	r2, [r3, #0]
 80065c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065ca:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80065ce:	2202      	movs	r2, #2
 80065d0:	601a      	str	r2, [r3, #0]
 80065d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065d6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	fa93 f2a3 	rbit	r2, r3
 80065e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065e4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80065e8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065ea:	4b41      	ldr	r3, [pc, #260]	@ (80066f0 <HAL_RCC_OscConfig+0x934>)
 80065ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80065ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065f2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80065f6:	2102      	movs	r1, #2
 80065f8:	6019      	str	r1, [r3, #0]
 80065fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065fe:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	fa93 f1a3 	rbit	r1, r3
 8006608:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800660c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8006610:	6019      	str	r1, [r3, #0]
  return result;
 8006612:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006616:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	fab3 f383 	clz	r3, r3
 8006620:	b2db      	uxtb	r3, r3
 8006622:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006626:	b2db      	uxtb	r3, r3
 8006628:	f003 031f 	and.w	r3, r3, #31
 800662c:	2101      	movs	r1, #1
 800662e:	fa01 f303 	lsl.w	r3, r1, r3
 8006632:	4013      	ands	r3, r2
 8006634:	2b00      	cmp	r3, #0
 8006636:	d197      	bne.n	8006568 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006638:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800663c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0304 	and.w	r3, r3, #4
 8006648:	2b00      	cmp	r3, #0
 800664a:	f000 81a1 	beq.w	8006990 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800664e:	2300      	movs	r3, #0
 8006650:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006654:	4b26      	ldr	r3, [pc, #152]	@ (80066f0 <HAL_RCC_OscConfig+0x934>)
 8006656:	69db      	ldr	r3, [r3, #28]
 8006658:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d116      	bne.n	800668e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006660:	4b23      	ldr	r3, [pc, #140]	@ (80066f0 <HAL_RCC_OscConfig+0x934>)
 8006662:	69db      	ldr	r3, [r3, #28]
 8006664:	4a22      	ldr	r2, [pc, #136]	@ (80066f0 <HAL_RCC_OscConfig+0x934>)
 8006666:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800666a:	61d3      	str	r3, [r2, #28]
 800666c:	4b20      	ldr	r3, [pc, #128]	@ (80066f0 <HAL_RCC_OscConfig+0x934>)
 800666e:	69db      	ldr	r3, [r3, #28]
 8006670:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8006674:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006678:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800667c:	601a      	str	r2, [r3, #0]
 800667e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006682:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8006686:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8006688:	2301      	movs	r3, #1
 800668a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800668e:	4b1a      	ldr	r3, [pc, #104]	@ (80066f8 <HAL_RCC_OscConfig+0x93c>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006696:	2b00      	cmp	r3, #0
 8006698:	d11a      	bne.n	80066d0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800669a:	4b17      	ldr	r3, [pc, #92]	@ (80066f8 <HAL_RCC_OscConfig+0x93c>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a16      	ldr	r2, [pc, #88]	@ (80066f8 <HAL_RCC_OscConfig+0x93c>)
 80066a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066a4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066a6:	f7fc fc4f 	bl	8002f48 <HAL_GetTick>
 80066aa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066ae:	e009      	b.n	80066c4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066b0:	f7fc fc4a 	bl	8002f48 <HAL_GetTick>
 80066b4:	4602      	mov	r2, r0
 80066b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	2b64      	cmp	r3, #100	@ 0x64
 80066be:	d901      	bls.n	80066c4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80066c0:	2303      	movs	r3, #3
 80066c2:	e3b1      	b.n	8006e28 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066c4:	4b0c      	ldr	r3, [pc, #48]	@ (80066f8 <HAL_RCC_OscConfig+0x93c>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d0ef      	beq.n	80066b0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d10d      	bne.n	80066fc <HAL_RCC_OscConfig+0x940>
 80066e0:	4b03      	ldr	r3, [pc, #12]	@ (80066f0 <HAL_RCC_OscConfig+0x934>)
 80066e2:	6a1b      	ldr	r3, [r3, #32]
 80066e4:	4a02      	ldr	r2, [pc, #8]	@ (80066f0 <HAL_RCC_OscConfig+0x934>)
 80066e6:	f043 0301 	orr.w	r3, r3, #1
 80066ea:	6213      	str	r3, [r2, #32]
 80066ec:	e03c      	b.n	8006768 <HAL_RCC_OscConfig+0x9ac>
 80066ee:	bf00      	nop
 80066f0:	40021000 	.word	0x40021000
 80066f4:	10908120 	.word	0x10908120
 80066f8:	40007000 	.word	0x40007000
 80066fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006700:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10c      	bne.n	8006726 <HAL_RCC_OscConfig+0x96a>
 800670c:	4bc1      	ldr	r3, [pc, #772]	@ (8006a14 <HAL_RCC_OscConfig+0xc58>)
 800670e:	6a1b      	ldr	r3, [r3, #32]
 8006710:	4ac0      	ldr	r2, [pc, #768]	@ (8006a14 <HAL_RCC_OscConfig+0xc58>)
 8006712:	f023 0301 	bic.w	r3, r3, #1
 8006716:	6213      	str	r3, [r2, #32]
 8006718:	4bbe      	ldr	r3, [pc, #760]	@ (8006a14 <HAL_RCC_OscConfig+0xc58>)
 800671a:	6a1b      	ldr	r3, [r3, #32]
 800671c:	4abd      	ldr	r2, [pc, #756]	@ (8006a14 <HAL_RCC_OscConfig+0xc58>)
 800671e:	f023 0304 	bic.w	r3, r3, #4
 8006722:	6213      	str	r3, [r2, #32]
 8006724:	e020      	b.n	8006768 <HAL_RCC_OscConfig+0x9ac>
 8006726:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800672a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	2b05      	cmp	r3, #5
 8006734:	d10c      	bne.n	8006750 <HAL_RCC_OscConfig+0x994>
 8006736:	4bb7      	ldr	r3, [pc, #732]	@ (8006a14 <HAL_RCC_OscConfig+0xc58>)
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	4ab6      	ldr	r2, [pc, #728]	@ (8006a14 <HAL_RCC_OscConfig+0xc58>)
 800673c:	f043 0304 	orr.w	r3, r3, #4
 8006740:	6213      	str	r3, [r2, #32]
 8006742:	4bb4      	ldr	r3, [pc, #720]	@ (8006a14 <HAL_RCC_OscConfig+0xc58>)
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	4ab3      	ldr	r2, [pc, #716]	@ (8006a14 <HAL_RCC_OscConfig+0xc58>)
 8006748:	f043 0301 	orr.w	r3, r3, #1
 800674c:	6213      	str	r3, [r2, #32]
 800674e:	e00b      	b.n	8006768 <HAL_RCC_OscConfig+0x9ac>
 8006750:	4bb0      	ldr	r3, [pc, #704]	@ (8006a14 <HAL_RCC_OscConfig+0xc58>)
 8006752:	6a1b      	ldr	r3, [r3, #32]
 8006754:	4aaf      	ldr	r2, [pc, #700]	@ (8006a14 <HAL_RCC_OscConfig+0xc58>)
 8006756:	f023 0301 	bic.w	r3, r3, #1
 800675a:	6213      	str	r3, [r2, #32]
 800675c:	4bad      	ldr	r3, [pc, #692]	@ (8006a14 <HAL_RCC_OscConfig+0xc58>)
 800675e:	6a1b      	ldr	r3, [r3, #32]
 8006760:	4aac      	ldr	r2, [pc, #688]	@ (8006a14 <HAL_RCC_OscConfig+0xc58>)
 8006762:	f023 0304 	bic.w	r3, r3, #4
 8006766:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006768:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800676c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 8081 	beq.w	800687c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800677a:	f7fc fbe5 	bl	8002f48 <HAL_GetTick>
 800677e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006782:	e00b      	b.n	800679c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006784:	f7fc fbe0 	bl	8002f48 <HAL_GetTick>
 8006788:	4602      	mov	r2, r0
 800678a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006794:	4293      	cmp	r3, r2
 8006796:	d901      	bls.n	800679c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e345      	b.n	8006e28 <HAL_RCC_OscConfig+0x106c>
 800679c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067a0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80067a4:	2202      	movs	r2, #2
 80067a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067ac:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	fa93 f2a3 	rbit	r2, r3
 80067b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067ba:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80067be:	601a      	str	r2, [r3, #0]
 80067c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067c4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80067c8:	2202      	movs	r2, #2
 80067ca:	601a      	str	r2, [r3, #0]
 80067cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067d0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	fa93 f2a3 	rbit	r2, r3
 80067da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067de:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80067e2:	601a      	str	r2, [r3, #0]
  return result;
 80067e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067e8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80067ec:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067ee:	fab3 f383 	clz	r3, r3
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	095b      	lsrs	r3, r3, #5
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	f043 0302 	orr.w	r3, r3, #2
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d102      	bne.n	8006808 <HAL_RCC_OscConfig+0xa4c>
 8006802:	4b84      	ldr	r3, [pc, #528]	@ (8006a14 <HAL_RCC_OscConfig+0xc58>)
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	e013      	b.n	8006830 <HAL_RCC_OscConfig+0xa74>
 8006808:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800680c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8006810:	2202      	movs	r2, #2
 8006812:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006814:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006818:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	fa93 f2a3 	rbit	r2, r3
 8006822:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006826:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800682a:	601a      	str	r2, [r3, #0]
 800682c:	4b79      	ldr	r3, [pc, #484]	@ (8006a14 <HAL_RCC_OscConfig+0xc58>)
 800682e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006830:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006834:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8006838:	2102      	movs	r1, #2
 800683a:	6011      	str	r1, [r2, #0]
 800683c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006840:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8006844:	6812      	ldr	r2, [r2, #0]
 8006846:	fa92 f1a2 	rbit	r1, r2
 800684a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800684e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8006852:	6011      	str	r1, [r2, #0]
  return result;
 8006854:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006858:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800685c:	6812      	ldr	r2, [r2, #0]
 800685e:	fab2 f282 	clz	r2, r2
 8006862:	b2d2      	uxtb	r2, r2
 8006864:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006868:	b2d2      	uxtb	r2, r2
 800686a:	f002 021f 	and.w	r2, r2, #31
 800686e:	2101      	movs	r1, #1
 8006870:	fa01 f202 	lsl.w	r2, r1, r2
 8006874:	4013      	ands	r3, r2
 8006876:	2b00      	cmp	r3, #0
 8006878:	d084      	beq.n	8006784 <HAL_RCC_OscConfig+0x9c8>
 800687a:	e07f      	b.n	800697c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800687c:	f7fc fb64 	bl	8002f48 <HAL_GetTick>
 8006880:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006884:	e00b      	b.n	800689e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006886:	f7fc fb5f 	bl	8002f48 <HAL_GetTick>
 800688a:	4602      	mov	r2, r0
 800688c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006896:	4293      	cmp	r3, r2
 8006898:	d901      	bls.n	800689e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800689a:	2303      	movs	r3, #3
 800689c:	e2c4      	b.n	8006e28 <HAL_RCC_OscConfig+0x106c>
 800689e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068a2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80068a6:	2202      	movs	r2, #2
 80068a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068ae:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	fa93 f2a3 	rbit	r2, r3
 80068b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068bc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80068c0:	601a      	str	r2, [r3, #0]
 80068c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068c6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80068ca:	2202      	movs	r2, #2
 80068cc:	601a      	str	r2, [r3, #0]
 80068ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068d2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	fa93 f2a3 	rbit	r2, r3
 80068dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068e0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80068e4:	601a      	str	r2, [r3, #0]
  return result;
 80068e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068ea:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80068ee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068f0:	fab3 f383 	clz	r3, r3
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	095b      	lsrs	r3, r3, #5
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	f043 0302 	orr.w	r3, r3, #2
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	2b02      	cmp	r3, #2
 8006902:	d102      	bne.n	800690a <HAL_RCC_OscConfig+0xb4e>
 8006904:	4b43      	ldr	r3, [pc, #268]	@ (8006a14 <HAL_RCC_OscConfig+0xc58>)
 8006906:	6a1b      	ldr	r3, [r3, #32]
 8006908:	e013      	b.n	8006932 <HAL_RCC_OscConfig+0xb76>
 800690a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800690e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8006912:	2202      	movs	r2, #2
 8006914:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006916:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800691a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	fa93 f2a3 	rbit	r2, r3
 8006924:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006928:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800692c:	601a      	str	r2, [r3, #0]
 800692e:	4b39      	ldr	r3, [pc, #228]	@ (8006a14 <HAL_RCC_OscConfig+0xc58>)
 8006930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006932:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006936:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800693a:	2102      	movs	r1, #2
 800693c:	6011      	str	r1, [r2, #0]
 800693e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006942:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8006946:	6812      	ldr	r2, [r2, #0]
 8006948:	fa92 f1a2 	rbit	r1, r2
 800694c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006950:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8006954:	6011      	str	r1, [r2, #0]
  return result;
 8006956:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800695a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800695e:	6812      	ldr	r2, [r2, #0]
 8006960:	fab2 f282 	clz	r2, r2
 8006964:	b2d2      	uxtb	r2, r2
 8006966:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800696a:	b2d2      	uxtb	r2, r2
 800696c:	f002 021f 	and.w	r2, r2, #31
 8006970:	2101      	movs	r1, #1
 8006972:	fa01 f202 	lsl.w	r2, r1, r2
 8006976:	4013      	ands	r3, r2
 8006978:	2b00      	cmp	r3, #0
 800697a:	d184      	bne.n	8006886 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800697c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8006980:	2b01      	cmp	r3, #1
 8006982:	d105      	bne.n	8006990 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006984:	4b23      	ldr	r3, [pc, #140]	@ (8006a14 <HAL_RCC_OscConfig+0xc58>)
 8006986:	69db      	ldr	r3, [r3, #28]
 8006988:	4a22      	ldr	r2, [pc, #136]	@ (8006a14 <HAL_RCC_OscConfig+0xc58>)
 800698a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800698e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006990:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006994:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	69db      	ldr	r3, [r3, #28]
 800699c:	2b00      	cmp	r3, #0
 800699e:	f000 8242 	beq.w	8006e26 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80069a2:	4b1c      	ldr	r3, [pc, #112]	@ (8006a14 <HAL_RCC_OscConfig+0xc58>)
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	f003 030c 	and.w	r3, r3, #12
 80069aa:	2b08      	cmp	r3, #8
 80069ac:	f000 8213 	beq.w	8006dd6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	69db      	ldr	r3, [r3, #28]
 80069bc:	2b02      	cmp	r3, #2
 80069be:	f040 8162 	bne.w	8006c86 <HAL_RCC_OscConfig+0xeca>
 80069c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069c6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80069ca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80069ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069d4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	fa93 f2a3 	rbit	r2, r3
 80069de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069e2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80069e6:	601a      	str	r2, [r3, #0]
  return result;
 80069e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069ec:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80069f0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069f2:	fab3 f383 	clz	r3, r3
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80069fc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	461a      	mov	r2, r3
 8006a04:	2300      	movs	r3, #0
 8006a06:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a08:	f7fc fa9e 	bl	8002f48 <HAL_GetTick>
 8006a0c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a10:	e00c      	b.n	8006a2c <HAL_RCC_OscConfig+0xc70>
 8006a12:	bf00      	nop
 8006a14:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a18:	f7fc fa96 	bl	8002f48 <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006a22:	1ad3      	subs	r3, r2, r3
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d901      	bls.n	8006a2c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e1fd      	b.n	8006e28 <HAL_RCC_OscConfig+0x106c>
 8006a2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a30:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8006a34:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006a38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a3e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	fa93 f2a3 	rbit	r2, r3
 8006a48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a4c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8006a50:	601a      	str	r2, [r3, #0]
  return result;
 8006a52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a56:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8006a5a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a5c:	fab3 f383 	clz	r3, r3
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	095b      	lsrs	r3, r3, #5
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	f043 0301 	orr.w	r3, r3, #1
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d102      	bne.n	8006a76 <HAL_RCC_OscConfig+0xcba>
 8006a70:	4bb0      	ldr	r3, [pc, #704]	@ (8006d34 <HAL_RCC_OscConfig+0xf78>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	e027      	b.n	8006ac6 <HAL_RCC_OscConfig+0xd0a>
 8006a76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a7a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8006a7e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006a82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a88:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	fa93 f2a3 	rbit	r2, r3
 8006a92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a96:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8006a9a:	601a      	str	r2, [r3, #0]
 8006a9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006aa0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8006aa4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006aa8:	601a      	str	r2, [r3, #0]
 8006aaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006aae:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	fa93 f2a3 	rbit	r2, r3
 8006ab8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006abc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006ac0:	601a      	str	r2, [r3, #0]
 8006ac2:	4b9c      	ldr	r3, [pc, #624]	@ (8006d34 <HAL_RCC_OscConfig+0xf78>)
 8006ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ac6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006aca:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8006ace:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006ad2:	6011      	str	r1, [r2, #0]
 8006ad4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006ad8:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8006adc:	6812      	ldr	r2, [r2, #0]
 8006ade:	fa92 f1a2 	rbit	r1, r2
 8006ae2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006ae6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8006aea:	6011      	str	r1, [r2, #0]
  return result;
 8006aec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006af0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8006af4:	6812      	ldr	r2, [r2, #0]
 8006af6:	fab2 f282 	clz	r2, r2
 8006afa:	b2d2      	uxtb	r2, r2
 8006afc:	f042 0220 	orr.w	r2, r2, #32
 8006b00:	b2d2      	uxtb	r2, r2
 8006b02:	f002 021f 	and.w	r2, r2, #31
 8006b06:	2101      	movs	r1, #1
 8006b08:	fa01 f202 	lsl.w	r2, r1, r2
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d182      	bne.n	8006a18 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b12:	4b88      	ldr	r3, [pc, #544]	@ (8006d34 <HAL_RCC_OscConfig+0xf78>)
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006b1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006b26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6a1b      	ldr	r3, [r3, #32]
 8006b32:	430b      	orrs	r3, r1
 8006b34:	497f      	ldr	r1, [pc, #508]	@ (8006d34 <HAL_RCC_OscConfig+0xf78>)
 8006b36:	4313      	orrs	r3, r2
 8006b38:	604b      	str	r3, [r1, #4]
 8006b3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b3e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8006b42:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006b46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b4c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	fa93 f2a3 	rbit	r2, r3
 8006b56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b5a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8006b5e:	601a      	str	r2, [r3, #0]
  return result;
 8006b60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b64:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8006b68:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b6a:	fab3 f383 	clz	r3, r3
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006b74:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b80:	f7fc f9e2 	bl	8002f48 <HAL_GetTick>
 8006b84:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006b88:	e009      	b.n	8006b9e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b8a:	f7fc f9dd 	bl	8002f48 <HAL_GetTick>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d901      	bls.n	8006b9e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e144      	b.n	8006e28 <HAL_RCC_OscConfig+0x106c>
 8006b9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006ba2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8006ba6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006baa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006bb0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	fa93 f2a3 	rbit	r2, r3
 8006bba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006bbe:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8006bc2:	601a      	str	r2, [r3, #0]
  return result;
 8006bc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006bc8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8006bcc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006bce:	fab3 f383 	clz	r3, r3
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	095b      	lsrs	r3, r3, #5
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	f043 0301 	orr.w	r3, r3, #1
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d102      	bne.n	8006be8 <HAL_RCC_OscConfig+0xe2c>
 8006be2:	4b54      	ldr	r3, [pc, #336]	@ (8006d34 <HAL_RCC_OscConfig+0xf78>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	e027      	b.n	8006c38 <HAL_RCC_OscConfig+0xe7c>
 8006be8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006bec:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8006bf0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006bf4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006bfa:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	fa93 f2a3 	rbit	r2, r3
 8006c04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c08:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8006c0c:	601a      	str	r2, [r3, #0]
 8006c0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c12:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8006c16:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006c1a:	601a      	str	r2, [r3, #0]
 8006c1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c20:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	fa93 f2a3 	rbit	r2, r3
 8006c2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c2e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8006c32:	601a      	str	r2, [r3, #0]
 8006c34:	4b3f      	ldr	r3, [pc, #252]	@ (8006d34 <HAL_RCC_OscConfig+0xf78>)
 8006c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c38:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006c3c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8006c40:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006c44:	6011      	str	r1, [r2, #0]
 8006c46:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006c4a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8006c4e:	6812      	ldr	r2, [r2, #0]
 8006c50:	fa92 f1a2 	rbit	r1, r2
 8006c54:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006c58:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8006c5c:	6011      	str	r1, [r2, #0]
  return result;
 8006c5e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006c62:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8006c66:	6812      	ldr	r2, [r2, #0]
 8006c68:	fab2 f282 	clz	r2, r2
 8006c6c:	b2d2      	uxtb	r2, r2
 8006c6e:	f042 0220 	orr.w	r2, r2, #32
 8006c72:	b2d2      	uxtb	r2, r2
 8006c74:	f002 021f 	and.w	r2, r2, #31
 8006c78:	2101      	movs	r1, #1
 8006c7a:	fa01 f202 	lsl.w	r2, r1, r2
 8006c7e:	4013      	ands	r3, r2
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d082      	beq.n	8006b8a <HAL_RCC_OscConfig+0xdce>
 8006c84:	e0cf      	b.n	8006e26 <HAL_RCC_OscConfig+0x106a>
 8006c86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c8a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006c8e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006c92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c98:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	fa93 f2a3 	rbit	r2, r3
 8006ca2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006ca6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8006caa:	601a      	str	r2, [r3, #0]
  return result;
 8006cac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006cb0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8006cb4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cb6:	fab3 f383 	clz	r3, r3
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006cc0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	2300      	movs	r3, #0
 8006cca:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ccc:	f7fc f93c 	bl	8002f48 <HAL_GetTick>
 8006cd0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006cd4:	e009      	b.n	8006cea <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cd6:	f7fc f937 	bl	8002f48 <HAL_GetTick>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d901      	bls.n	8006cea <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e09e      	b.n	8006e28 <HAL_RCC_OscConfig+0x106c>
 8006cea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006cee:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8006cf2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006cf6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006cfc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	fa93 f2a3 	rbit	r2, r3
 8006d06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006d0a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8006d0e:	601a      	str	r2, [r3, #0]
  return result;
 8006d10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006d14:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8006d18:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d1a:	fab3 f383 	clz	r3, r3
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	095b      	lsrs	r3, r3, #5
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	f043 0301 	orr.w	r3, r3, #1
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d104      	bne.n	8006d38 <HAL_RCC_OscConfig+0xf7c>
 8006d2e:	4b01      	ldr	r3, [pc, #4]	@ (8006d34 <HAL_RCC_OscConfig+0xf78>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	e029      	b.n	8006d88 <HAL_RCC_OscConfig+0xfcc>
 8006d34:	40021000 	.word	0x40021000
 8006d38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006d3c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8006d40:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006d44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006d4a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	fa93 f2a3 	rbit	r2, r3
 8006d54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006d58:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8006d5c:	601a      	str	r2, [r3, #0]
 8006d5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006d62:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8006d66:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006d6a:	601a      	str	r2, [r3, #0]
 8006d6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006d70:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	fa93 f2a3 	rbit	r2, r3
 8006d7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006d7e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8006d82:	601a      	str	r2, [r3, #0]
 8006d84:	4b2b      	ldr	r3, [pc, #172]	@ (8006e34 <HAL_RCC_OscConfig+0x1078>)
 8006d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d88:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006d8c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8006d90:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006d94:	6011      	str	r1, [r2, #0]
 8006d96:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006d9a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8006d9e:	6812      	ldr	r2, [r2, #0]
 8006da0:	fa92 f1a2 	rbit	r1, r2
 8006da4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006da8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8006dac:	6011      	str	r1, [r2, #0]
  return result;
 8006dae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006db2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8006db6:	6812      	ldr	r2, [r2, #0]
 8006db8:	fab2 f282 	clz	r2, r2
 8006dbc:	b2d2      	uxtb	r2, r2
 8006dbe:	f042 0220 	orr.w	r2, r2, #32
 8006dc2:	b2d2      	uxtb	r2, r2
 8006dc4:	f002 021f 	and.w	r2, r2, #31
 8006dc8:	2101      	movs	r1, #1
 8006dca:	fa01 f202 	lsl.w	r2, r1, r2
 8006dce:	4013      	ands	r3, r2
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d180      	bne.n	8006cd6 <HAL_RCC_OscConfig+0xf1a>
 8006dd4:	e027      	b.n	8006e26 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006dd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006dda:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	69db      	ldr	r3, [r3, #28]
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d101      	bne.n	8006dea <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e01e      	b.n	8006e28 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006dea:	4b12      	ldr	r3, [pc, #72]	@ (8006e34 <HAL_RCC_OscConfig+0x1078>)
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006df2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8006df6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006dfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006dfe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	6a1b      	ldr	r3, [r3, #32]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d10b      	bne.n	8006e22 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006e0a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8006e0e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006e12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006e16:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d001      	beq.n	8006e26 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e000      	b.n	8006e28 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	40021000 	.word	0x40021000

08006e38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b09e      	sub	sp, #120	@ 0x78
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006e42:	2300      	movs	r3, #0
 8006e44:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d101      	bne.n	8006e50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e162      	b.n	8007116 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e50:	4b90      	ldr	r3, [pc, #576]	@ (8007094 <HAL_RCC_ClockConfig+0x25c>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0307 	and.w	r3, r3, #7
 8006e58:	683a      	ldr	r2, [r7, #0]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d910      	bls.n	8006e80 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e5e:	4b8d      	ldr	r3, [pc, #564]	@ (8007094 <HAL_RCC_ClockConfig+0x25c>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f023 0207 	bic.w	r2, r3, #7
 8006e66:	498b      	ldr	r1, [pc, #556]	@ (8007094 <HAL_RCC_ClockConfig+0x25c>)
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e6e:	4b89      	ldr	r3, [pc, #548]	@ (8007094 <HAL_RCC_ClockConfig+0x25c>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 0307 	and.w	r3, r3, #7
 8006e76:	683a      	ldr	r2, [r7, #0]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d001      	beq.n	8006e80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e14a      	b.n	8007116 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 0302 	and.w	r3, r3, #2
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d008      	beq.n	8006e9e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e8c:	4b82      	ldr	r3, [pc, #520]	@ (8007098 <HAL_RCC_ClockConfig+0x260>)
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	497f      	ldr	r1, [pc, #508]	@ (8007098 <HAL_RCC_ClockConfig+0x260>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 0301 	and.w	r3, r3, #1
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	f000 80dc 	beq.w	8007064 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d13c      	bne.n	8006f2e <HAL_RCC_ClockConfig+0xf6>
 8006eb4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006eb8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006ebc:	fa93 f3a3 	rbit	r3, r3
 8006ec0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8006ec2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ec4:	fab3 f383 	clz	r3, r3
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	095b      	lsrs	r3, r3, #5
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	f043 0301 	orr.w	r3, r3, #1
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d102      	bne.n	8006ede <HAL_RCC_ClockConfig+0xa6>
 8006ed8:	4b6f      	ldr	r3, [pc, #444]	@ (8007098 <HAL_RCC_ClockConfig+0x260>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	e00f      	b.n	8006efe <HAL_RCC_ClockConfig+0xc6>
 8006ede:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006ee2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ee4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006ee6:	fa93 f3a3 	rbit	r3, r3
 8006eea:	667b      	str	r3, [r7, #100]	@ 0x64
 8006eec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006ef0:	663b      	str	r3, [r7, #96]	@ 0x60
 8006ef2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ef4:	fa93 f3a3 	rbit	r3, r3
 8006ef8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006efa:	4b67      	ldr	r3, [pc, #412]	@ (8007098 <HAL_RCC_ClockConfig+0x260>)
 8006efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006efe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006f02:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006f04:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006f06:	fa92 f2a2 	rbit	r2, r2
 8006f0a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8006f0c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006f0e:	fab2 f282 	clz	r2, r2
 8006f12:	b2d2      	uxtb	r2, r2
 8006f14:	f042 0220 	orr.w	r2, r2, #32
 8006f18:	b2d2      	uxtb	r2, r2
 8006f1a:	f002 021f 	and.w	r2, r2, #31
 8006f1e:	2101      	movs	r1, #1
 8006f20:	fa01 f202 	lsl.w	r2, r1, r2
 8006f24:	4013      	ands	r3, r2
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d17b      	bne.n	8007022 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e0f3      	b.n	8007116 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	d13c      	bne.n	8006fb0 <HAL_RCC_ClockConfig+0x178>
 8006f36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006f3a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f3e:	fa93 f3a3 	rbit	r3, r3
 8006f42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8006f44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f46:	fab3 f383 	clz	r3, r3
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	095b      	lsrs	r3, r3, #5
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	f043 0301 	orr.w	r3, r3, #1
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d102      	bne.n	8006f60 <HAL_RCC_ClockConfig+0x128>
 8006f5a:	4b4f      	ldr	r3, [pc, #316]	@ (8007098 <HAL_RCC_ClockConfig+0x260>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	e00f      	b.n	8006f80 <HAL_RCC_ClockConfig+0x148>
 8006f60:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006f64:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f68:	fa93 f3a3 	rbit	r3, r3
 8006f6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006f72:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f76:	fa93 f3a3 	rbit	r3, r3
 8006f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f7c:	4b46      	ldr	r3, [pc, #280]	@ (8007098 <HAL_RCC_ClockConfig+0x260>)
 8006f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f80:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006f84:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006f86:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f88:	fa92 f2a2 	rbit	r2, r2
 8006f8c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8006f8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f90:	fab2 f282 	clz	r2, r2
 8006f94:	b2d2      	uxtb	r2, r2
 8006f96:	f042 0220 	orr.w	r2, r2, #32
 8006f9a:	b2d2      	uxtb	r2, r2
 8006f9c:	f002 021f 	and.w	r2, r2, #31
 8006fa0:	2101      	movs	r1, #1
 8006fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d13a      	bne.n	8007022 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e0b2      	b.n	8007116 <HAL_RCC_ClockConfig+0x2de>
 8006fb0:	2302      	movs	r3, #2
 8006fb2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb6:	fa93 f3a3 	rbit	r3, r3
 8006fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8006fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fbe:	fab3 f383 	clz	r3, r3
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	095b      	lsrs	r3, r3, #5
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	f043 0301 	orr.w	r3, r3, #1
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d102      	bne.n	8006fd8 <HAL_RCC_ClockConfig+0x1a0>
 8006fd2:	4b31      	ldr	r3, [pc, #196]	@ (8007098 <HAL_RCC_ClockConfig+0x260>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	e00d      	b.n	8006ff4 <HAL_RCC_ClockConfig+0x1bc>
 8006fd8:	2302      	movs	r3, #2
 8006fda:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fde:	fa93 f3a3 	rbit	r3, r3
 8006fe2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	623b      	str	r3, [r7, #32]
 8006fe8:	6a3b      	ldr	r3, [r7, #32]
 8006fea:	fa93 f3a3 	rbit	r3, r3
 8006fee:	61fb      	str	r3, [r7, #28]
 8006ff0:	4b29      	ldr	r3, [pc, #164]	@ (8007098 <HAL_RCC_ClockConfig+0x260>)
 8006ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ff4:	2202      	movs	r2, #2
 8006ff6:	61ba      	str	r2, [r7, #24]
 8006ff8:	69ba      	ldr	r2, [r7, #24]
 8006ffa:	fa92 f2a2 	rbit	r2, r2
 8006ffe:	617a      	str	r2, [r7, #20]
  return result;
 8007000:	697a      	ldr	r2, [r7, #20]
 8007002:	fab2 f282 	clz	r2, r2
 8007006:	b2d2      	uxtb	r2, r2
 8007008:	f042 0220 	orr.w	r2, r2, #32
 800700c:	b2d2      	uxtb	r2, r2
 800700e:	f002 021f 	and.w	r2, r2, #31
 8007012:	2101      	movs	r1, #1
 8007014:	fa01 f202 	lsl.w	r2, r1, r2
 8007018:	4013      	ands	r3, r2
 800701a:	2b00      	cmp	r3, #0
 800701c:	d101      	bne.n	8007022 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	e079      	b.n	8007116 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007022:	4b1d      	ldr	r3, [pc, #116]	@ (8007098 <HAL_RCC_ClockConfig+0x260>)
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	f023 0203 	bic.w	r2, r3, #3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	491a      	ldr	r1, [pc, #104]	@ (8007098 <HAL_RCC_ClockConfig+0x260>)
 8007030:	4313      	orrs	r3, r2
 8007032:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007034:	f7fb ff88 	bl	8002f48 <HAL_GetTick>
 8007038:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800703a:	e00a      	b.n	8007052 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800703c:	f7fb ff84 	bl	8002f48 <HAL_GetTick>
 8007040:	4602      	mov	r2, r0
 8007042:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	f241 3288 	movw	r2, #5000	@ 0x1388
 800704a:	4293      	cmp	r3, r2
 800704c:	d901      	bls.n	8007052 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	e061      	b.n	8007116 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007052:	4b11      	ldr	r3, [pc, #68]	@ (8007098 <HAL_RCC_ClockConfig+0x260>)
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	f003 020c 	and.w	r2, r3, #12
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	429a      	cmp	r2, r3
 8007062:	d1eb      	bne.n	800703c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007064:	4b0b      	ldr	r3, [pc, #44]	@ (8007094 <HAL_RCC_ClockConfig+0x25c>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 0307 	and.w	r3, r3, #7
 800706c:	683a      	ldr	r2, [r7, #0]
 800706e:	429a      	cmp	r2, r3
 8007070:	d214      	bcs.n	800709c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007072:	4b08      	ldr	r3, [pc, #32]	@ (8007094 <HAL_RCC_ClockConfig+0x25c>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f023 0207 	bic.w	r2, r3, #7
 800707a:	4906      	ldr	r1, [pc, #24]	@ (8007094 <HAL_RCC_ClockConfig+0x25c>)
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	4313      	orrs	r3, r2
 8007080:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007082:	4b04      	ldr	r3, [pc, #16]	@ (8007094 <HAL_RCC_ClockConfig+0x25c>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 0307 	and.w	r3, r3, #7
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	429a      	cmp	r2, r3
 800708e:	d005      	beq.n	800709c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	e040      	b.n	8007116 <HAL_RCC_ClockConfig+0x2de>
 8007094:	40022000 	.word	0x40022000
 8007098:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0304 	and.w	r3, r3, #4
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d008      	beq.n	80070ba <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070a8:	4b1d      	ldr	r3, [pc, #116]	@ (8007120 <HAL_RCC_ClockConfig+0x2e8>)
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	491a      	ldr	r1, [pc, #104]	@ (8007120 <HAL_RCC_ClockConfig+0x2e8>)
 80070b6:	4313      	orrs	r3, r2
 80070b8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 0308 	and.w	r3, r3, #8
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d009      	beq.n	80070da <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070c6:	4b16      	ldr	r3, [pc, #88]	@ (8007120 <HAL_RCC_ClockConfig+0x2e8>)
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	00db      	lsls	r3, r3, #3
 80070d4:	4912      	ldr	r1, [pc, #72]	@ (8007120 <HAL_RCC_ClockConfig+0x2e8>)
 80070d6:	4313      	orrs	r3, r2
 80070d8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80070da:	f000 f829 	bl	8007130 <HAL_RCC_GetSysClockFreq>
 80070de:	4601      	mov	r1, r0
 80070e0:	4b0f      	ldr	r3, [pc, #60]	@ (8007120 <HAL_RCC_ClockConfig+0x2e8>)
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80070e8:	22f0      	movs	r2, #240	@ 0xf0
 80070ea:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070ec:	693a      	ldr	r2, [r7, #16]
 80070ee:	fa92 f2a2 	rbit	r2, r2
 80070f2:	60fa      	str	r2, [r7, #12]
  return result;
 80070f4:	68fa      	ldr	r2, [r7, #12]
 80070f6:	fab2 f282 	clz	r2, r2
 80070fa:	b2d2      	uxtb	r2, r2
 80070fc:	40d3      	lsrs	r3, r2
 80070fe:	4a09      	ldr	r2, [pc, #36]	@ (8007124 <HAL_RCC_ClockConfig+0x2ec>)
 8007100:	5cd3      	ldrb	r3, [r2, r3]
 8007102:	fa21 f303 	lsr.w	r3, r1, r3
 8007106:	4a08      	ldr	r2, [pc, #32]	@ (8007128 <HAL_RCC_ClockConfig+0x2f0>)
 8007108:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800710a:	4b08      	ldr	r3, [pc, #32]	@ (800712c <HAL_RCC_ClockConfig+0x2f4>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4618      	mov	r0, r3
 8007110:	f7fb fed6 	bl	8002ec0 <HAL_InitTick>
  
  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3778      	adds	r7, #120	@ 0x78
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	40021000 	.word	0x40021000
 8007124:	080084e0 	.word	0x080084e0
 8007128:	20000000 	.word	0x20000000
 800712c:	20000004 	.word	0x20000004

08007130 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007130:	b480      	push	{r7}
 8007132:	b08b      	sub	sp, #44	@ 0x2c
 8007134:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007136:	2300      	movs	r3, #0
 8007138:	61fb      	str	r3, [r7, #28]
 800713a:	2300      	movs	r3, #0
 800713c:	61bb      	str	r3, [r7, #24]
 800713e:	2300      	movs	r3, #0
 8007140:	627b      	str	r3, [r7, #36]	@ 0x24
 8007142:	2300      	movs	r3, #0
 8007144:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007146:	2300      	movs	r3, #0
 8007148:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800714a:	4b29      	ldr	r3, [pc, #164]	@ (80071f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	f003 030c 	and.w	r3, r3, #12
 8007156:	2b04      	cmp	r3, #4
 8007158:	d002      	beq.n	8007160 <HAL_RCC_GetSysClockFreq+0x30>
 800715a:	2b08      	cmp	r3, #8
 800715c:	d003      	beq.n	8007166 <HAL_RCC_GetSysClockFreq+0x36>
 800715e:	e03c      	b.n	80071da <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007160:	4b24      	ldr	r3, [pc, #144]	@ (80071f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007162:	623b      	str	r3, [r7, #32]
      break;
 8007164:	e03c      	b.n	80071e0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800716c:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8007170:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007172:	68ba      	ldr	r2, [r7, #8]
 8007174:	fa92 f2a2 	rbit	r2, r2
 8007178:	607a      	str	r2, [r7, #4]
  return result;
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	fab2 f282 	clz	r2, r2
 8007180:	b2d2      	uxtb	r2, r2
 8007182:	40d3      	lsrs	r3, r2
 8007184:	4a1c      	ldr	r2, [pc, #112]	@ (80071f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007186:	5cd3      	ldrb	r3, [r2, r3]
 8007188:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800718a:	4b19      	ldr	r3, [pc, #100]	@ (80071f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800718c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800718e:	f003 030f 	and.w	r3, r3, #15
 8007192:	220f      	movs	r2, #15
 8007194:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007196:	693a      	ldr	r2, [r7, #16]
 8007198:	fa92 f2a2 	rbit	r2, r2
 800719c:	60fa      	str	r2, [r7, #12]
  return result;
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	fab2 f282 	clz	r2, r2
 80071a4:	b2d2      	uxtb	r2, r2
 80071a6:	40d3      	lsrs	r3, r2
 80071a8:	4a14      	ldr	r2, [pc, #80]	@ (80071fc <HAL_RCC_GetSysClockFreq+0xcc>)
 80071aa:	5cd3      	ldrb	r3, [r2, r3]
 80071ac:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d008      	beq.n	80071ca <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80071b8:	4a0e      	ldr	r2, [pc, #56]	@ (80071f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	fb02 f303 	mul.w	r3, r2, r3
 80071c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80071c8:	e004      	b.n	80071d4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	4a0c      	ldr	r2, [pc, #48]	@ (8007200 <HAL_RCC_GetSysClockFreq+0xd0>)
 80071ce:	fb02 f303 	mul.w	r3, r2, r3
 80071d2:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80071d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d6:	623b      	str	r3, [r7, #32]
      break;
 80071d8:	e002      	b.n	80071e0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80071da:	4b0a      	ldr	r3, [pc, #40]	@ (8007204 <HAL_RCC_GetSysClockFreq+0xd4>)
 80071dc:	623b      	str	r3, [r7, #32]
      break;
 80071de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80071e0:	6a3b      	ldr	r3, [r7, #32]
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	372c      	adds	r7, #44	@ 0x2c
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop
 80071f0:	40021000 	.word	0x40021000
 80071f4:	00f42400 	.word	0x00f42400
 80071f8:	080084f0 	.word	0x080084f0
 80071fc:	08008500 	.word	0x08008500
 8007200:	003d0900 	.word	0x003d0900
 8007204:	007a1200 	.word	0x007a1200

08007208 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b092      	sub	sp, #72	@ 0x48
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007210:	2300      	movs	r3, #0
 8007212:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8007214:	2300      	movs	r3, #0
 8007216:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007218:	2300      	movs	r3, #0
 800721a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007226:	2b00      	cmp	r3, #0
 8007228:	f000 80d4 	beq.w	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800722c:	4b4e      	ldr	r3, [pc, #312]	@ (8007368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800722e:	69db      	ldr	r3, [r3, #28]
 8007230:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007234:	2b00      	cmp	r3, #0
 8007236:	d10e      	bne.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007238:	4b4b      	ldr	r3, [pc, #300]	@ (8007368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800723a:	69db      	ldr	r3, [r3, #28]
 800723c:	4a4a      	ldr	r2, [pc, #296]	@ (8007368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800723e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007242:	61d3      	str	r3, [r2, #28]
 8007244:	4b48      	ldr	r3, [pc, #288]	@ (8007368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007246:	69db      	ldr	r3, [r3, #28]
 8007248:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800724c:	60bb      	str	r3, [r7, #8]
 800724e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007250:	2301      	movs	r3, #1
 8007252:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007256:	4b45      	ldr	r3, [pc, #276]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800725e:	2b00      	cmp	r3, #0
 8007260:	d118      	bne.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007262:	4b42      	ldr	r3, [pc, #264]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a41      	ldr	r2, [pc, #260]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007268:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800726c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800726e:	f7fb fe6b 	bl	8002f48 <HAL_GetTick>
 8007272:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007274:	e008      	b.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007276:	f7fb fe67 	bl	8002f48 <HAL_GetTick>
 800727a:	4602      	mov	r2, r0
 800727c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800727e:	1ad3      	subs	r3, r2, r3
 8007280:	2b64      	cmp	r3, #100	@ 0x64
 8007282:	d901      	bls.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007284:	2303      	movs	r3, #3
 8007286:	e14b      	b.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007288:	4b38      	ldr	r3, [pc, #224]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007290:	2b00      	cmp	r3, #0
 8007292:	d0f0      	beq.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007294:	4b34      	ldr	r3, [pc, #208]	@ (8007368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007296:	6a1b      	ldr	r3, [r3, #32]
 8007298:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800729c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800729e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	f000 8084 	beq.w	80073ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072ae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d07c      	beq.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80072b4:	4b2c      	ldr	r3, [pc, #176]	@ (8007368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072b6:	6a1b      	ldr	r3, [r3, #32]
 80072b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80072c2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c6:	fa93 f3a3 	rbit	r3, r3
 80072ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80072cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80072ce:	fab3 f383 	clz	r3, r3
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	461a      	mov	r2, r3
 80072d6:	4b26      	ldr	r3, [pc, #152]	@ (8007370 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80072d8:	4413      	add	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	461a      	mov	r2, r3
 80072de:	2301      	movs	r3, #1
 80072e0:	6013      	str	r3, [r2, #0]
 80072e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80072e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ea:	fa93 f3a3 	rbit	r3, r3
 80072ee:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80072f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80072f2:	fab3 f383 	clz	r3, r3
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	461a      	mov	r2, r3
 80072fa:	4b1d      	ldr	r3, [pc, #116]	@ (8007370 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80072fc:	4413      	add	r3, r2
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	461a      	mov	r2, r3
 8007302:	2300      	movs	r3, #0
 8007304:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007306:	4a18      	ldr	r2, [pc, #96]	@ (8007368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007308:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800730a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800730c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800730e:	f003 0301 	and.w	r3, r3, #1
 8007312:	2b00      	cmp	r3, #0
 8007314:	d04b      	beq.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007316:	f7fb fe17 	bl	8002f48 <HAL_GetTick>
 800731a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800731c:	e00a      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800731e:	f7fb fe13 	bl	8002f48 <HAL_GetTick>
 8007322:	4602      	mov	r2, r0
 8007324:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	f241 3288 	movw	r2, #5000	@ 0x1388
 800732c:	4293      	cmp	r3, r2
 800732e:	d901      	bls.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007330:	2303      	movs	r3, #3
 8007332:	e0f5      	b.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8007334:	2302      	movs	r3, #2
 8007336:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800733a:	fa93 f3a3 	rbit	r3, r3
 800733e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007340:	2302      	movs	r3, #2
 8007342:	623b      	str	r3, [r7, #32]
 8007344:	6a3b      	ldr	r3, [r7, #32]
 8007346:	fa93 f3a3 	rbit	r3, r3
 800734a:	61fb      	str	r3, [r7, #28]
  return result;
 800734c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800734e:	fab3 f383 	clz	r3, r3
 8007352:	b2db      	uxtb	r3, r3
 8007354:	095b      	lsrs	r3, r3, #5
 8007356:	b2db      	uxtb	r3, r3
 8007358:	f043 0302 	orr.w	r3, r3, #2
 800735c:	b2db      	uxtb	r3, r3
 800735e:	2b02      	cmp	r3, #2
 8007360:	d108      	bne.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8007362:	4b01      	ldr	r3, [pc, #4]	@ (8007368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007364:	6a1b      	ldr	r3, [r3, #32]
 8007366:	e00d      	b.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8007368:	40021000 	.word	0x40021000
 800736c:	40007000 	.word	0x40007000
 8007370:	10908100 	.word	0x10908100
 8007374:	2302      	movs	r3, #2
 8007376:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	fa93 f3a3 	rbit	r3, r3
 800737e:	617b      	str	r3, [r7, #20]
 8007380:	4b69      	ldr	r3, [pc, #420]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007384:	2202      	movs	r2, #2
 8007386:	613a      	str	r2, [r7, #16]
 8007388:	693a      	ldr	r2, [r7, #16]
 800738a:	fa92 f2a2 	rbit	r2, r2
 800738e:	60fa      	str	r2, [r7, #12]
  return result;
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	fab2 f282 	clz	r2, r2
 8007396:	b2d2      	uxtb	r2, r2
 8007398:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800739c:	b2d2      	uxtb	r2, r2
 800739e:	f002 021f 	and.w	r2, r2, #31
 80073a2:	2101      	movs	r1, #1
 80073a4:	fa01 f202 	lsl.w	r2, r1, r2
 80073a8:	4013      	ands	r3, r2
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d0b7      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80073ae:	4b5e      	ldr	r3, [pc, #376]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80073b0:	6a1b      	ldr	r3, [r3, #32]
 80073b2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	495b      	ldr	r1, [pc, #364]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80073bc:	4313      	orrs	r3, r2
 80073be:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80073c0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d105      	bne.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073c8:	4b57      	ldr	r3, [pc, #348]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80073ca:	69db      	ldr	r3, [r3, #28]
 80073cc:	4a56      	ldr	r2, [pc, #344]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80073ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0301 	and.w	r3, r3, #1
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d008      	beq.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80073e0:	4b51      	ldr	r3, [pc, #324]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80073e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073e4:	f023 0203 	bic.w	r2, r3, #3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	494e      	ldr	r1, [pc, #312]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80073ee:	4313      	orrs	r3, r2
 80073f0:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 0320 	and.w	r3, r3, #32
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d008      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80073fe:	4b4a      	ldr	r3, [pc, #296]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007402:	f023 0210 	bic.w	r2, r3, #16
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	4947      	ldr	r1, [pc, #284]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800740c:	4313      	orrs	r3, r2
 800740e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007418:	2b00      	cmp	r3, #0
 800741a:	d008      	beq.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800741c:	4b42      	ldr	r3, [pc, #264]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007428:	493f      	ldr	r1, [pc, #252]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800742a:	4313      	orrs	r3, r2
 800742c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007436:	2b00      	cmp	r3, #0
 8007438:	d008      	beq.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800743a:	4b3b      	ldr	r3, [pc, #236]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800743c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800743e:	f023 0220 	bic.w	r2, r3, #32
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	4938      	ldr	r1, [pc, #224]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007448:	4313      	orrs	r3, r2
 800744a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007454:	2b00      	cmp	r3, #0
 8007456:	d008      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007458:	4b33      	ldr	r3, [pc, #204]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800745a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800745c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	695b      	ldr	r3, [r3, #20]
 8007464:	4930      	ldr	r1, [pc, #192]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007466:	4313      	orrs	r3, r2
 8007468:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007472:	2b00      	cmp	r3, #0
 8007474:	d008      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007476:	4b2c      	ldr	r3, [pc, #176]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	69db      	ldr	r3, [r3, #28]
 8007482:	4929      	ldr	r1, [pc, #164]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007484:	4313      	orrs	r3, r2
 8007486:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007490:	2b00      	cmp	r3, #0
 8007492:	d008      	beq.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8007494:	4b24      	ldr	r3, [pc, #144]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007498:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	699b      	ldr	r3, [r3, #24]
 80074a0:	4921      	ldr	r1, [pc, #132]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80074a2:	4313      	orrs	r3, r2
 80074a4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d008      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80074b2:	4b1d      	ldr	r3, [pc, #116]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80074b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074b6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a1b      	ldr	r3, [r3, #32]
 80074be:	491a      	ldr	r1, [pc, #104]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80074c0:	4313      	orrs	r3, r2
 80074c2:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d008      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80074d0:	4b15      	ldr	r3, [pc, #84]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80074d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074d4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074dc:	4912      	ldr	r1, [pc, #72]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80074de:	4313      	orrs	r3, r2
 80074e0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d008      	beq.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80074ee:	4b0e      	ldr	r3, [pc, #56]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80074f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074f2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074fa:	490b      	ldr	r1, [pc, #44]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80074fc:	4313      	orrs	r3, r2
 80074fe:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007508:	2b00      	cmp	r3, #0
 800750a:	d008      	beq.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800750c:	4b06      	ldr	r3, [pc, #24]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800750e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007510:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007518:	4903      	ldr	r1, [pc, #12]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800751a:	4313      	orrs	r3, r2
 800751c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3748      	adds	r7, #72	@ 0x48
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	40021000 	.word	0x40021000

0800752c <memset>:
 800752c:	4402      	add	r2, r0
 800752e:	4603      	mov	r3, r0
 8007530:	4293      	cmp	r3, r2
 8007532:	d100      	bne.n	8007536 <memset+0xa>
 8007534:	4770      	bx	lr
 8007536:	f803 1b01 	strb.w	r1, [r3], #1
 800753a:	e7f9      	b.n	8007530 <memset+0x4>

0800753c <__errno>:
 800753c:	4b01      	ldr	r3, [pc, #4]	@ (8007544 <__errno+0x8>)
 800753e:	6818      	ldr	r0, [r3, #0]
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	2000000c 	.word	0x2000000c

08007548 <__libc_init_array>:
 8007548:	b570      	push	{r4, r5, r6, lr}
 800754a:	4d0d      	ldr	r5, [pc, #52]	@ (8007580 <__libc_init_array+0x38>)
 800754c:	4c0d      	ldr	r4, [pc, #52]	@ (8007584 <__libc_init_array+0x3c>)
 800754e:	1b64      	subs	r4, r4, r5
 8007550:	10a4      	asrs	r4, r4, #2
 8007552:	2600      	movs	r6, #0
 8007554:	42a6      	cmp	r6, r4
 8007556:	d109      	bne.n	800756c <__libc_init_array+0x24>
 8007558:	4d0b      	ldr	r5, [pc, #44]	@ (8007588 <__libc_init_array+0x40>)
 800755a:	4c0c      	ldr	r4, [pc, #48]	@ (800758c <__libc_init_array+0x44>)
 800755c:	f000 ffb0 	bl	80084c0 <_init>
 8007560:	1b64      	subs	r4, r4, r5
 8007562:	10a4      	asrs	r4, r4, #2
 8007564:	2600      	movs	r6, #0
 8007566:	42a6      	cmp	r6, r4
 8007568:	d105      	bne.n	8007576 <__libc_init_array+0x2e>
 800756a:	bd70      	pop	{r4, r5, r6, pc}
 800756c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007570:	4798      	blx	r3
 8007572:	3601      	adds	r6, #1
 8007574:	e7ee      	b.n	8007554 <__libc_init_array+0xc>
 8007576:	f855 3b04 	ldr.w	r3, [r5], #4
 800757a:	4798      	blx	r3
 800757c:	3601      	adds	r6, #1
 800757e:	e7f2      	b.n	8007566 <__libc_init_array+0x1e>
 8007580:	08008540 	.word	0x08008540
 8007584:	08008540 	.word	0x08008540
 8007588:	08008540 	.word	0x08008540
 800758c:	08008544 	.word	0x08008544

08007590 <memcpy>:
 8007590:	440a      	add	r2, r1
 8007592:	4291      	cmp	r1, r2
 8007594:	f100 33ff 	add.w	r3, r0, #4294967295
 8007598:	d100      	bne.n	800759c <memcpy+0xc>
 800759a:	4770      	bx	lr
 800759c:	b510      	push	{r4, lr}
 800759e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075a6:	4291      	cmp	r1, r2
 80075a8:	d1f9      	bne.n	800759e <memcpy+0xe>
 80075aa:	bd10      	pop	{r4, pc}

080075ac <pow>:
 80075ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ae:	ed2d 8b02 	vpush	{d8}
 80075b2:	eeb0 8a40 	vmov.f32	s16, s0
 80075b6:	eef0 8a60 	vmov.f32	s17, s1
 80075ba:	ec55 4b11 	vmov	r4, r5, d1
 80075be:	f000 f977 	bl	80078b0 <__ieee754_pow>
 80075c2:	4622      	mov	r2, r4
 80075c4:	462b      	mov	r3, r5
 80075c6:	4620      	mov	r0, r4
 80075c8:	4629      	mov	r1, r5
 80075ca:	ec57 6b10 	vmov	r6, r7, d0
 80075ce:	f7f9 fa51 	bl	8000a74 <__aeabi_dcmpun>
 80075d2:	2800      	cmp	r0, #0
 80075d4:	d13b      	bne.n	800764e <pow+0xa2>
 80075d6:	ec51 0b18 	vmov	r0, r1, d8
 80075da:	2200      	movs	r2, #0
 80075dc:	2300      	movs	r3, #0
 80075de:	f7f9 fa17 	bl	8000a10 <__aeabi_dcmpeq>
 80075e2:	b1b8      	cbz	r0, 8007614 <pow+0x68>
 80075e4:	2200      	movs	r2, #0
 80075e6:	2300      	movs	r3, #0
 80075e8:	4620      	mov	r0, r4
 80075ea:	4629      	mov	r1, r5
 80075ec:	f7f9 fa10 	bl	8000a10 <__aeabi_dcmpeq>
 80075f0:	2800      	cmp	r0, #0
 80075f2:	d146      	bne.n	8007682 <pow+0xd6>
 80075f4:	ec45 4b10 	vmov	d0, r4, r5
 80075f8:	f000 f874 	bl	80076e4 <finite>
 80075fc:	b338      	cbz	r0, 800764e <pow+0xa2>
 80075fe:	2200      	movs	r2, #0
 8007600:	2300      	movs	r3, #0
 8007602:	4620      	mov	r0, r4
 8007604:	4629      	mov	r1, r5
 8007606:	f7f9 fa0d 	bl	8000a24 <__aeabi_dcmplt>
 800760a:	b300      	cbz	r0, 800764e <pow+0xa2>
 800760c:	f7ff ff96 	bl	800753c <__errno>
 8007610:	2322      	movs	r3, #34	@ 0x22
 8007612:	e01b      	b.n	800764c <pow+0xa0>
 8007614:	ec47 6b10 	vmov	d0, r6, r7
 8007618:	f000 f864 	bl	80076e4 <finite>
 800761c:	b9e0      	cbnz	r0, 8007658 <pow+0xac>
 800761e:	eeb0 0a48 	vmov.f32	s0, s16
 8007622:	eef0 0a68 	vmov.f32	s1, s17
 8007626:	f000 f85d 	bl	80076e4 <finite>
 800762a:	b1a8      	cbz	r0, 8007658 <pow+0xac>
 800762c:	ec45 4b10 	vmov	d0, r4, r5
 8007630:	f000 f858 	bl	80076e4 <finite>
 8007634:	b180      	cbz	r0, 8007658 <pow+0xac>
 8007636:	4632      	mov	r2, r6
 8007638:	463b      	mov	r3, r7
 800763a:	4630      	mov	r0, r6
 800763c:	4639      	mov	r1, r7
 800763e:	f7f9 fa19 	bl	8000a74 <__aeabi_dcmpun>
 8007642:	2800      	cmp	r0, #0
 8007644:	d0e2      	beq.n	800760c <pow+0x60>
 8007646:	f7ff ff79 	bl	800753c <__errno>
 800764a:	2321      	movs	r3, #33	@ 0x21
 800764c:	6003      	str	r3, [r0, #0]
 800764e:	ecbd 8b02 	vpop	{d8}
 8007652:	ec47 6b10 	vmov	d0, r6, r7
 8007656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007658:	2200      	movs	r2, #0
 800765a:	2300      	movs	r3, #0
 800765c:	4630      	mov	r0, r6
 800765e:	4639      	mov	r1, r7
 8007660:	f7f9 f9d6 	bl	8000a10 <__aeabi_dcmpeq>
 8007664:	2800      	cmp	r0, #0
 8007666:	d0f2      	beq.n	800764e <pow+0xa2>
 8007668:	eeb0 0a48 	vmov.f32	s0, s16
 800766c:	eef0 0a68 	vmov.f32	s1, s17
 8007670:	f000 f838 	bl	80076e4 <finite>
 8007674:	2800      	cmp	r0, #0
 8007676:	d0ea      	beq.n	800764e <pow+0xa2>
 8007678:	ec45 4b10 	vmov	d0, r4, r5
 800767c:	f000 f832 	bl	80076e4 <finite>
 8007680:	e7c3      	b.n	800760a <pow+0x5e>
 8007682:	4f01      	ldr	r7, [pc, #4]	@ (8007688 <pow+0xdc>)
 8007684:	2600      	movs	r6, #0
 8007686:	e7e2      	b.n	800764e <pow+0xa2>
 8007688:	3ff00000 	.word	0x3ff00000

0800768c <sqrt>:
 800768c:	b538      	push	{r3, r4, r5, lr}
 800768e:	ed2d 8b02 	vpush	{d8}
 8007692:	ec55 4b10 	vmov	r4, r5, d0
 8007696:	f000 f831 	bl	80076fc <__ieee754_sqrt>
 800769a:	4622      	mov	r2, r4
 800769c:	462b      	mov	r3, r5
 800769e:	4620      	mov	r0, r4
 80076a0:	4629      	mov	r1, r5
 80076a2:	eeb0 8a40 	vmov.f32	s16, s0
 80076a6:	eef0 8a60 	vmov.f32	s17, s1
 80076aa:	f7f9 f9e3 	bl	8000a74 <__aeabi_dcmpun>
 80076ae:	b990      	cbnz	r0, 80076d6 <sqrt+0x4a>
 80076b0:	2200      	movs	r2, #0
 80076b2:	2300      	movs	r3, #0
 80076b4:	4620      	mov	r0, r4
 80076b6:	4629      	mov	r1, r5
 80076b8:	f7f9 f9b4 	bl	8000a24 <__aeabi_dcmplt>
 80076bc:	b158      	cbz	r0, 80076d6 <sqrt+0x4a>
 80076be:	f7ff ff3d 	bl	800753c <__errno>
 80076c2:	2321      	movs	r3, #33	@ 0x21
 80076c4:	6003      	str	r3, [r0, #0]
 80076c6:	2200      	movs	r2, #0
 80076c8:	2300      	movs	r3, #0
 80076ca:	4610      	mov	r0, r2
 80076cc:	4619      	mov	r1, r3
 80076ce:	f7f9 f861 	bl	8000794 <__aeabi_ddiv>
 80076d2:	ec41 0b18 	vmov	d8, r0, r1
 80076d6:	eeb0 0a48 	vmov.f32	s0, s16
 80076da:	eef0 0a68 	vmov.f32	s1, s17
 80076de:	ecbd 8b02 	vpop	{d8}
 80076e2:	bd38      	pop	{r3, r4, r5, pc}

080076e4 <finite>:
 80076e4:	b082      	sub	sp, #8
 80076e6:	ed8d 0b00 	vstr	d0, [sp]
 80076ea:	9801      	ldr	r0, [sp, #4]
 80076ec:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80076f0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80076f4:	0fc0      	lsrs	r0, r0, #31
 80076f6:	b002      	add	sp, #8
 80076f8:	4770      	bx	lr
	...

080076fc <__ieee754_sqrt>:
 80076fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007700:	4a68      	ldr	r2, [pc, #416]	@ (80078a4 <__ieee754_sqrt+0x1a8>)
 8007702:	ec55 4b10 	vmov	r4, r5, d0
 8007706:	43aa      	bics	r2, r5
 8007708:	462b      	mov	r3, r5
 800770a:	4621      	mov	r1, r4
 800770c:	d110      	bne.n	8007730 <__ieee754_sqrt+0x34>
 800770e:	4622      	mov	r2, r4
 8007710:	4620      	mov	r0, r4
 8007712:	4629      	mov	r1, r5
 8007714:	f7f8 ff14 	bl	8000540 <__aeabi_dmul>
 8007718:	4602      	mov	r2, r0
 800771a:	460b      	mov	r3, r1
 800771c:	4620      	mov	r0, r4
 800771e:	4629      	mov	r1, r5
 8007720:	f7f8 fd58 	bl	80001d4 <__adddf3>
 8007724:	4604      	mov	r4, r0
 8007726:	460d      	mov	r5, r1
 8007728:	ec45 4b10 	vmov	d0, r4, r5
 800772c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007730:	2d00      	cmp	r5, #0
 8007732:	dc0e      	bgt.n	8007752 <__ieee754_sqrt+0x56>
 8007734:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8007738:	4322      	orrs	r2, r4
 800773a:	d0f5      	beq.n	8007728 <__ieee754_sqrt+0x2c>
 800773c:	b19d      	cbz	r5, 8007766 <__ieee754_sqrt+0x6a>
 800773e:	4622      	mov	r2, r4
 8007740:	4620      	mov	r0, r4
 8007742:	4629      	mov	r1, r5
 8007744:	f7f8 fd44 	bl	80001d0 <__aeabi_dsub>
 8007748:	4602      	mov	r2, r0
 800774a:	460b      	mov	r3, r1
 800774c:	f7f9 f822 	bl	8000794 <__aeabi_ddiv>
 8007750:	e7e8      	b.n	8007724 <__ieee754_sqrt+0x28>
 8007752:	152a      	asrs	r2, r5, #20
 8007754:	d115      	bne.n	8007782 <__ieee754_sqrt+0x86>
 8007756:	2000      	movs	r0, #0
 8007758:	e009      	b.n	800776e <__ieee754_sqrt+0x72>
 800775a:	0acb      	lsrs	r3, r1, #11
 800775c:	3a15      	subs	r2, #21
 800775e:	0549      	lsls	r1, r1, #21
 8007760:	2b00      	cmp	r3, #0
 8007762:	d0fa      	beq.n	800775a <__ieee754_sqrt+0x5e>
 8007764:	e7f7      	b.n	8007756 <__ieee754_sqrt+0x5a>
 8007766:	462a      	mov	r2, r5
 8007768:	e7fa      	b.n	8007760 <__ieee754_sqrt+0x64>
 800776a:	005b      	lsls	r3, r3, #1
 800776c:	3001      	adds	r0, #1
 800776e:	02dc      	lsls	r4, r3, #11
 8007770:	d5fb      	bpl.n	800776a <__ieee754_sqrt+0x6e>
 8007772:	1e44      	subs	r4, r0, #1
 8007774:	1b12      	subs	r2, r2, r4
 8007776:	f1c0 0420 	rsb	r4, r0, #32
 800777a:	fa21 f404 	lsr.w	r4, r1, r4
 800777e:	4323      	orrs	r3, r4
 8007780:	4081      	lsls	r1, r0
 8007782:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007786:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800778a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800778e:	07d2      	lsls	r2, r2, #31
 8007790:	bf5c      	itt	pl
 8007792:	005b      	lslpl	r3, r3, #1
 8007794:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8007798:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800779c:	bf58      	it	pl
 800779e:	0049      	lslpl	r1, r1, #1
 80077a0:	2600      	movs	r6, #0
 80077a2:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80077a6:	106d      	asrs	r5, r5, #1
 80077a8:	0049      	lsls	r1, r1, #1
 80077aa:	2016      	movs	r0, #22
 80077ac:	4632      	mov	r2, r6
 80077ae:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80077b2:	1917      	adds	r7, r2, r4
 80077b4:	429f      	cmp	r7, r3
 80077b6:	bfde      	ittt	le
 80077b8:	193a      	addle	r2, r7, r4
 80077ba:	1bdb      	suble	r3, r3, r7
 80077bc:	1936      	addle	r6, r6, r4
 80077be:	0fcf      	lsrs	r7, r1, #31
 80077c0:	3801      	subs	r0, #1
 80077c2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80077c6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80077ca:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80077ce:	d1f0      	bne.n	80077b2 <__ieee754_sqrt+0xb6>
 80077d0:	4604      	mov	r4, r0
 80077d2:	2720      	movs	r7, #32
 80077d4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80077d8:	429a      	cmp	r2, r3
 80077da:	eb00 0e0c 	add.w	lr, r0, ip
 80077de:	db02      	blt.n	80077e6 <__ieee754_sqrt+0xea>
 80077e0:	d113      	bne.n	800780a <__ieee754_sqrt+0x10e>
 80077e2:	458e      	cmp	lr, r1
 80077e4:	d811      	bhi.n	800780a <__ieee754_sqrt+0x10e>
 80077e6:	f1be 0f00 	cmp.w	lr, #0
 80077ea:	eb0e 000c 	add.w	r0, lr, ip
 80077ee:	da42      	bge.n	8007876 <__ieee754_sqrt+0x17a>
 80077f0:	2800      	cmp	r0, #0
 80077f2:	db40      	blt.n	8007876 <__ieee754_sqrt+0x17a>
 80077f4:	f102 0801 	add.w	r8, r2, #1
 80077f8:	1a9b      	subs	r3, r3, r2
 80077fa:	458e      	cmp	lr, r1
 80077fc:	bf88      	it	hi
 80077fe:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007802:	eba1 010e 	sub.w	r1, r1, lr
 8007806:	4464      	add	r4, ip
 8007808:	4642      	mov	r2, r8
 800780a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800780e:	3f01      	subs	r7, #1
 8007810:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8007814:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007818:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800781c:	d1dc      	bne.n	80077d8 <__ieee754_sqrt+0xdc>
 800781e:	4319      	orrs	r1, r3
 8007820:	d01b      	beq.n	800785a <__ieee754_sqrt+0x15e>
 8007822:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80078a8 <__ieee754_sqrt+0x1ac>
 8007826:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80078ac <__ieee754_sqrt+0x1b0>
 800782a:	e9da 0100 	ldrd	r0, r1, [sl]
 800782e:	e9db 2300 	ldrd	r2, r3, [fp]
 8007832:	f7f8 fccd 	bl	80001d0 <__aeabi_dsub>
 8007836:	e9da 8900 	ldrd	r8, r9, [sl]
 800783a:	4602      	mov	r2, r0
 800783c:	460b      	mov	r3, r1
 800783e:	4640      	mov	r0, r8
 8007840:	4649      	mov	r1, r9
 8007842:	f7f9 f8f9 	bl	8000a38 <__aeabi_dcmple>
 8007846:	b140      	cbz	r0, 800785a <__ieee754_sqrt+0x15e>
 8007848:	f1b4 3fff 	cmp.w	r4, #4294967295
 800784c:	e9da 0100 	ldrd	r0, r1, [sl]
 8007850:	e9db 2300 	ldrd	r2, r3, [fp]
 8007854:	d111      	bne.n	800787a <__ieee754_sqrt+0x17e>
 8007856:	3601      	adds	r6, #1
 8007858:	463c      	mov	r4, r7
 800785a:	1072      	asrs	r2, r6, #1
 800785c:	0863      	lsrs	r3, r4, #1
 800785e:	07f1      	lsls	r1, r6, #31
 8007860:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8007864:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8007868:	bf48      	it	mi
 800786a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800786e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8007872:	4618      	mov	r0, r3
 8007874:	e756      	b.n	8007724 <__ieee754_sqrt+0x28>
 8007876:	4690      	mov	r8, r2
 8007878:	e7be      	b.n	80077f8 <__ieee754_sqrt+0xfc>
 800787a:	f7f8 fcab 	bl	80001d4 <__adddf3>
 800787e:	e9da 8900 	ldrd	r8, r9, [sl]
 8007882:	4602      	mov	r2, r0
 8007884:	460b      	mov	r3, r1
 8007886:	4640      	mov	r0, r8
 8007888:	4649      	mov	r1, r9
 800788a:	f7f9 f8cb 	bl	8000a24 <__aeabi_dcmplt>
 800788e:	b120      	cbz	r0, 800789a <__ieee754_sqrt+0x19e>
 8007890:	1ca0      	adds	r0, r4, #2
 8007892:	bf08      	it	eq
 8007894:	3601      	addeq	r6, #1
 8007896:	3402      	adds	r4, #2
 8007898:	e7df      	b.n	800785a <__ieee754_sqrt+0x15e>
 800789a:	1c63      	adds	r3, r4, #1
 800789c:	f023 0401 	bic.w	r4, r3, #1
 80078a0:	e7db      	b.n	800785a <__ieee754_sqrt+0x15e>
 80078a2:	bf00      	nop
 80078a4:	7ff00000 	.word	0x7ff00000
 80078a8:	20000068 	.word	0x20000068
 80078ac:	20000060 	.word	0x20000060

080078b0 <__ieee754_pow>:
 80078b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b4:	b091      	sub	sp, #68	@ 0x44
 80078b6:	ed8d 1b00 	vstr	d1, [sp]
 80078ba:	e9dd 1900 	ldrd	r1, r9, [sp]
 80078be:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80078c2:	ea5a 0001 	orrs.w	r0, sl, r1
 80078c6:	ec57 6b10 	vmov	r6, r7, d0
 80078ca:	d113      	bne.n	80078f4 <__ieee754_pow+0x44>
 80078cc:	19b3      	adds	r3, r6, r6
 80078ce:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80078d2:	4152      	adcs	r2, r2
 80078d4:	4298      	cmp	r0, r3
 80078d6:	4b98      	ldr	r3, [pc, #608]	@ (8007b38 <__ieee754_pow+0x288>)
 80078d8:	4193      	sbcs	r3, r2
 80078da:	f080 84ea 	bcs.w	80082b2 <__ieee754_pow+0xa02>
 80078de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078e2:	4630      	mov	r0, r6
 80078e4:	4639      	mov	r1, r7
 80078e6:	f7f8 fc75 	bl	80001d4 <__adddf3>
 80078ea:	ec41 0b10 	vmov	d0, r0, r1
 80078ee:	b011      	add	sp, #68	@ 0x44
 80078f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078f4:	4a91      	ldr	r2, [pc, #580]	@ (8007b3c <__ieee754_pow+0x28c>)
 80078f6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80078fa:	4590      	cmp	r8, r2
 80078fc:	463d      	mov	r5, r7
 80078fe:	4633      	mov	r3, r6
 8007900:	d806      	bhi.n	8007910 <__ieee754_pow+0x60>
 8007902:	d101      	bne.n	8007908 <__ieee754_pow+0x58>
 8007904:	2e00      	cmp	r6, #0
 8007906:	d1ea      	bne.n	80078de <__ieee754_pow+0x2e>
 8007908:	4592      	cmp	sl, r2
 800790a:	d801      	bhi.n	8007910 <__ieee754_pow+0x60>
 800790c:	d10e      	bne.n	800792c <__ieee754_pow+0x7c>
 800790e:	b169      	cbz	r1, 800792c <__ieee754_pow+0x7c>
 8007910:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8007914:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8007918:	431d      	orrs	r5, r3
 800791a:	d1e0      	bne.n	80078de <__ieee754_pow+0x2e>
 800791c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007920:	18db      	adds	r3, r3, r3
 8007922:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8007926:	4152      	adcs	r2, r2
 8007928:	429d      	cmp	r5, r3
 800792a:	e7d4      	b.n	80078d6 <__ieee754_pow+0x26>
 800792c:	2d00      	cmp	r5, #0
 800792e:	46c3      	mov	fp, r8
 8007930:	da3a      	bge.n	80079a8 <__ieee754_pow+0xf8>
 8007932:	4a83      	ldr	r2, [pc, #524]	@ (8007b40 <__ieee754_pow+0x290>)
 8007934:	4592      	cmp	sl, r2
 8007936:	d84d      	bhi.n	80079d4 <__ieee754_pow+0x124>
 8007938:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800793c:	4592      	cmp	sl, r2
 800793e:	f240 84c7 	bls.w	80082d0 <__ieee754_pow+0xa20>
 8007942:	ea4f 522a 	mov.w	r2, sl, asr #20
 8007946:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800794a:	2a14      	cmp	r2, #20
 800794c:	dd0f      	ble.n	800796e <__ieee754_pow+0xbe>
 800794e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8007952:	fa21 f402 	lsr.w	r4, r1, r2
 8007956:	fa04 f202 	lsl.w	r2, r4, r2
 800795a:	428a      	cmp	r2, r1
 800795c:	f040 84b8 	bne.w	80082d0 <__ieee754_pow+0xa20>
 8007960:	f004 0401 	and.w	r4, r4, #1
 8007964:	f1c4 0402 	rsb	r4, r4, #2
 8007968:	2900      	cmp	r1, #0
 800796a:	d158      	bne.n	8007a1e <__ieee754_pow+0x16e>
 800796c:	e00e      	b.n	800798c <__ieee754_pow+0xdc>
 800796e:	2900      	cmp	r1, #0
 8007970:	d154      	bne.n	8007a1c <__ieee754_pow+0x16c>
 8007972:	f1c2 0214 	rsb	r2, r2, #20
 8007976:	fa4a f402 	asr.w	r4, sl, r2
 800797a:	fa04 f202 	lsl.w	r2, r4, r2
 800797e:	4552      	cmp	r2, sl
 8007980:	f040 84a3 	bne.w	80082ca <__ieee754_pow+0xa1a>
 8007984:	f004 0401 	and.w	r4, r4, #1
 8007988:	f1c4 0402 	rsb	r4, r4, #2
 800798c:	4a6d      	ldr	r2, [pc, #436]	@ (8007b44 <__ieee754_pow+0x294>)
 800798e:	4592      	cmp	sl, r2
 8007990:	d12e      	bne.n	80079f0 <__ieee754_pow+0x140>
 8007992:	f1b9 0f00 	cmp.w	r9, #0
 8007996:	f280 8494 	bge.w	80082c2 <__ieee754_pow+0xa12>
 800799a:	496a      	ldr	r1, [pc, #424]	@ (8007b44 <__ieee754_pow+0x294>)
 800799c:	4632      	mov	r2, r6
 800799e:	463b      	mov	r3, r7
 80079a0:	2000      	movs	r0, #0
 80079a2:	f7f8 fef7 	bl	8000794 <__aeabi_ddiv>
 80079a6:	e7a0      	b.n	80078ea <__ieee754_pow+0x3a>
 80079a8:	2400      	movs	r4, #0
 80079aa:	bbc1      	cbnz	r1, 8007a1e <__ieee754_pow+0x16e>
 80079ac:	4a63      	ldr	r2, [pc, #396]	@ (8007b3c <__ieee754_pow+0x28c>)
 80079ae:	4592      	cmp	sl, r2
 80079b0:	d1ec      	bne.n	800798c <__ieee754_pow+0xdc>
 80079b2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 80079b6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80079ba:	431a      	orrs	r2, r3
 80079bc:	f000 8479 	beq.w	80082b2 <__ieee754_pow+0xa02>
 80079c0:	4b61      	ldr	r3, [pc, #388]	@ (8007b48 <__ieee754_pow+0x298>)
 80079c2:	4598      	cmp	r8, r3
 80079c4:	d908      	bls.n	80079d8 <__ieee754_pow+0x128>
 80079c6:	f1b9 0f00 	cmp.w	r9, #0
 80079ca:	f2c0 8476 	blt.w	80082ba <__ieee754_pow+0xa0a>
 80079ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079d2:	e78a      	b.n	80078ea <__ieee754_pow+0x3a>
 80079d4:	2402      	movs	r4, #2
 80079d6:	e7e8      	b.n	80079aa <__ieee754_pow+0xfa>
 80079d8:	f1b9 0f00 	cmp.w	r9, #0
 80079dc:	f04f 0000 	mov.w	r0, #0
 80079e0:	f04f 0100 	mov.w	r1, #0
 80079e4:	da81      	bge.n	80078ea <__ieee754_pow+0x3a>
 80079e6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80079ea:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80079ee:	e77c      	b.n	80078ea <__ieee754_pow+0x3a>
 80079f0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80079f4:	d106      	bne.n	8007a04 <__ieee754_pow+0x154>
 80079f6:	4632      	mov	r2, r6
 80079f8:	463b      	mov	r3, r7
 80079fa:	4630      	mov	r0, r6
 80079fc:	4639      	mov	r1, r7
 80079fe:	f7f8 fd9f 	bl	8000540 <__aeabi_dmul>
 8007a02:	e772      	b.n	80078ea <__ieee754_pow+0x3a>
 8007a04:	4a51      	ldr	r2, [pc, #324]	@ (8007b4c <__ieee754_pow+0x29c>)
 8007a06:	4591      	cmp	r9, r2
 8007a08:	d109      	bne.n	8007a1e <__ieee754_pow+0x16e>
 8007a0a:	2d00      	cmp	r5, #0
 8007a0c:	db07      	blt.n	8007a1e <__ieee754_pow+0x16e>
 8007a0e:	ec47 6b10 	vmov	d0, r6, r7
 8007a12:	b011      	add	sp, #68	@ 0x44
 8007a14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a18:	f7ff be70 	b.w	80076fc <__ieee754_sqrt>
 8007a1c:	2400      	movs	r4, #0
 8007a1e:	ec47 6b10 	vmov	d0, r6, r7
 8007a22:	9302      	str	r3, [sp, #8]
 8007a24:	f000 fc88 	bl	8008338 <fabs>
 8007a28:	9b02      	ldr	r3, [sp, #8]
 8007a2a:	ec51 0b10 	vmov	r0, r1, d0
 8007a2e:	bb53      	cbnz	r3, 8007a86 <__ieee754_pow+0x1d6>
 8007a30:	4b44      	ldr	r3, [pc, #272]	@ (8007b44 <__ieee754_pow+0x294>)
 8007a32:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d002      	beq.n	8007a40 <__ieee754_pow+0x190>
 8007a3a:	f1b8 0f00 	cmp.w	r8, #0
 8007a3e:	d122      	bne.n	8007a86 <__ieee754_pow+0x1d6>
 8007a40:	f1b9 0f00 	cmp.w	r9, #0
 8007a44:	da05      	bge.n	8007a52 <__ieee754_pow+0x1a2>
 8007a46:	4602      	mov	r2, r0
 8007a48:	460b      	mov	r3, r1
 8007a4a:	2000      	movs	r0, #0
 8007a4c:	493d      	ldr	r1, [pc, #244]	@ (8007b44 <__ieee754_pow+0x294>)
 8007a4e:	f7f8 fea1 	bl	8000794 <__aeabi_ddiv>
 8007a52:	2d00      	cmp	r5, #0
 8007a54:	f6bf af49 	bge.w	80078ea <__ieee754_pow+0x3a>
 8007a58:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8007a5c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8007a60:	ea58 0804 	orrs.w	r8, r8, r4
 8007a64:	d108      	bne.n	8007a78 <__ieee754_pow+0x1c8>
 8007a66:	4602      	mov	r2, r0
 8007a68:	460b      	mov	r3, r1
 8007a6a:	4610      	mov	r0, r2
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	f7f8 fbaf 	bl	80001d0 <__aeabi_dsub>
 8007a72:	4602      	mov	r2, r0
 8007a74:	460b      	mov	r3, r1
 8007a76:	e794      	b.n	80079a2 <__ieee754_pow+0xf2>
 8007a78:	2c01      	cmp	r4, #1
 8007a7a:	f47f af36 	bne.w	80078ea <__ieee754_pow+0x3a>
 8007a7e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007a82:	4619      	mov	r1, r3
 8007a84:	e731      	b.n	80078ea <__ieee754_pow+0x3a>
 8007a86:	0feb      	lsrs	r3, r5, #31
 8007a88:	3b01      	subs	r3, #1
 8007a8a:	ea53 0204 	orrs.w	r2, r3, r4
 8007a8e:	d102      	bne.n	8007a96 <__ieee754_pow+0x1e6>
 8007a90:	4632      	mov	r2, r6
 8007a92:	463b      	mov	r3, r7
 8007a94:	e7e9      	b.n	8007a6a <__ieee754_pow+0x1ba>
 8007a96:	3c01      	subs	r4, #1
 8007a98:	431c      	orrs	r4, r3
 8007a9a:	d016      	beq.n	8007aca <__ieee754_pow+0x21a>
 8007a9c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8007b28 <__ieee754_pow+0x278>
 8007aa0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8007aa4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007aa8:	f240 8112 	bls.w	8007cd0 <__ieee754_pow+0x420>
 8007aac:	4b28      	ldr	r3, [pc, #160]	@ (8007b50 <__ieee754_pow+0x2a0>)
 8007aae:	459a      	cmp	sl, r3
 8007ab0:	4b25      	ldr	r3, [pc, #148]	@ (8007b48 <__ieee754_pow+0x298>)
 8007ab2:	d916      	bls.n	8007ae2 <__ieee754_pow+0x232>
 8007ab4:	4598      	cmp	r8, r3
 8007ab6:	d80b      	bhi.n	8007ad0 <__ieee754_pow+0x220>
 8007ab8:	f1b9 0f00 	cmp.w	r9, #0
 8007abc:	da0b      	bge.n	8007ad6 <__ieee754_pow+0x226>
 8007abe:	2000      	movs	r0, #0
 8007ac0:	b011      	add	sp, #68	@ 0x44
 8007ac2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ac6:	f000 bcf3 	b.w	80084b0 <__math_oflow>
 8007aca:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8007b30 <__ieee754_pow+0x280>
 8007ace:	e7e7      	b.n	8007aa0 <__ieee754_pow+0x1f0>
 8007ad0:	f1b9 0f00 	cmp.w	r9, #0
 8007ad4:	dcf3      	bgt.n	8007abe <__ieee754_pow+0x20e>
 8007ad6:	2000      	movs	r0, #0
 8007ad8:	b011      	add	sp, #68	@ 0x44
 8007ada:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ade:	f000 bcdf 	b.w	80084a0 <__math_uflow>
 8007ae2:	4598      	cmp	r8, r3
 8007ae4:	d20c      	bcs.n	8007b00 <__ieee754_pow+0x250>
 8007ae6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007aea:	2200      	movs	r2, #0
 8007aec:	2300      	movs	r3, #0
 8007aee:	f7f8 ff99 	bl	8000a24 <__aeabi_dcmplt>
 8007af2:	3800      	subs	r0, #0
 8007af4:	bf18      	it	ne
 8007af6:	2001      	movne	r0, #1
 8007af8:	f1b9 0f00 	cmp.w	r9, #0
 8007afc:	daec      	bge.n	8007ad8 <__ieee754_pow+0x228>
 8007afe:	e7df      	b.n	8007ac0 <__ieee754_pow+0x210>
 8007b00:	4b10      	ldr	r3, [pc, #64]	@ (8007b44 <__ieee754_pow+0x294>)
 8007b02:	4598      	cmp	r8, r3
 8007b04:	f04f 0200 	mov.w	r2, #0
 8007b08:	d924      	bls.n	8007b54 <__ieee754_pow+0x2a4>
 8007b0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b0e:	2300      	movs	r3, #0
 8007b10:	f7f8 ff88 	bl	8000a24 <__aeabi_dcmplt>
 8007b14:	3800      	subs	r0, #0
 8007b16:	bf18      	it	ne
 8007b18:	2001      	movne	r0, #1
 8007b1a:	f1b9 0f00 	cmp.w	r9, #0
 8007b1e:	dccf      	bgt.n	8007ac0 <__ieee754_pow+0x210>
 8007b20:	e7da      	b.n	8007ad8 <__ieee754_pow+0x228>
 8007b22:	bf00      	nop
 8007b24:	f3af 8000 	nop.w
 8007b28:	00000000 	.word	0x00000000
 8007b2c:	3ff00000 	.word	0x3ff00000
 8007b30:	00000000 	.word	0x00000000
 8007b34:	bff00000 	.word	0xbff00000
 8007b38:	fff00000 	.word	0xfff00000
 8007b3c:	7ff00000 	.word	0x7ff00000
 8007b40:	433fffff 	.word	0x433fffff
 8007b44:	3ff00000 	.word	0x3ff00000
 8007b48:	3fefffff 	.word	0x3fefffff
 8007b4c:	3fe00000 	.word	0x3fe00000
 8007b50:	43f00000 	.word	0x43f00000
 8007b54:	4b5a      	ldr	r3, [pc, #360]	@ (8007cc0 <__ieee754_pow+0x410>)
 8007b56:	f7f8 fb3b 	bl	80001d0 <__aeabi_dsub>
 8007b5a:	a351      	add	r3, pc, #324	@ (adr r3, 8007ca0 <__ieee754_pow+0x3f0>)
 8007b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b60:	4604      	mov	r4, r0
 8007b62:	460d      	mov	r5, r1
 8007b64:	f7f8 fcec 	bl	8000540 <__aeabi_dmul>
 8007b68:	a34f      	add	r3, pc, #316	@ (adr r3, 8007ca8 <__ieee754_pow+0x3f8>)
 8007b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6e:	4606      	mov	r6, r0
 8007b70:	460f      	mov	r7, r1
 8007b72:	4620      	mov	r0, r4
 8007b74:	4629      	mov	r1, r5
 8007b76:	f7f8 fce3 	bl	8000540 <__aeabi_dmul>
 8007b7a:	4b52      	ldr	r3, [pc, #328]	@ (8007cc4 <__ieee754_pow+0x414>)
 8007b7c:	4682      	mov	sl, r0
 8007b7e:	468b      	mov	fp, r1
 8007b80:	2200      	movs	r2, #0
 8007b82:	4620      	mov	r0, r4
 8007b84:	4629      	mov	r1, r5
 8007b86:	f7f8 fcdb 	bl	8000540 <__aeabi_dmul>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	a148      	add	r1, pc, #288	@ (adr r1, 8007cb0 <__ieee754_pow+0x400>)
 8007b90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b94:	f7f8 fb1c 	bl	80001d0 <__aeabi_dsub>
 8007b98:	4622      	mov	r2, r4
 8007b9a:	462b      	mov	r3, r5
 8007b9c:	f7f8 fcd0 	bl	8000540 <__aeabi_dmul>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	2000      	movs	r0, #0
 8007ba6:	4948      	ldr	r1, [pc, #288]	@ (8007cc8 <__ieee754_pow+0x418>)
 8007ba8:	f7f8 fb12 	bl	80001d0 <__aeabi_dsub>
 8007bac:	4622      	mov	r2, r4
 8007bae:	4680      	mov	r8, r0
 8007bb0:	4689      	mov	r9, r1
 8007bb2:	462b      	mov	r3, r5
 8007bb4:	4620      	mov	r0, r4
 8007bb6:	4629      	mov	r1, r5
 8007bb8:	f7f8 fcc2 	bl	8000540 <__aeabi_dmul>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	4640      	mov	r0, r8
 8007bc2:	4649      	mov	r1, r9
 8007bc4:	f7f8 fcbc 	bl	8000540 <__aeabi_dmul>
 8007bc8:	a33b      	add	r3, pc, #236	@ (adr r3, 8007cb8 <__ieee754_pow+0x408>)
 8007bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bce:	f7f8 fcb7 	bl	8000540 <__aeabi_dmul>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	4650      	mov	r0, sl
 8007bd8:	4659      	mov	r1, fp
 8007bda:	f7f8 faf9 	bl	80001d0 <__aeabi_dsub>
 8007bde:	4602      	mov	r2, r0
 8007be0:	460b      	mov	r3, r1
 8007be2:	4680      	mov	r8, r0
 8007be4:	4689      	mov	r9, r1
 8007be6:	4630      	mov	r0, r6
 8007be8:	4639      	mov	r1, r7
 8007bea:	f7f8 faf3 	bl	80001d4 <__adddf3>
 8007bee:	2400      	movs	r4, #0
 8007bf0:	4632      	mov	r2, r6
 8007bf2:	463b      	mov	r3, r7
 8007bf4:	4620      	mov	r0, r4
 8007bf6:	460d      	mov	r5, r1
 8007bf8:	f7f8 faea 	bl	80001d0 <__aeabi_dsub>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	460b      	mov	r3, r1
 8007c00:	4640      	mov	r0, r8
 8007c02:	4649      	mov	r1, r9
 8007c04:	f7f8 fae4 	bl	80001d0 <__aeabi_dsub>
 8007c08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c0c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007c10:	2300      	movs	r3, #0
 8007c12:	9304      	str	r3, [sp, #16]
 8007c14:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007c18:	4606      	mov	r6, r0
 8007c1a:	460f      	mov	r7, r1
 8007c1c:	4652      	mov	r2, sl
 8007c1e:	465b      	mov	r3, fp
 8007c20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c24:	f7f8 fad4 	bl	80001d0 <__aeabi_dsub>
 8007c28:	4622      	mov	r2, r4
 8007c2a:	462b      	mov	r3, r5
 8007c2c:	f7f8 fc88 	bl	8000540 <__aeabi_dmul>
 8007c30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c34:	4680      	mov	r8, r0
 8007c36:	4689      	mov	r9, r1
 8007c38:	4630      	mov	r0, r6
 8007c3a:	4639      	mov	r1, r7
 8007c3c:	f7f8 fc80 	bl	8000540 <__aeabi_dmul>
 8007c40:	4602      	mov	r2, r0
 8007c42:	460b      	mov	r3, r1
 8007c44:	4640      	mov	r0, r8
 8007c46:	4649      	mov	r1, r9
 8007c48:	f7f8 fac4 	bl	80001d4 <__adddf3>
 8007c4c:	4652      	mov	r2, sl
 8007c4e:	465b      	mov	r3, fp
 8007c50:	4606      	mov	r6, r0
 8007c52:	460f      	mov	r7, r1
 8007c54:	4620      	mov	r0, r4
 8007c56:	4629      	mov	r1, r5
 8007c58:	f7f8 fc72 	bl	8000540 <__aeabi_dmul>
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	4602      	mov	r2, r0
 8007c60:	4680      	mov	r8, r0
 8007c62:	4689      	mov	r9, r1
 8007c64:	4630      	mov	r0, r6
 8007c66:	4639      	mov	r1, r7
 8007c68:	f7f8 fab4 	bl	80001d4 <__adddf3>
 8007c6c:	4b17      	ldr	r3, [pc, #92]	@ (8007ccc <__ieee754_pow+0x41c>)
 8007c6e:	4299      	cmp	r1, r3
 8007c70:	4604      	mov	r4, r0
 8007c72:	460d      	mov	r5, r1
 8007c74:	468a      	mov	sl, r1
 8007c76:	468b      	mov	fp, r1
 8007c78:	f340 82ef 	ble.w	800825a <__ieee754_pow+0x9aa>
 8007c7c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8007c80:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8007c84:	4303      	orrs	r3, r0
 8007c86:	f000 81e8 	beq.w	800805a <__ieee754_pow+0x7aa>
 8007c8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	2300      	movs	r3, #0
 8007c92:	f7f8 fec7 	bl	8000a24 <__aeabi_dcmplt>
 8007c96:	3800      	subs	r0, #0
 8007c98:	bf18      	it	ne
 8007c9a:	2001      	movne	r0, #1
 8007c9c:	e710      	b.n	8007ac0 <__ieee754_pow+0x210>
 8007c9e:	bf00      	nop
 8007ca0:	60000000 	.word	0x60000000
 8007ca4:	3ff71547 	.word	0x3ff71547
 8007ca8:	f85ddf44 	.word	0xf85ddf44
 8007cac:	3e54ae0b 	.word	0x3e54ae0b
 8007cb0:	55555555 	.word	0x55555555
 8007cb4:	3fd55555 	.word	0x3fd55555
 8007cb8:	652b82fe 	.word	0x652b82fe
 8007cbc:	3ff71547 	.word	0x3ff71547
 8007cc0:	3ff00000 	.word	0x3ff00000
 8007cc4:	3fd00000 	.word	0x3fd00000
 8007cc8:	3fe00000 	.word	0x3fe00000
 8007ccc:	408fffff 	.word	0x408fffff
 8007cd0:	4bd5      	ldr	r3, [pc, #852]	@ (8008028 <__ieee754_pow+0x778>)
 8007cd2:	402b      	ands	r3, r5
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	b92b      	cbnz	r3, 8007ce4 <__ieee754_pow+0x434>
 8007cd8:	4bd4      	ldr	r3, [pc, #848]	@ (800802c <__ieee754_pow+0x77c>)
 8007cda:	f7f8 fc31 	bl	8000540 <__aeabi_dmul>
 8007cde:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8007ce2:	468b      	mov	fp, r1
 8007ce4:	ea4f 532b 	mov.w	r3, fp, asr #20
 8007ce8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8007cec:	4413      	add	r3, r2
 8007cee:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cf0:	4bcf      	ldr	r3, [pc, #828]	@ (8008030 <__ieee754_pow+0x780>)
 8007cf2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8007cf6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8007cfa:	459b      	cmp	fp, r3
 8007cfc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007d00:	dd08      	ble.n	8007d14 <__ieee754_pow+0x464>
 8007d02:	4bcc      	ldr	r3, [pc, #816]	@ (8008034 <__ieee754_pow+0x784>)
 8007d04:	459b      	cmp	fp, r3
 8007d06:	f340 81a5 	ble.w	8008054 <__ieee754_pow+0x7a4>
 8007d0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d10:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8007d14:	f04f 0a00 	mov.w	sl, #0
 8007d18:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8007d1c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d1e:	4bc6      	ldr	r3, [pc, #792]	@ (8008038 <__ieee754_pow+0x788>)
 8007d20:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007d24:	ed93 7b00 	vldr	d7, [r3]
 8007d28:	4629      	mov	r1, r5
 8007d2a:	ec53 2b17 	vmov	r2, r3, d7
 8007d2e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007d32:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007d36:	f7f8 fa4b 	bl	80001d0 <__aeabi_dsub>
 8007d3a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007d3e:	4606      	mov	r6, r0
 8007d40:	460f      	mov	r7, r1
 8007d42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d46:	f7f8 fa45 	bl	80001d4 <__adddf3>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	2000      	movs	r0, #0
 8007d50:	49ba      	ldr	r1, [pc, #744]	@ (800803c <__ieee754_pow+0x78c>)
 8007d52:	f7f8 fd1f 	bl	8000794 <__aeabi_ddiv>
 8007d56:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	4630      	mov	r0, r6
 8007d60:	4639      	mov	r1, r7
 8007d62:	f7f8 fbed 	bl	8000540 <__aeabi_dmul>
 8007d66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d6a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8007d6e:	106d      	asrs	r5, r5, #1
 8007d70:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8007d74:	f04f 0b00 	mov.w	fp, #0
 8007d78:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8007d7c:	4661      	mov	r1, ip
 8007d7e:	2200      	movs	r2, #0
 8007d80:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8007d84:	4658      	mov	r0, fp
 8007d86:	46e1      	mov	r9, ip
 8007d88:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8007d8c:	4614      	mov	r4, r2
 8007d8e:	461d      	mov	r5, r3
 8007d90:	f7f8 fbd6 	bl	8000540 <__aeabi_dmul>
 8007d94:	4602      	mov	r2, r0
 8007d96:	460b      	mov	r3, r1
 8007d98:	4630      	mov	r0, r6
 8007d9a:	4639      	mov	r1, r7
 8007d9c:	f7f8 fa18 	bl	80001d0 <__aeabi_dsub>
 8007da0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007da4:	4606      	mov	r6, r0
 8007da6:	460f      	mov	r7, r1
 8007da8:	4620      	mov	r0, r4
 8007daa:	4629      	mov	r1, r5
 8007dac:	f7f8 fa10 	bl	80001d0 <__aeabi_dsub>
 8007db0:	4602      	mov	r2, r0
 8007db2:	460b      	mov	r3, r1
 8007db4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007db8:	f7f8 fa0a 	bl	80001d0 <__aeabi_dsub>
 8007dbc:	465a      	mov	r2, fp
 8007dbe:	464b      	mov	r3, r9
 8007dc0:	f7f8 fbbe 	bl	8000540 <__aeabi_dmul>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	4630      	mov	r0, r6
 8007dca:	4639      	mov	r1, r7
 8007dcc:	f7f8 fa00 	bl	80001d0 <__aeabi_dsub>
 8007dd0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007dd4:	f7f8 fbb4 	bl	8000540 <__aeabi_dmul>
 8007dd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ddc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007de0:	4610      	mov	r0, r2
 8007de2:	4619      	mov	r1, r3
 8007de4:	f7f8 fbac 	bl	8000540 <__aeabi_dmul>
 8007de8:	a37d      	add	r3, pc, #500	@ (adr r3, 8007fe0 <__ieee754_pow+0x730>)
 8007dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dee:	4604      	mov	r4, r0
 8007df0:	460d      	mov	r5, r1
 8007df2:	f7f8 fba5 	bl	8000540 <__aeabi_dmul>
 8007df6:	a37c      	add	r3, pc, #496	@ (adr r3, 8007fe8 <__ieee754_pow+0x738>)
 8007df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfc:	f7f8 f9ea 	bl	80001d4 <__adddf3>
 8007e00:	4622      	mov	r2, r4
 8007e02:	462b      	mov	r3, r5
 8007e04:	f7f8 fb9c 	bl	8000540 <__aeabi_dmul>
 8007e08:	a379      	add	r3, pc, #484	@ (adr r3, 8007ff0 <__ieee754_pow+0x740>)
 8007e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e0e:	f7f8 f9e1 	bl	80001d4 <__adddf3>
 8007e12:	4622      	mov	r2, r4
 8007e14:	462b      	mov	r3, r5
 8007e16:	f7f8 fb93 	bl	8000540 <__aeabi_dmul>
 8007e1a:	a377      	add	r3, pc, #476	@ (adr r3, 8007ff8 <__ieee754_pow+0x748>)
 8007e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e20:	f7f8 f9d8 	bl	80001d4 <__adddf3>
 8007e24:	4622      	mov	r2, r4
 8007e26:	462b      	mov	r3, r5
 8007e28:	f7f8 fb8a 	bl	8000540 <__aeabi_dmul>
 8007e2c:	a374      	add	r3, pc, #464	@ (adr r3, 8008000 <__ieee754_pow+0x750>)
 8007e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e32:	f7f8 f9cf 	bl	80001d4 <__adddf3>
 8007e36:	4622      	mov	r2, r4
 8007e38:	462b      	mov	r3, r5
 8007e3a:	f7f8 fb81 	bl	8000540 <__aeabi_dmul>
 8007e3e:	a372      	add	r3, pc, #456	@ (adr r3, 8008008 <__ieee754_pow+0x758>)
 8007e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e44:	f7f8 f9c6 	bl	80001d4 <__adddf3>
 8007e48:	4622      	mov	r2, r4
 8007e4a:	4606      	mov	r6, r0
 8007e4c:	460f      	mov	r7, r1
 8007e4e:	462b      	mov	r3, r5
 8007e50:	4620      	mov	r0, r4
 8007e52:	4629      	mov	r1, r5
 8007e54:	f7f8 fb74 	bl	8000540 <__aeabi_dmul>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	4630      	mov	r0, r6
 8007e5e:	4639      	mov	r1, r7
 8007e60:	f7f8 fb6e 	bl	8000540 <__aeabi_dmul>
 8007e64:	465a      	mov	r2, fp
 8007e66:	4604      	mov	r4, r0
 8007e68:	460d      	mov	r5, r1
 8007e6a:	464b      	mov	r3, r9
 8007e6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e70:	f7f8 f9b0 	bl	80001d4 <__adddf3>
 8007e74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e78:	f7f8 fb62 	bl	8000540 <__aeabi_dmul>
 8007e7c:	4622      	mov	r2, r4
 8007e7e:	462b      	mov	r3, r5
 8007e80:	f7f8 f9a8 	bl	80001d4 <__adddf3>
 8007e84:	465a      	mov	r2, fp
 8007e86:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007e8a:	464b      	mov	r3, r9
 8007e8c:	4658      	mov	r0, fp
 8007e8e:	4649      	mov	r1, r9
 8007e90:	f7f8 fb56 	bl	8000540 <__aeabi_dmul>
 8007e94:	4b6a      	ldr	r3, [pc, #424]	@ (8008040 <__ieee754_pow+0x790>)
 8007e96:	2200      	movs	r2, #0
 8007e98:	4606      	mov	r6, r0
 8007e9a:	460f      	mov	r7, r1
 8007e9c:	f7f8 f99a 	bl	80001d4 <__adddf3>
 8007ea0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007ea4:	f7f8 f996 	bl	80001d4 <__adddf3>
 8007ea8:	46d8      	mov	r8, fp
 8007eaa:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8007eae:	460d      	mov	r5, r1
 8007eb0:	465a      	mov	r2, fp
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	4640      	mov	r0, r8
 8007eb6:	4649      	mov	r1, r9
 8007eb8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8007ebc:	f7f8 fb40 	bl	8000540 <__aeabi_dmul>
 8007ec0:	465c      	mov	r4, fp
 8007ec2:	4680      	mov	r8, r0
 8007ec4:	4689      	mov	r9, r1
 8007ec6:	4b5e      	ldr	r3, [pc, #376]	@ (8008040 <__ieee754_pow+0x790>)
 8007ec8:	2200      	movs	r2, #0
 8007eca:	4620      	mov	r0, r4
 8007ecc:	4629      	mov	r1, r5
 8007ece:	f7f8 f97f 	bl	80001d0 <__aeabi_dsub>
 8007ed2:	4632      	mov	r2, r6
 8007ed4:	463b      	mov	r3, r7
 8007ed6:	f7f8 f97b 	bl	80001d0 <__aeabi_dsub>
 8007eda:	4602      	mov	r2, r0
 8007edc:	460b      	mov	r3, r1
 8007ede:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007ee2:	f7f8 f975 	bl	80001d0 <__aeabi_dsub>
 8007ee6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007eea:	f7f8 fb29 	bl	8000540 <__aeabi_dmul>
 8007eee:	4622      	mov	r2, r4
 8007ef0:	4606      	mov	r6, r0
 8007ef2:	460f      	mov	r7, r1
 8007ef4:	462b      	mov	r3, r5
 8007ef6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007efa:	f7f8 fb21 	bl	8000540 <__aeabi_dmul>
 8007efe:	4602      	mov	r2, r0
 8007f00:	460b      	mov	r3, r1
 8007f02:	4630      	mov	r0, r6
 8007f04:	4639      	mov	r1, r7
 8007f06:	f7f8 f965 	bl	80001d4 <__adddf3>
 8007f0a:	4606      	mov	r6, r0
 8007f0c:	460f      	mov	r7, r1
 8007f0e:	4602      	mov	r2, r0
 8007f10:	460b      	mov	r3, r1
 8007f12:	4640      	mov	r0, r8
 8007f14:	4649      	mov	r1, r9
 8007f16:	f7f8 f95d 	bl	80001d4 <__adddf3>
 8007f1a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8007f1e:	a33c      	add	r3, pc, #240	@ (adr r3, 8008010 <__ieee754_pow+0x760>)
 8007f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f24:	4658      	mov	r0, fp
 8007f26:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8007f2a:	460d      	mov	r5, r1
 8007f2c:	f7f8 fb08 	bl	8000540 <__aeabi_dmul>
 8007f30:	465c      	mov	r4, fp
 8007f32:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f36:	4642      	mov	r2, r8
 8007f38:	464b      	mov	r3, r9
 8007f3a:	4620      	mov	r0, r4
 8007f3c:	4629      	mov	r1, r5
 8007f3e:	f7f8 f947 	bl	80001d0 <__aeabi_dsub>
 8007f42:	4602      	mov	r2, r0
 8007f44:	460b      	mov	r3, r1
 8007f46:	4630      	mov	r0, r6
 8007f48:	4639      	mov	r1, r7
 8007f4a:	f7f8 f941 	bl	80001d0 <__aeabi_dsub>
 8007f4e:	a332      	add	r3, pc, #200	@ (adr r3, 8008018 <__ieee754_pow+0x768>)
 8007f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f54:	f7f8 faf4 	bl	8000540 <__aeabi_dmul>
 8007f58:	a331      	add	r3, pc, #196	@ (adr r3, 8008020 <__ieee754_pow+0x770>)
 8007f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5e:	4606      	mov	r6, r0
 8007f60:	460f      	mov	r7, r1
 8007f62:	4620      	mov	r0, r4
 8007f64:	4629      	mov	r1, r5
 8007f66:	f7f8 faeb 	bl	8000540 <__aeabi_dmul>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	4630      	mov	r0, r6
 8007f70:	4639      	mov	r1, r7
 8007f72:	f7f8 f92f 	bl	80001d4 <__adddf3>
 8007f76:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007f78:	4b32      	ldr	r3, [pc, #200]	@ (8008044 <__ieee754_pow+0x794>)
 8007f7a:	4413      	add	r3, r2
 8007f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f80:	f7f8 f928 	bl	80001d4 <__adddf3>
 8007f84:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007f88:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007f8a:	f7f8 fa6f 	bl	800046c <__aeabi_i2d>
 8007f8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007f90:	4b2d      	ldr	r3, [pc, #180]	@ (8008048 <__ieee754_pow+0x798>)
 8007f92:	4413      	add	r3, r2
 8007f94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f98:	4606      	mov	r6, r0
 8007f9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f9e:	460f      	mov	r7, r1
 8007fa0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fa4:	f7f8 f916 	bl	80001d4 <__adddf3>
 8007fa8:	4642      	mov	r2, r8
 8007faa:	464b      	mov	r3, r9
 8007fac:	f7f8 f912 	bl	80001d4 <__adddf3>
 8007fb0:	4632      	mov	r2, r6
 8007fb2:	463b      	mov	r3, r7
 8007fb4:	f7f8 f90e 	bl	80001d4 <__adddf3>
 8007fb8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8007fbc:	4632      	mov	r2, r6
 8007fbe:	463b      	mov	r3, r7
 8007fc0:	4658      	mov	r0, fp
 8007fc2:	460d      	mov	r5, r1
 8007fc4:	f7f8 f904 	bl	80001d0 <__aeabi_dsub>
 8007fc8:	4642      	mov	r2, r8
 8007fca:	464b      	mov	r3, r9
 8007fcc:	f7f8 f900 	bl	80001d0 <__aeabi_dsub>
 8007fd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fd4:	f7f8 f8fc 	bl	80001d0 <__aeabi_dsub>
 8007fd8:	465c      	mov	r4, fp
 8007fda:	4602      	mov	r2, r0
 8007fdc:	e036      	b.n	800804c <__ieee754_pow+0x79c>
 8007fde:	bf00      	nop
 8007fe0:	4a454eef 	.word	0x4a454eef
 8007fe4:	3fca7e28 	.word	0x3fca7e28
 8007fe8:	93c9db65 	.word	0x93c9db65
 8007fec:	3fcd864a 	.word	0x3fcd864a
 8007ff0:	a91d4101 	.word	0xa91d4101
 8007ff4:	3fd17460 	.word	0x3fd17460
 8007ff8:	518f264d 	.word	0x518f264d
 8007ffc:	3fd55555 	.word	0x3fd55555
 8008000:	db6fabff 	.word	0xdb6fabff
 8008004:	3fdb6db6 	.word	0x3fdb6db6
 8008008:	33333303 	.word	0x33333303
 800800c:	3fe33333 	.word	0x3fe33333
 8008010:	e0000000 	.word	0xe0000000
 8008014:	3feec709 	.word	0x3feec709
 8008018:	dc3a03fd 	.word	0xdc3a03fd
 800801c:	3feec709 	.word	0x3feec709
 8008020:	145b01f5 	.word	0x145b01f5
 8008024:	be3e2fe0 	.word	0xbe3e2fe0
 8008028:	7ff00000 	.word	0x7ff00000
 800802c:	43400000 	.word	0x43400000
 8008030:	0003988e 	.word	0x0003988e
 8008034:	000bb679 	.word	0x000bb679
 8008038:	08008530 	.word	0x08008530
 800803c:	3ff00000 	.word	0x3ff00000
 8008040:	40080000 	.word	0x40080000
 8008044:	08008510 	.word	0x08008510
 8008048:	08008520 	.word	0x08008520
 800804c:	460b      	mov	r3, r1
 800804e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008052:	e5d7      	b.n	8007c04 <__ieee754_pow+0x354>
 8008054:	f04f 0a01 	mov.w	sl, #1
 8008058:	e65e      	b.n	8007d18 <__ieee754_pow+0x468>
 800805a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800832c <__ieee754_pow+0xa7c>)
 800805c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008060:	4630      	mov	r0, r6
 8008062:	4639      	mov	r1, r7
 8008064:	f7f8 f8b6 	bl	80001d4 <__adddf3>
 8008068:	4642      	mov	r2, r8
 800806a:	e9cd 0100 	strd	r0, r1, [sp]
 800806e:	464b      	mov	r3, r9
 8008070:	4620      	mov	r0, r4
 8008072:	4629      	mov	r1, r5
 8008074:	f7f8 f8ac 	bl	80001d0 <__aeabi_dsub>
 8008078:	4602      	mov	r2, r0
 800807a:	460b      	mov	r3, r1
 800807c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008080:	f7f8 fcee 	bl	8000a60 <__aeabi_dcmpgt>
 8008084:	2800      	cmp	r0, #0
 8008086:	f47f ae00 	bne.w	8007c8a <__ieee754_pow+0x3da>
 800808a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800808e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8008092:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8008096:	fa43 fa0a 	asr.w	sl, r3, sl
 800809a:	44da      	add	sl, fp
 800809c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80080a0:	489d      	ldr	r0, [pc, #628]	@ (8008318 <__ieee754_pow+0xa68>)
 80080a2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80080a6:	4108      	asrs	r0, r1
 80080a8:	ea00 030a 	and.w	r3, r0, sl
 80080ac:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80080b0:	f1c1 0114 	rsb	r1, r1, #20
 80080b4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80080b8:	fa4a fa01 	asr.w	sl, sl, r1
 80080bc:	f1bb 0f00 	cmp.w	fp, #0
 80080c0:	4640      	mov	r0, r8
 80080c2:	4649      	mov	r1, r9
 80080c4:	f04f 0200 	mov.w	r2, #0
 80080c8:	bfb8      	it	lt
 80080ca:	f1ca 0a00 	rsblt	sl, sl, #0
 80080ce:	f7f8 f87f 	bl	80001d0 <__aeabi_dsub>
 80080d2:	4680      	mov	r8, r0
 80080d4:	4689      	mov	r9, r1
 80080d6:	4632      	mov	r2, r6
 80080d8:	463b      	mov	r3, r7
 80080da:	4640      	mov	r0, r8
 80080dc:	4649      	mov	r1, r9
 80080de:	f7f8 f879 	bl	80001d4 <__adddf3>
 80080e2:	2400      	movs	r4, #0
 80080e4:	a37c      	add	r3, pc, #496	@ (adr r3, 80082d8 <__ieee754_pow+0xa28>)
 80080e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ea:	4620      	mov	r0, r4
 80080ec:	460d      	mov	r5, r1
 80080ee:	f7f8 fa27 	bl	8000540 <__aeabi_dmul>
 80080f2:	4642      	mov	r2, r8
 80080f4:	e9cd 0100 	strd	r0, r1, [sp]
 80080f8:	464b      	mov	r3, r9
 80080fa:	4620      	mov	r0, r4
 80080fc:	4629      	mov	r1, r5
 80080fe:	f7f8 f867 	bl	80001d0 <__aeabi_dsub>
 8008102:	4602      	mov	r2, r0
 8008104:	460b      	mov	r3, r1
 8008106:	4630      	mov	r0, r6
 8008108:	4639      	mov	r1, r7
 800810a:	f7f8 f861 	bl	80001d0 <__aeabi_dsub>
 800810e:	a374      	add	r3, pc, #464	@ (adr r3, 80082e0 <__ieee754_pow+0xa30>)
 8008110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008114:	f7f8 fa14 	bl	8000540 <__aeabi_dmul>
 8008118:	a373      	add	r3, pc, #460	@ (adr r3, 80082e8 <__ieee754_pow+0xa38>)
 800811a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811e:	4680      	mov	r8, r0
 8008120:	4689      	mov	r9, r1
 8008122:	4620      	mov	r0, r4
 8008124:	4629      	mov	r1, r5
 8008126:	f7f8 fa0b 	bl	8000540 <__aeabi_dmul>
 800812a:	4602      	mov	r2, r0
 800812c:	460b      	mov	r3, r1
 800812e:	4640      	mov	r0, r8
 8008130:	4649      	mov	r1, r9
 8008132:	f7f8 f84f 	bl	80001d4 <__adddf3>
 8008136:	4604      	mov	r4, r0
 8008138:	460d      	mov	r5, r1
 800813a:	4602      	mov	r2, r0
 800813c:	460b      	mov	r3, r1
 800813e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008142:	f7f8 f847 	bl	80001d4 <__adddf3>
 8008146:	e9dd 2300 	ldrd	r2, r3, [sp]
 800814a:	4680      	mov	r8, r0
 800814c:	4689      	mov	r9, r1
 800814e:	f7f8 f83f 	bl	80001d0 <__aeabi_dsub>
 8008152:	4602      	mov	r2, r0
 8008154:	460b      	mov	r3, r1
 8008156:	4620      	mov	r0, r4
 8008158:	4629      	mov	r1, r5
 800815a:	f7f8 f839 	bl	80001d0 <__aeabi_dsub>
 800815e:	4642      	mov	r2, r8
 8008160:	4606      	mov	r6, r0
 8008162:	460f      	mov	r7, r1
 8008164:	464b      	mov	r3, r9
 8008166:	4640      	mov	r0, r8
 8008168:	4649      	mov	r1, r9
 800816a:	f7f8 f9e9 	bl	8000540 <__aeabi_dmul>
 800816e:	a360      	add	r3, pc, #384	@ (adr r3, 80082f0 <__ieee754_pow+0xa40>)
 8008170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008174:	4604      	mov	r4, r0
 8008176:	460d      	mov	r5, r1
 8008178:	f7f8 f9e2 	bl	8000540 <__aeabi_dmul>
 800817c:	a35e      	add	r3, pc, #376	@ (adr r3, 80082f8 <__ieee754_pow+0xa48>)
 800817e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008182:	f7f8 f825 	bl	80001d0 <__aeabi_dsub>
 8008186:	4622      	mov	r2, r4
 8008188:	462b      	mov	r3, r5
 800818a:	f7f8 f9d9 	bl	8000540 <__aeabi_dmul>
 800818e:	a35c      	add	r3, pc, #368	@ (adr r3, 8008300 <__ieee754_pow+0xa50>)
 8008190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008194:	f7f8 f81e 	bl	80001d4 <__adddf3>
 8008198:	4622      	mov	r2, r4
 800819a:	462b      	mov	r3, r5
 800819c:	f7f8 f9d0 	bl	8000540 <__aeabi_dmul>
 80081a0:	a359      	add	r3, pc, #356	@ (adr r3, 8008308 <__ieee754_pow+0xa58>)
 80081a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a6:	f7f8 f813 	bl	80001d0 <__aeabi_dsub>
 80081aa:	4622      	mov	r2, r4
 80081ac:	462b      	mov	r3, r5
 80081ae:	f7f8 f9c7 	bl	8000540 <__aeabi_dmul>
 80081b2:	a357      	add	r3, pc, #348	@ (adr r3, 8008310 <__ieee754_pow+0xa60>)
 80081b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b8:	f7f8 f80c 	bl	80001d4 <__adddf3>
 80081bc:	4622      	mov	r2, r4
 80081be:	462b      	mov	r3, r5
 80081c0:	f7f8 f9be 	bl	8000540 <__aeabi_dmul>
 80081c4:	4602      	mov	r2, r0
 80081c6:	460b      	mov	r3, r1
 80081c8:	4640      	mov	r0, r8
 80081ca:	4649      	mov	r1, r9
 80081cc:	f7f8 f800 	bl	80001d0 <__aeabi_dsub>
 80081d0:	4604      	mov	r4, r0
 80081d2:	460d      	mov	r5, r1
 80081d4:	4602      	mov	r2, r0
 80081d6:	460b      	mov	r3, r1
 80081d8:	4640      	mov	r0, r8
 80081da:	4649      	mov	r1, r9
 80081dc:	f7f8 f9b0 	bl	8000540 <__aeabi_dmul>
 80081e0:	2200      	movs	r2, #0
 80081e2:	e9cd 0100 	strd	r0, r1, [sp]
 80081e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80081ea:	4620      	mov	r0, r4
 80081ec:	4629      	mov	r1, r5
 80081ee:	f7f7 ffef 	bl	80001d0 <__aeabi_dsub>
 80081f2:	4602      	mov	r2, r0
 80081f4:	460b      	mov	r3, r1
 80081f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081fa:	f7f8 facb 	bl	8000794 <__aeabi_ddiv>
 80081fe:	4632      	mov	r2, r6
 8008200:	4604      	mov	r4, r0
 8008202:	460d      	mov	r5, r1
 8008204:	463b      	mov	r3, r7
 8008206:	4640      	mov	r0, r8
 8008208:	4649      	mov	r1, r9
 800820a:	f7f8 f999 	bl	8000540 <__aeabi_dmul>
 800820e:	4632      	mov	r2, r6
 8008210:	463b      	mov	r3, r7
 8008212:	f7f7 ffdf 	bl	80001d4 <__adddf3>
 8008216:	4602      	mov	r2, r0
 8008218:	460b      	mov	r3, r1
 800821a:	4620      	mov	r0, r4
 800821c:	4629      	mov	r1, r5
 800821e:	f7f7 ffd7 	bl	80001d0 <__aeabi_dsub>
 8008222:	4642      	mov	r2, r8
 8008224:	464b      	mov	r3, r9
 8008226:	f7f7 ffd3 	bl	80001d0 <__aeabi_dsub>
 800822a:	460b      	mov	r3, r1
 800822c:	4602      	mov	r2, r0
 800822e:	493b      	ldr	r1, [pc, #236]	@ (800831c <__ieee754_pow+0xa6c>)
 8008230:	2000      	movs	r0, #0
 8008232:	f7f7 ffcd 	bl	80001d0 <__aeabi_dsub>
 8008236:	ec41 0b10 	vmov	d0, r0, r1
 800823a:	ee10 3a90 	vmov	r3, s1
 800823e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008242:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008246:	da30      	bge.n	80082aa <__ieee754_pow+0x9fa>
 8008248:	4650      	mov	r0, sl
 800824a:	f000 f87d 	bl	8008348 <scalbn>
 800824e:	ec51 0b10 	vmov	r0, r1, d0
 8008252:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008256:	f7ff bbd2 	b.w	80079fe <__ieee754_pow+0x14e>
 800825a:	4c31      	ldr	r4, [pc, #196]	@ (8008320 <__ieee754_pow+0xa70>)
 800825c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008260:	42a3      	cmp	r3, r4
 8008262:	d91a      	bls.n	800829a <__ieee754_pow+0x9ea>
 8008264:	4b2f      	ldr	r3, [pc, #188]	@ (8008324 <__ieee754_pow+0xa74>)
 8008266:	440b      	add	r3, r1
 8008268:	4303      	orrs	r3, r0
 800826a:	d009      	beq.n	8008280 <__ieee754_pow+0x9d0>
 800826c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008270:	2200      	movs	r2, #0
 8008272:	2300      	movs	r3, #0
 8008274:	f7f8 fbd6 	bl	8000a24 <__aeabi_dcmplt>
 8008278:	3800      	subs	r0, #0
 800827a:	bf18      	it	ne
 800827c:	2001      	movne	r0, #1
 800827e:	e42b      	b.n	8007ad8 <__ieee754_pow+0x228>
 8008280:	4642      	mov	r2, r8
 8008282:	464b      	mov	r3, r9
 8008284:	f7f7 ffa4 	bl	80001d0 <__aeabi_dsub>
 8008288:	4632      	mov	r2, r6
 800828a:	463b      	mov	r3, r7
 800828c:	f7f8 fbde 	bl	8000a4c <__aeabi_dcmpge>
 8008290:	2800      	cmp	r0, #0
 8008292:	d1eb      	bne.n	800826c <__ieee754_pow+0x9bc>
 8008294:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8008334 <__ieee754_pow+0xa84>
 8008298:	e6f7      	b.n	800808a <__ieee754_pow+0x7da>
 800829a:	469a      	mov	sl, r3
 800829c:	4b22      	ldr	r3, [pc, #136]	@ (8008328 <__ieee754_pow+0xa78>)
 800829e:	459a      	cmp	sl, r3
 80082a0:	f63f aef3 	bhi.w	800808a <__ieee754_pow+0x7da>
 80082a4:	f8dd a010 	ldr.w	sl, [sp, #16]
 80082a8:	e715      	b.n	80080d6 <__ieee754_pow+0x826>
 80082aa:	ec51 0b10 	vmov	r0, r1, d0
 80082ae:	4619      	mov	r1, r3
 80082b0:	e7cf      	b.n	8008252 <__ieee754_pow+0x9a2>
 80082b2:	491a      	ldr	r1, [pc, #104]	@ (800831c <__ieee754_pow+0xa6c>)
 80082b4:	2000      	movs	r0, #0
 80082b6:	f7ff bb18 	b.w	80078ea <__ieee754_pow+0x3a>
 80082ba:	2000      	movs	r0, #0
 80082bc:	2100      	movs	r1, #0
 80082be:	f7ff bb14 	b.w	80078ea <__ieee754_pow+0x3a>
 80082c2:	4630      	mov	r0, r6
 80082c4:	4639      	mov	r1, r7
 80082c6:	f7ff bb10 	b.w	80078ea <__ieee754_pow+0x3a>
 80082ca:	460c      	mov	r4, r1
 80082cc:	f7ff bb5e 	b.w	800798c <__ieee754_pow+0xdc>
 80082d0:	2400      	movs	r4, #0
 80082d2:	f7ff bb49 	b.w	8007968 <__ieee754_pow+0xb8>
 80082d6:	bf00      	nop
 80082d8:	00000000 	.word	0x00000000
 80082dc:	3fe62e43 	.word	0x3fe62e43
 80082e0:	fefa39ef 	.word	0xfefa39ef
 80082e4:	3fe62e42 	.word	0x3fe62e42
 80082e8:	0ca86c39 	.word	0x0ca86c39
 80082ec:	be205c61 	.word	0xbe205c61
 80082f0:	72bea4d0 	.word	0x72bea4d0
 80082f4:	3e663769 	.word	0x3e663769
 80082f8:	c5d26bf1 	.word	0xc5d26bf1
 80082fc:	3ebbbd41 	.word	0x3ebbbd41
 8008300:	af25de2c 	.word	0xaf25de2c
 8008304:	3f11566a 	.word	0x3f11566a
 8008308:	16bebd93 	.word	0x16bebd93
 800830c:	3f66c16c 	.word	0x3f66c16c
 8008310:	5555553e 	.word	0x5555553e
 8008314:	3fc55555 	.word	0x3fc55555
 8008318:	fff00000 	.word	0xfff00000
 800831c:	3ff00000 	.word	0x3ff00000
 8008320:	4090cbff 	.word	0x4090cbff
 8008324:	3f6f3400 	.word	0x3f6f3400
 8008328:	3fe00000 	.word	0x3fe00000
 800832c:	652b82fe 	.word	0x652b82fe
 8008330:	3c971547 	.word	0x3c971547
 8008334:	4090cc00 	.word	0x4090cc00

08008338 <fabs>:
 8008338:	ec51 0b10 	vmov	r0, r1, d0
 800833c:	4602      	mov	r2, r0
 800833e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008342:	ec43 2b10 	vmov	d0, r2, r3
 8008346:	4770      	bx	lr

08008348 <scalbn>:
 8008348:	b570      	push	{r4, r5, r6, lr}
 800834a:	ec55 4b10 	vmov	r4, r5, d0
 800834e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008352:	4606      	mov	r6, r0
 8008354:	462b      	mov	r3, r5
 8008356:	b991      	cbnz	r1, 800837e <scalbn+0x36>
 8008358:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800835c:	4323      	orrs	r3, r4
 800835e:	d03d      	beq.n	80083dc <scalbn+0x94>
 8008360:	4b35      	ldr	r3, [pc, #212]	@ (8008438 <scalbn+0xf0>)
 8008362:	4620      	mov	r0, r4
 8008364:	4629      	mov	r1, r5
 8008366:	2200      	movs	r2, #0
 8008368:	f7f8 f8ea 	bl	8000540 <__aeabi_dmul>
 800836c:	4b33      	ldr	r3, [pc, #204]	@ (800843c <scalbn+0xf4>)
 800836e:	429e      	cmp	r6, r3
 8008370:	4604      	mov	r4, r0
 8008372:	460d      	mov	r5, r1
 8008374:	da0f      	bge.n	8008396 <scalbn+0x4e>
 8008376:	a328      	add	r3, pc, #160	@ (adr r3, 8008418 <scalbn+0xd0>)
 8008378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800837c:	e01e      	b.n	80083bc <scalbn+0x74>
 800837e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8008382:	4291      	cmp	r1, r2
 8008384:	d10b      	bne.n	800839e <scalbn+0x56>
 8008386:	4622      	mov	r2, r4
 8008388:	4620      	mov	r0, r4
 800838a:	4629      	mov	r1, r5
 800838c:	f7f7 ff22 	bl	80001d4 <__adddf3>
 8008390:	4604      	mov	r4, r0
 8008392:	460d      	mov	r5, r1
 8008394:	e022      	b.n	80083dc <scalbn+0x94>
 8008396:	460b      	mov	r3, r1
 8008398:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800839c:	3936      	subs	r1, #54	@ 0x36
 800839e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80083a2:	4296      	cmp	r6, r2
 80083a4:	dd0d      	ble.n	80083c2 <scalbn+0x7a>
 80083a6:	2d00      	cmp	r5, #0
 80083a8:	a11d      	add	r1, pc, #116	@ (adr r1, 8008420 <scalbn+0xd8>)
 80083aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083ae:	da02      	bge.n	80083b6 <scalbn+0x6e>
 80083b0:	a11d      	add	r1, pc, #116	@ (adr r1, 8008428 <scalbn+0xe0>)
 80083b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083b6:	a31a      	add	r3, pc, #104	@ (adr r3, 8008420 <scalbn+0xd8>)
 80083b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083bc:	f7f8 f8c0 	bl	8000540 <__aeabi_dmul>
 80083c0:	e7e6      	b.n	8008390 <scalbn+0x48>
 80083c2:	1872      	adds	r2, r6, r1
 80083c4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80083c8:	428a      	cmp	r2, r1
 80083ca:	dcec      	bgt.n	80083a6 <scalbn+0x5e>
 80083cc:	2a00      	cmp	r2, #0
 80083ce:	dd08      	ble.n	80083e2 <scalbn+0x9a>
 80083d0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80083d4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80083d8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80083dc:	ec45 4b10 	vmov	d0, r4, r5
 80083e0:	bd70      	pop	{r4, r5, r6, pc}
 80083e2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80083e6:	da08      	bge.n	80083fa <scalbn+0xb2>
 80083e8:	2d00      	cmp	r5, #0
 80083ea:	a10b      	add	r1, pc, #44	@ (adr r1, 8008418 <scalbn+0xd0>)
 80083ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083f0:	dac1      	bge.n	8008376 <scalbn+0x2e>
 80083f2:	a10f      	add	r1, pc, #60	@ (adr r1, 8008430 <scalbn+0xe8>)
 80083f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083f8:	e7bd      	b.n	8008376 <scalbn+0x2e>
 80083fa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80083fe:	3236      	adds	r2, #54	@ 0x36
 8008400:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008404:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008408:	4620      	mov	r0, r4
 800840a:	4b0d      	ldr	r3, [pc, #52]	@ (8008440 <scalbn+0xf8>)
 800840c:	4629      	mov	r1, r5
 800840e:	2200      	movs	r2, #0
 8008410:	e7d4      	b.n	80083bc <scalbn+0x74>
 8008412:	bf00      	nop
 8008414:	f3af 8000 	nop.w
 8008418:	c2f8f359 	.word	0xc2f8f359
 800841c:	01a56e1f 	.word	0x01a56e1f
 8008420:	8800759c 	.word	0x8800759c
 8008424:	7e37e43c 	.word	0x7e37e43c
 8008428:	8800759c 	.word	0x8800759c
 800842c:	fe37e43c 	.word	0xfe37e43c
 8008430:	c2f8f359 	.word	0xc2f8f359
 8008434:	81a56e1f 	.word	0x81a56e1f
 8008438:	43500000 	.word	0x43500000
 800843c:	ffff3cb0 	.word	0xffff3cb0
 8008440:	3c900000 	.word	0x3c900000

08008444 <with_errno>:
 8008444:	b510      	push	{r4, lr}
 8008446:	ed2d 8b02 	vpush	{d8}
 800844a:	eeb0 8a40 	vmov.f32	s16, s0
 800844e:	eef0 8a60 	vmov.f32	s17, s1
 8008452:	4604      	mov	r4, r0
 8008454:	f7ff f872 	bl	800753c <__errno>
 8008458:	eeb0 0a48 	vmov.f32	s0, s16
 800845c:	eef0 0a68 	vmov.f32	s1, s17
 8008460:	ecbd 8b02 	vpop	{d8}
 8008464:	6004      	str	r4, [r0, #0]
 8008466:	bd10      	pop	{r4, pc}

08008468 <xflow>:
 8008468:	4603      	mov	r3, r0
 800846a:	b507      	push	{r0, r1, r2, lr}
 800846c:	ec51 0b10 	vmov	r0, r1, d0
 8008470:	b183      	cbz	r3, 8008494 <xflow+0x2c>
 8008472:	4602      	mov	r2, r0
 8008474:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008478:	e9cd 2300 	strd	r2, r3, [sp]
 800847c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008480:	f7f8 f85e 	bl	8000540 <__aeabi_dmul>
 8008484:	ec41 0b10 	vmov	d0, r0, r1
 8008488:	2022      	movs	r0, #34	@ 0x22
 800848a:	b003      	add	sp, #12
 800848c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008490:	f7ff bfd8 	b.w	8008444 <with_errno>
 8008494:	4602      	mov	r2, r0
 8008496:	460b      	mov	r3, r1
 8008498:	e7ee      	b.n	8008478 <xflow+0x10>
 800849a:	0000      	movs	r0, r0
 800849c:	0000      	movs	r0, r0
	...

080084a0 <__math_uflow>:
 80084a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80084a8 <__math_uflow+0x8>
 80084a4:	f7ff bfe0 	b.w	8008468 <xflow>
 80084a8:	00000000 	.word	0x00000000
 80084ac:	10000000 	.word	0x10000000

080084b0 <__math_oflow>:
 80084b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80084b8 <__math_oflow+0x8>
 80084b4:	f7ff bfd8 	b.w	8008468 <xflow>
 80084b8:	00000000 	.word	0x00000000
 80084bc:	70000000 	.word	0x70000000

080084c0 <_init>:
 80084c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084c2:	bf00      	nop
 80084c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084c6:	bc08      	pop	{r3}
 80084c8:	469e      	mov	lr, r3
 80084ca:	4770      	bx	lr

080084cc <_fini>:
 80084cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ce:	bf00      	nop
 80084d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084d2:	bc08      	pop	{r3}
 80084d4:	469e      	mov	lr, r3
 80084d6:	4770      	bx	lr
