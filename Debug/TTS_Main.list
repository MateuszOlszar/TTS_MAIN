
TTS_Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008284  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08008410  08008410  00018410  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008478  08008478  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08008478  08008478  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008478  08008478  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008478  08008478  00018478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800847c  0800847c  0001847c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008480  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dc0  20000070  080084f0  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000e30  080084f0  00020e30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ea38  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032a3  00000000  00000000  0002eb1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d50  00000000  00000000  00031dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009ff  00000000  00000000  00032b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c55a  00000000  00000000  0003350f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013863  00000000  00000000  0004fa69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009cb17  00000000  00000000  000632cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ac4  00000000  00000000  000ffde4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001038a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080083f4 	.word	0x080083f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	080083f4 	.word	0x080083f4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <App_Init>:
void CalibFunc();
void ParseCalibData();
int16_t AvreageTemp(uint8_t* tyre_region, int16_t* temps);

void App_Init()
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
	_state = Init;
 8000b44:	4b0d      	ldr	r3, [pc, #52]	; (8000b7c <App_Init+0x3c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	701a      	strb	r2, [r3, #0]

	while(1)
	{
		switch(_state)
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <App_Init+0x3c>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b02      	cmp	r3, #2
 8000b50:	d00c      	beq.n	8000b6c <App_Init+0x2c>
 8000b52:	2b02      	cmp	r3, #2
 8000b54:	dc0d      	bgt.n	8000b72 <App_Init+0x32>
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d002      	beq.n	8000b60 <App_Init+0x20>
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d003      	beq.n	8000b66 <App_Init+0x26>
 8000b5e:	e008      	b.n	8000b72 <App_Init+0x32>
		{
		case Init:
			InitFunc();
 8000b60:	f000 f80e 	bl	8000b80 <InitFunc>
			break;
 8000b64:	e008      	b.n	8000b78 <App_Init+0x38>
		case Operational:
			OpFunc();
 8000b66:	f000 f8b5 	bl	8000cd4 <OpFunc>
			break;
 8000b6a:	e005      	b.n	8000b78 <App_Init+0x38>
		case Calibration:
			CalibFunc();
 8000b6c:	f000 f988 	bl	8000e80 <CalibFunc>
			break;
 8000b70:	e002      	b.n	8000b78 <App_Init+0x38>
		default:
			InitFunc();
 8000b72:	f000 f805 	bl	8000b80 <InitFunc>
			break;
 8000b76:	bf00      	nop
		switch(_state)
 8000b78:	e7e7      	b.n	8000b4a <App_Init+0xa>
 8000b7a:	bf00      	nop
 8000b7c:	2000008c 	.word	0x2000008c

08000b80 <InitFunc>:
		}
	}
}

void InitFunc()
{
 8000b80:	b590      	push	{r4, r7, lr}
 8000b82:	b08f      	sub	sp, #60	; 0x3c
 8000b84:	af02      	add	r7, sp, #8
	CAN_Init(&hcan);
 8000b86:	4844      	ldr	r0, [pc, #272]	; (8000c98 <InitFunc+0x118>)
 8000b88:	f001 fe52 	bl	8002830 <CAN_Init>
	for(uint8_t i = 0; i<16; i++)
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000b92:	e017      	b.n	8000bc4 <InitFunc+0x44>
	{
		CAN_InitFrame(&ramka[i], &hcan, ID_BASE+i, 100, 8);
 8000b94:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000b98:	4613      	mov	r3, r2
 8000b9a:	00db      	lsls	r3, r3, #3
 8000b9c:	4413      	add	r3, r2
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	4a3e      	ldr	r2, [pc, #248]	; (8000c9c <InitFunc+0x11c>)
 8000ba2:	1898      	adds	r0, r3, r2
 8000ba4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	3369      	adds	r3, #105	; 0x69
 8000bac:	b29a      	uxth	r2, r3
 8000bae:	2308      	movs	r3, #8
 8000bb0:	9300      	str	r3, [sp, #0]
 8000bb2:	2364      	movs	r3, #100	; 0x64
 8000bb4:	4938      	ldr	r1, [pc, #224]	; (8000c98 <InitFunc+0x118>)
 8000bb6:	f001 fe7b 	bl	80028b0 <CAN_InitFrame>
	for(uint8_t i = 0; i<16; i++)
 8000bba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000bc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bc8:	2b0f      	cmp	r3, #15
 8000bca:	d9e3      	bls.n	8000b94 <InitFunc+0x14>
	}
	CAN_InitFrame(&tire_data_frame, &hcan, ID_BASE, 100, 8);
 8000bcc:	2308      	movs	r3, #8
 8000bce:	9300      	str	r3, [sp, #0]
 8000bd0:	2364      	movs	r3, #100	; 0x64
 8000bd2:	2269      	movs	r2, #105	; 0x69
 8000bd4:	4930      	ldr	r1, [pc, #192]	; (8000c98 <InitFunc+0x118>)
 8000bd6:	4832      	ldr	r0, [pc, #200]	; (8000ca0 <InitFunc+0x120>)
 8000bd8:	f001 fe6a 	bl	80028b0 <CAN_InitFrame>
	CAN_InitFrame(&calib_data_frame, &hcan, 0x729, 1000, 8);
 8000bdc:	2308      	movs	r3, #8
 8000bde:	9300      	str	r3, [sp, #0]
 8000be0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be4:	f240 7229 	movw	r2, #1833	; 0x729
 8000be8:	492b      	ldr	r1, [pc, #172]	; (8000c98 <InitFunc+0x118>)
 8000bea:	482e      	ldr	r0, [pc, #184]	; (8000ca4 <InitFunc+0x124>)
 8000bec:	f001 fe60 	bl	80028b0 <CAN_InitFrame>
	MLX90621_DumpEE(mlxee);
 8000bf0:	482d      	ldr	r0, [pc, #180]	; (8000ca8 <InitFunc+0x128>)
 8000bf2:	f000 fb5f 	bl	80012b4 <MLX90621_DumpEE>
	MLX90621_ExtractParameters(mlxee, &params);
 8000bf6:	492d      	ldr	r1, [pc, #180]	; (8000cac <InitFunc+0x12c>)
 8000bf8:	482b      	ldr	r0, [pc, #172]	; (8000ca8 <InitFunc+0x128>)
 8000bfa:	f000 fbc8 	bl	800138e <MLX90621_ExtractParameters>
	MLX90621_GetConfiguration(&cfgReg);
 8000bfe:	482c      	ldr	r0, [pc, #176]	; (8000cb0 <InitFunc+0x130>)
 8000c00:	f000 fbaf 	bl	8001362 <MLX90621_GetConfiguration>
	MLX90621_Configure(mlxee);
 8000c04:	4828      	ldr	r0, [pc, #160]	; (8000ca8 <InitFunc+0x128>)
 8000c06:	f000 fb7b 	bl	8001300 <MLX90621_Configure>
	MLX90621_SetRefreshRate(0x08);
 8000c0a:	2008      	movs	r0, #8
 8000c0c:	f000 fbfa 	bl	8001404 <MLX90621_SetRefreshRate>

	curRR = MLX90621_GetRefreshRate();
 8000c10:	f000 fc1f 	bl	8001452 <MLX90621_GetRefreshRate>
 8000c14:	4603      	mov	r3, r0
 8000c16:	4a27      	ldr	r2, [pc, #156]	; (8000cb4 <InitFunc+0x134>)
 8000c18:	6013      	str	r3, [r2, #0]
	curRes = MLX90621_GetCurResolution();
 8000c1a:	f000 fbdc 	bl	80013d6 <MLX90621_GetCurResolution>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	4a25      	ldr	r2, [pc, #148]	; (8000cb8 <InitFunc+0x138>)
 8000c22:	6013      	str	r3, [r2, #0]

	regions[0] = NULL;
 8000c24:	4b25      	ldr	r3, [pc, #148]	; (8000cbc <InitFunc+0x13c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
	regions[1] = inner_idx;
 8000c2a:	4b24      	ldr	r3, [pc, #144]	; (8000cbc <InitFunc+0x13c>)
 8000c2c:	4a24      	ldr	r2, [pc, #144]	; (8000cc0 <InitFunc+0x140>)
 8000c2e:	605a      	str	r2, [r3, #4]
	regions[2] = middle_idx;
 8000c30:	4b22      	ldr	r3, [pc, #136]	; (8000cbc <InitFunc+0x13c>)
 8000c32:	4a24      	ldr	r2, [pc, #144]	; (8000cc4 <InitFunc+0x144>)
 8000c34:	609a      	str	r2, [r3, #8]
	regions[3] = outer_idx;
 8000c36:	4b21      	ldr	r3, [pc, #132]	; (8000cbc <InitFunc+0x13c>)
 8000c38:	4a23      	ldr	r2, [pc, #140]	; (8000cc8 <InitFunc+0x148>)
 8000c3a:	60da      	str	r2, [r3, #12]

	uint32_t buf[11] = {0};
 8000c3c:	463b      	mov	r3, r7
 8000c3e:	222c      	movs	r2, #44	; 0x2c
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f006 fc32 	bl	80074ac <memset>

	Flash_Read_Data(FLASH_DATA_ADDR, buf, 11);
 8000c48:	463b      	mov	r3, r7
 8000c4a:	220b      	movs	r2, #11
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	481f      	ldr	r0, [pc, #124]	; (8000ccc <InitFunc+0x14c>)
 8000c50:	f000 fb12 	bl	8001278 <Flash_Read_Data>
	memcpy(inner_idx, (uint8_t*)buf, 14);
 8000c54:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <InitFunc+0x140>)
 8000c56:	461c      	mov	r4, r3
 8000c58:	463b      	mov	r3, r7
 8000c5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c5c:	c407      	stmia	r4!, {r0, r1, r2}
 8000c5e:	8023      	strh	r3, [r4, #0]
	memcpy(middle_idx, (uint8_t*)buf + 14, 14);
 8000c60:	463a      	mov	r2, r7
 8000c62:	320e      	adds	r2, #14
 8000c64:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <InitFunc+0x144>)
 8000c66:	4614      	mov	r4, r2
 8000c68:	6820      	ldr	r0, [r4, #0]
 8000c6a:	6861      	ldr	r1, [r4, #4]
 8000c6c:	68a2      	ldr	r2, [r4, #8]
 8000c6e:	c307      	stmia	r3!, {r0, r1, r2}
 8000c70:	89a2      	ldrh	r2, [r4, #12]
 8000c72:	801a      	strh	r2, [r3, #0]
	memcpy(outer_idx, (uint8_t*)buf + 28, 14);
 8000c74:	463a      	mov	r2, r7
 8000c76:	321c      	adds	r2, #28
 8000c78:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <InitFunc+0x148>)
 8000c7a:	4614      	mov	r4, r2
 8000c7c:	6820      	ldr	r0, [r4, #0]
 8000c7e:	6861      	ldr	r1, [r4, #4]
 8000c80:	68a2      	ldr	r2, [r4, #8]
 8000c82:	c307      	stmia	r3!, {r0, r1, r2}
 8000c84:	89a2      	ldrh	r2, [r4, #12]
 8000c86:	801a      	strh	r2, [r3, #0]

	_state = Operational;
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <InitFunc+0x150>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	701a      	strb	r2, [r3, #0]
}
 8000c8e:	bf00      	nop
 8000c90:	3734      	adds	r7, #52	; 0x34
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd90      	pop	{r4, r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000a40 	.word	0x20000a40
 8000c9c:	2000079c 	.word	0x2000079c
 8000ca0:	200009dc 	.word	0x200009dc
 8000ca4:	20000a00 	.word	0x20000a00
 8000ca8:	20000364 	.word	0x20000364
 8000cac:	20000464 	.word	0x20000464
 8000cb0:	200002dc 	.word	0x200002dc
 8000cb4:	20000a28 	.word	0x20000a28
 8000cb8:	20000a2c 	.word	0x20000a2c
 8000cbc:	200000c0 	.word	0x200000c0
 8000cc0:	20000090 	.word	0x20000090
 8000cc4:	200000a0 	.word	0x200000a0
 8000cc8:	200000b0 	.word	0x200000b0
 8000ccc:	0800f800 	.word	0x0800f800
 8000cd0:	2000008c 	.word	0x2000008c

08000cd4 <OpFunc>:

void OpFunc()
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
	MLX90621_GetFrameData(frame);
 8000cda:	4857      	ldr	r0, [pc, #348]	; (8000e38 <OpFunc+0x164>)
 8000cdc:	f000 fafa 	bl	80012d4 <MLX90621_GetFrameData>
	tambient = MLX90621_GetTa(frame, &params);
 8000ce0:	4956      	ldr	r1, [pc, #344]	; (8000e3c <OpFunc+0x168>)
 8000ce2:	4855      	ldr	r0, [pc, #340]	; (8000e38 <OpFunc+0x164>)
 8000ce4:	f000 fd8e 	bl	8001804 <MLX90621_GetTa>
 8000ce8:	eef0 7a40 	vmov.f32	s15, s0
 8000cec:	4b54      	ldr	r3, [pc, #336]	; (8000e40 <OpFunc+0x16c>)
 8000cee:	edc3 7a00 	vstr	s15, [r3]
	MLX90621_CalculateTo(frame, &params, EMISSIVITY, tambient, result);
 8000cf2:	4b53      	ldr	r3, [pc, #332]	; (8000e40 <OpFunc+0x16c>)
 8000cf4:	edd3 7a00 	vldr	s15, [r3]
 8000cf8:	4a52      	ldr	r2, [pc, #328]	; (8000e44 <OpFunc+0x170>)
 8000cfa:	eef0 0a67 	vmov.f32	s1, s15
 8000cfe:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8000e48 <OpFunc+0x174>
 8000d02:	494e      	ldr	r1, [pc, #312]	; (8000e3c <OpFunc+0x168>)
 8000d04:	484c      	ldr	r0, [pc, #304]	; (8000e38 <OpFunc+0x164>)
 8000d06:	f000 fbbb 	bl	8001480 <MLX90621_CalculateTo>

	for(uint8_t i = 0; i<64; i++)
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	73fb      	strb	r3, [r7, #15]
 8000d0e:	e015      	b.n	8000d3c <OpFunc+0x68>
	{
		temp[i] = (int16_t)(result[i]*10);
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
 8000d12:	4a4c      	ldr	r2, [pc, #304]	; (8000e44 <OpFunc+0x170>)
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	4413      	add	r3, r2
 8000d18:	edd3 7a00 	vldr	s15, [r3]
 8000d1c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000d20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d2a:	ee17 2a90 	vmov	r2, s15
 8000d2e:	b211      	sxth	r1, r2
 8000d30:	4a46      	ldr	r2, [pc, #280]	; (8000e4c <OpFunc+0x178>)
 8000d32:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i = 0; i<64; i++)
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	73fb      	strb	r3, [r7, #15]
 8000d3c:	7bfb      	ldrb	r3, [r7, #15]
 8000d3e:	2b3f      	cmp	r3, #63	; 0x3f
 8000d40:	d9e6      	bls.n	8000d10 <OpFunc+0x3c>
	}

	for(int i = 0; i < 16; i++)
 8000d42:	2300      	movs	r3, #0
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	e01a      	b.n	8000d7e <OpFunc+0xaa>
	{
		for(int j = 0; j < 4; j++)
 8000d48:	2300      	movs	r3, #0
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	e011      	b.n	8000d72 <OpFunc+0x9e>
		{
			matrix[i][j] = temp[i * 4 + j];
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	009a      	lsls	r2, r3, #2
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	4a3d      	ldr	r2, [pc, #244]	; (8000e4c <OpFunc+0x178>)
 8000d58:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8000d5c:	493c      	ldr	r1, [pc, #240]	; (8000e50 <OpFunc+0x17c>)
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	009a      	lsls	r2, r3, #2
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	4602      	mov	r2, r0
 8000d68:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j = 0; j < 4; j++)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2b03      	cmp	r3, #3
 8000d76:	ddea      	ble.n	8000d4e <OpFunc+0x7a>
	for(int i = 0; i < 16; i++)
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	60bb      	str	r3, [r7, #8]
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	2b0f      	cmp	r3, #15
 8000d82:	dde1      	ble.n	8000d48 <OpFunc+0x74>
		}
	}

	if(DEBUG_Preview)
 8000d84:	4b33      	ldr	r3, [pc, #204]	; (8000e54 <OpFunc+0x180>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d027      	beq.n	8000ddc <OpFunc+0x108>
	{
		for(uint8_t i = 0; i < 16; i++)
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	70fb      	strb	r3, [r7, #3]
 8000d90:	e021      	b.n	8000dd6 <OpFunc+0x102>
		{
			memcpy(ramka[i].core.data, &matrix[i], 8);
 8000d92:	78fa      	ldrb	r2, [r7, #3]
 8000d94:	4613      	mov	r3, r2
 8000d96:	00db      	lsls	r3, r3, #3
 8000d98:	4413      	add	r3, r2
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	3308      	adds	r3, #8
 8000d9e:	4a2e      	ldr	r2, [pc, #184]	; (8000e58 <OpFunc+0x184>)
 8000da0:	4413      	add	r3, r2
 8000da2:	f103 0008 	add.w	r0, r3, #8
 8000da6:	78fb      	ldrb	r3, [r7, #3]
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	4a29      	ldr	r2, [pc, #164]	; (8000e50 <OpFunc+0x17c>)
 8000dac:	4413      	add	r3, r2
 8000dae:	2208      	movs	r2, #8
 8000db0:	4619      	mov	r1, r3
 8000db2:	f006 fbad 	bl	8007510 <memcpy>
			HAL_Delay(5);
 8000db6:	2005      	movs	r0, #5
 8000db8:	f002 f892 	bl	8002ee0 <HAL_Delay>
			CAN_SendFrame(&ramka[i]);
 8000dbc:	78fa      	ldrb	r2, [r7, #3]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	4413      	add	r3, r2
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	4a24      	ldr	r2, [pc, #144]	; (8000e58 <OpFunc+0x184>)
 8000dc8:	4413      	add	r3, r2
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f001 fdca 	bl	8002964 <CAN_SendFrame>
		for(uint8_t i = 0; i < 16; i++)
 8000dd0:	78fb      	ldrb	r3, [r7, #3]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	70fb      	strb	r3, [r7, #3]
 8000dd6:	78fb      	ldrb	r3, [r7, #3]
 8000dd8:	2b0f      	cmp	r3, #15
 8000dda:	d9da      	bls.n	8000d92 <OpFunc+0xbe>
		}
	}

	inner_temp = AvreageTemp(inner_idx, temp);
 8000ddc:	491b      	ldr	r1, [pc, #108]	; (8000e4c <OpFunc+0x178>)
 8000dde:	481f      	ldr	r0, [pc, #124]	; (8000e5c <OpFunc+0x188>)
 8000de0:	f000 f988 	bl	80010f4 <AvreageTemp>
 8000de4:	4603      	mov	r3, r0
 8000de6:	461a      	mov	r2, r3
 8000de8:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <OpFunc+0x18c>)
 8000dea:	801a      	strh	r2, [r3, #0]
	outer_temp = AvreageTemp(outer_idx, temp);
 8000dec:	4917      	ldr	r1, [pc, #92]	; (8000e4c <OpFunc+0x178>)
 8000dee:	481d      	ldr	r0, [pc, #116]	; (8000e64 <OpFunc+0x190>)
 8000df0:	f000 f980 	bl	80010f4 <AvreageTemp>
 8000df4:	4603      	mov	r3, r0
 8000df6:	461a      	mov	r2, r3
 8000df8:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <OpFunc+0x194>)
 8000dfa:	801a      	strh	r2, [r3, #0]
	middle_temp = AvreageTemp(middle_idx, temp);
 8000dfc:	4913      	ldr	r1, [pc, #76]	; (8000e4c <OpFunc+0x178>)
 8000dfe:	481b      	ldr	r0, [pc, #108]	; (8000e6c <OpFunc+0x198>)
 8000e00:	f000 f978 	bl	80010f4 <AvreageTemp>
 8000e04:	4603      	mov	r3, r0
 8000e06:	461a      	mov	r2, r3
 8000e08:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <OpFunc+0x19c>)
 8000e0a:	801a      	strh	r2, [r3, #0]



	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e12:	f003 fadb 	bl	80043cc <HAL_GPIO_TogglePin>

	if(calib_data_frame.recieve_time_ms != lastCalibFrameTime)
 8000e16:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <OpFunc+0x1a0>)
 8000e18:	69da      	ldr	r2, [r3, #28]
 8000e1a:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <OpFunc+0x1a4>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d006      	beq.n	8000e30 <OpFunc+0x15c>
	{
		lastCalibFrameTime = calib_data_frame.recieve_time_ms;
 8000e22:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <OpFunc+0x1a0>)
 8000e24:	69db      	ldr	r3, [r3, #28]
 8000e26:	4a14      	ldr	r2, [pc, #80]	; (8000e78 <OpFunc+0x1a4>)
 8000e28:	6013      	str	r3, [r2, #0]
		_state = Calibration;
 8000e2a:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <OpFunc+0x1a8>)
 8000e2c:	2202      	movs	r2, #2
 8000e2e:	701a      	strb	r2, [r3, #0]
	}

}
 8000e30:	bf00      	nop
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	200002e0 	.word	0x200002e0
 8000e3c:	20000464 	.word	0x20000464
 8000e40:	200000d8 	.word	0x200000d8
 8000e44:	200000dc 	.word	0x200000dc
 8000e48:	3f7ae148 	.word	0x3f7ae148
 8000e4c:	2000025c 	.word	0x2000025c
 8000e50:	200001dc 	.word	0x200001dc
 8000e54:	2000008d 	.word	0x2000008d
 8000e58:	2000079c 	.word	0x2000079c
 8000e5c:	20000090 	.word	0x20000090
 8000e60:	200000d0 	.word	0x200000d0
 8000e64:	200000b0 	.word	0x200000b0
 8000e68:	200000d2 	.word	0x200000d2
 8000e6c:	200000a0 	.word	0x200000a0
 8000e70:	200000d4 	.word	0x200000d4
 8000e74:	20000a00 	.word	0x20000a00
 8000e78:	20000a24 	.word	0x20000a24
 8000e7c:	2000008c 	.word	0x2000008c

08000e80 <CalibFunc>:


void CalibFunc()
{
 8000e80:	b590      	push	{r4, r7, lr}
 8000e82:	b091      	sub	sp, #68	; 0x44
 8000e84:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i<64; i++)
 8000e86:	2300      	movs	r3, #0
 8000e88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000e8c:	e019      	b.n	8000ec2 <CalibFunc+0x42>
		{
			temp[i] = (int16_t)(result[i]*10);
 8000e8e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000e92:	4a63      	ldr	r2, [pc, #396]	; (8001020 <CalibFunc+0x1a0>)
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	4413      	add	r3, r2
 8000e98:	edd3 7a00 	vldr	s15, [r3]
 8000e9c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000ea0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ea4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000ea8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000eac:	ee17 2a90 	vmov	r2, s15
 8000eb0:	b211      	sxth	r1, r2
 8000eb2:	4a5c      	ldr	r2, [pc, #368]	; (8001024 <CalibFunc+0x1a4>)
 8000eb4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i = 0; i<64; i++)
 8000eb8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000ec2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000ec6:	2b3f      	cmp	r3, #63	; 0x3f
 8000ec8:	d9e1      	bls.n	8000e8e <CalibFunc+0xe>
		}

		for(int i = 0; i < 16; i++)
 8000eca:	2300      	movs	r3, #0
 8000ecc:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ece:	e01a      	b.n	8000f06 <CalibFunc+0x86>
		{
			for(int j = 0; j < 4; j++)
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	637b      	str	r3, [r7, #52]	; 0x34
 8000ed4:	e011      	b.n	8000efa <CalibFunc+0x7a>
			{
				matrix[i][j] = temp[i * 4 + j];
 8000ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ed8:	009a      	lsls	r2, r3, #2
 8000eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000edc:	4413      	add	r3, r2
 8000ede:	4a51      	ldr	r2, [pc, #324]	; (8001024 <CalibFunc+0x1a4>)
 8000ee0:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8000ee4:	4950      	ldr	r1, [pc, #320]	; (8001028 <CalibFunc+0x1a8>)
 8000ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ee8:	009a      	lsls	r2, r3, #2
 8000eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eec:	4413      	add	r3, r2
 8000eee:	4602      	mov	r2, r0
 8000ef0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for(int j = 0; j < 4; j++)
 8000ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	637b      	str	r3, [r7, #52]	; 0x34
 8000efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000efc:	2b03      	cmp	r3, #3
 8000efe:	ddea      	ble.n	8000ed6 <CalibFunc+0x56>
		for(int i = 0; i < 16; i++)
 8000f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f02:	3301      	adds	r3, #1
 8000f04:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f08:	2b0f      	cmp	r3, #15
 8000f0a:	dde1      	ble.n	8000ed0 <CalibFunc+0x50>
			}
		}
		for(uint8_t i = 0; i < 16; i++)
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8000f12:	e026      	b.n	8000f62 <CalibFunc+0xe2>
		{

			memcpy(ramka[i].core.data, &matrix[i], 8);
 8000f14:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8000f18:	4613      	mov	r3, r2
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	4413      	add	r3, r2
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	3308      	adds	r3, #8
 8000f22:	4a42      	ldr	r2, [pc, #264]	; (800102c <CalibFunc+0x1ac>)
 8000f24:	4413      	add	r3, r2
 8000f26:	f103 0008 	add.w	r0, r3, #8
 8000f2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f2e:	00db      	lsls	r3, r3, #3
 8000f30:	4a3d      	ldr	r2, [pc, #244]	; (8001028 <CalibFunc+0x1a8>)
 8000f32:	4413      	add	r3, r2
 8000f34:	2208      	movs	r2, #8
 8000f36:	4619      	mov	r1, r3
 8000f38:	f006 faea 	bl	8007510 <memcpy>
			HAL_Delay(5);
 8000f3c:	2005      	movs	r0, #5
 8000f3e:	f001 ffcf 	bl	8002ee0 <HAL_Delay>
			CAN_SendFrame(&ramka[i]);
 8000f42:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8000f46:	4613      	mov	r3, r2
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	4413      	add	r3, r2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4a37      	ldr	r2, [pc, #220]	; (800102c <CalibFunc+0x1ac>)
 8000f50:	4413      	add	r3, r2
 8000f52:	4618      	mov	r0, r3
 8000f54:	f001 fd06 	bl	8002964 <CAN_SendFrame>
		for(uint8_t i = 0; i < 16; i++)
 8000f58:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8000f62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f66:	2b0f      	cmp	r3, #15
 8000f68:	d9d4      	bls.n	8000f14 <CalibFunc+0x94>
		}
		MLX90621_GetFrameData(frame);
 8000f6a:	4831      	ldr	r0, [pc, #196]	; (8001030 <CalibFunc+0x1b0>)
 8000f6c:	f000 f9b2 	bl	80012d4 <MLX90621_GetFrameData>
		tambient = MLX90621_GetTa(frame, &params);
 8000f70:	4930      	ldr	r1, [pc, #192]	; (8001034 <CalibFunc+0x1b4>)
 8000f72:	482f      	ldr	r0, [pc, #188]	; (8001030 <CalibFunc+0x1b0>)
 8000f74:	f000 fc46 	bl	8001804 <MLX90621_GetTa>
 8000f78:	eef0 7a40 	vmov.f32	s15, s0
 8000f7c:	4b2e      	ldr	r3, [pc, #184]	; (8001038 <CalibFunc+0x1b8>)
 8000f7e:	edc3 7a00 	vstr	s15, [r3]
		MLX90621_CalculateTo(frame, &params, EMISSIVITY, tambient, result);
 8000f82:	4b2d      	ldr	r3, [pc, #180]	; (8001038 <CalibFunc+0x1b8>)
 8000f84:	edd3 7a00 	vldr	s15, [r3]
 8000f88:	4a25      	ldr	r2, [pc, #148]	; (8001020 <CalibFunc+0x1a0>)
 8000f8a:	eef0 0a67 	vmov.f32	s1, s15
 8000f8e:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 800103c <CalibFunc+0x1bc>
 8000f92:	4928      	ldr	r1, [pc, #160]	; (8001034 <CalibFunc+0x1b4>)
 8000f94:	4826      	ldr	r0, [pc, #152]	; (8001030 <CalibFunc+0x1b0>)
 8000f96:	f000 fa73 	bl	8001480 <MLX90621_CalculateTo>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa0:	f003 fa14 	bl	80043cc <HAL_GPIO_TogglePin>

		if(calib_data_frame.recieve_time_ms != lastCalibFrameTime)
 8000fa4:	4b26      	ldr	r3, [pc, #152]	; (8001040 <CalibFunc+0x1c0>)
 8000fa6:	69da      	ldr	r2, [r3, #28]
 8000fa8:	4b26      	ldr	r3, [pc, #152]	; (8001044 <CalibFunc+0x1c4>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d034      	beq.n	800101a <CalibFunc+0x19a>
		{
			lastCalibFrameTime = calib_data_frame.recieve_time_ms;
 8000fb0:	4b23      	ldr	r3, [pc, #140]	; (8001040 <CalibFunc+0x1c0>)
 8000fb2:	69db      	ldr	r3, [r3, #28]
 8000fb4:	4a23      	ldr	r2, [pc, #140]	; (8001044 <CalibFunc+0x1c4>)
 8000fb6:	6013      	str	r3, [r2, #0]
			if(calib_data_frame.core.data[0] == 0)
 8000fb8:	4b21      	ldr	r3, [pc, #132]	; (8001040 <CalibFunc+0x1c0>)
 8000fba:	7c1b      	ldrb	r3, [r3, #16]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d12a      	bne.n	8001016 <CalibFunc+0x196>
			{
				_state = Operational;
 8000fc0:	4b21      	ldr	r3, [pc, #132]	; (8001048 <CalibFunc+0x1c8>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	701a      	strb	r2, [r3, #0]
				uint32_t buf[11] = {0};
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	222c      	movs	r2, #44	; 0x2c
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f006 fa6d 	bl	80074ac <memset>
				memcpy((uint8_t*)buf, inner_idx, 14);
 8000fd2:	4b1e      	ldr	r3, [pc, #120]	; (800104c <CalibFunc+0x1cc>)
 8000fd4:	1d3c      	adds	r4, r7, #4
 8000fd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fd8:	c407      	stmia	r4!, {r0, r1, r2}
 8000fda:	8023      	strh	r3, [r4, #0]
				memcpy((uint8_t*)buf + 14, middle_idx, 14);
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	330e      	adds	r3, #14
 8000fe0:	4a1b      	ldr	r2, [pc, #108]	; (8001050 <CalibFunc+0x1d0>)
 8000fe2:	461c      	mov	r4, r3
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000fe8:	6020      	str	r0, [r4, #0]
 8000fea:	6061      	str	r1, [r4, #4]
 8000fec:	60a2      	str	r2, [r4, #8]
 8000fee:	881b      	ldrh	r3, [r3, #0]
 8000ff0:	81a3      	strh	r3, [r4, #12]
				memcpy((uint8_t*)buf + 28, outer_idx, 14);
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	331c      	adds	r3, #28
 8000ff6:	4a17      	ldr	r2, [pc, #92]	; (8001054 <CalibFunc+0x1d4>)
 8000ff8:	461c      	mov	r4, r3
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000ffe:	6020      	str	r0, [r4, #0]
 8001000:	6061      	str	r1, [r4, #4]
 8001002:	60a2      	str	r2, [r4, #8]
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	81a3      	strh	r3, [r4, #12]
				Flash_Write_Data(FLASH_DATA_ADDR, buf, 11);
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	220b      	movs	r2, #11
 800100c:	4619      	mov	r1, r3
 800100e:	4812      	ldr	r0, [pc, #72]	; (8001058 <CalibFunc+0x1d8>)
 8001010:	f000 f8d6 	bl	80011c0 <Flash_Write_Data>
 8001014:	e001      	b.n	800101a <CalibFunc+0x19a>
				return;
			}
			ParseCalibData();
 8001016:	f000 f821 	bl	800105c <ParseCalibData>
		}
}
 800101a:	3744      	adds	r7, #68	; 0x44
 800101c:	46bd      	mov	sp, r7
 800101e:	bd90      	pop	{r4, r7, pc}
 8001020:	200000dc 	.word	0x200000dc
 8001024:	2000025c 	.word	0x2000025c
 8001028:	200001dc 	.word	0x200001dc
 800102c:	2000079c 	.word	0x2000079c
 8001030:	200002e0 	.word	0x200002e0
 8001034:	20000464 	.word	0x20000464
 8001038:	200000d8 	.word	0x200000d8
 800103c:	3f7ae148 	.word	0x3f7ae148
 8001040:	20000a00 	.word	0x20000a00
 8001044:	20000a24 	.word	0x20000a24
 8001048:	2000008c 	.word	0x2000008c
 800104c:	20000090 	.word	0x20000090
 8001050:	200000a0 	.word	0x200000a0
 8001054:	200000b0 	.word	0x200000b0
 8001058:	0800f800 	.word	0x0800f800

0800105c <ParseCalibData>:

void ParseCalibData()
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
	uint8_t tyre_region = calib_data_frame.core.data[0];
 8001062:	4b22      	ldr	r3, [pc, #136]	; (80010ec <ParseCalibData+0x90>)
 8001064:	7c1b      	ldrb	r3, [r3, #16]
 8001066:	717b      	strb	r3, [r7, #5]
	for(uint8_t i = 0; i< 7; i++)
 8001068:	2300      	movs	r3, #0
 800106a:	71fb      	strb	r3, [r7, #7]
 800106c:	e033      	b.n	80010d6 <ParseCalibData+0x7a>
	{
		uint8_t temp_idx = calib_data_frame.core.data[i+1];
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	3301      	adds	r3, #1
 8001072:	4a1e      	ldr	r2, [pc, #120]	; (80010ec <ParseCalibData+0x90>)
 8001074:	4413      	add	r3, r2
 8001076:	7c1b      	ldrb	r3, [r3, #16]
 8001078:	713b      	strb	r3, [r7, #4]
		for(uint8_t j = 0; j< 14;j++)
 800107a:	2300      	movs	r3, #0
 800107c:	71bb      	strb	r3, [r7, #6]
 800107e:	e024      	b.n	80010ca <ParseCalibData+0x6e>
		{
			if(regions[tyre_region]!=NULL)
 8001080:	797b      	ldrb	r3, [r7, #5]
 8001082:	4a1b      	ldr	r2, [pc, #108]	; (80010f0 <ParseCalibData+0x94>)
 8001084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d01b      	beq.n	80010c4 <ParseCalibData+0x68>
			{
				if(regions[tyre_region][j] != temp_idx && regions[tyre_region][j] == 0)
 800108c:	797b      	ldrb	r3, [r7, #5]
 800108e:	4a18      	ldr	r2, [pc, #96]	; (80010f0 <ParseCalibData+0x94>)
 8001090:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001094:	79bb      	ldrb	r3, [r7, #6]
 8001096:	4413      	add	r3, r2
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	793a      	ldrb	r2, [r7, #4]
 800109c:	429a      	cmp	r2, r3
 800109e:	d011      	beq.n	80010c4 <ParseCalibData+0x68>
 80010a0:	797b      	ldrb	r3, [r7, #5]
 80010a2:	4a13      	ldr	r2, [pc, #76]	; (80010f0 <ParseCalibData+0x94>)
 80010a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010a8:	79bb      	ldrb	r3, [r7, #6]
 80010aa:	4413      	add	r3, r2
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d108      	bne.n	80010c4 <ParseCalibData+0x68>
				{
					regions[tyre_region][j] = temp_idx;
 80010b2:	797b      	ldrb	r3, [r7, #5]
 80010b4:	4a0e      	ldr	r2, [pc, #56]	; (80010f0 <ParseCalibData+0x94>)
 80010b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010ba:	79bb      	ldrb	r3, [r7, #6]
 80010bc:	4413      	add	r3, r2
 80010be:	793a      	ldrb	r2, [r7, #4]
 80010c0:	701a      	strb	r2, [r3, #0]
					break;
 80010c2:	e005      	b.n	80010d0 <ParseCalibData+0x74>
		for(uint8_t j = 0; j< 14;j++)
 80010c4:	79bb      	ldrb	r3, [r7, #6]
 80010c6:	3301      	adds	r3, #1
 80010c8:	71bb      	strb	r3, [r7, #6]
 80010ca:	79bb      	ldrb	r3, [r7, #6]
 80010cc:	2b0d      	cmp	r3, #13
 80010ce:	d9d7      	bls.n	8001080 <ParseCalibData+0x24>
	for(uint8_t i = 0; i< 7; i++)
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	3301      	adds	r3, #1
 80010d4:	71fb      	strb	r3, [r7, #7]
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	2b06      	cmp	r3, #6
 80010da:	d9c8      	bls.n	800106e <ParseCalibData+0x12>
				}
			}
		}
	}
}
 80010dc:	bf00      	nop
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	20000a00 	.word	0x20000a00
 80010f0:	200000c0 	.word	0x200000c0

080010f4 <AvreageTemp>:

int16_t AvreageTemp(uint8_t* tyre_region, int16_t* pixels)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
	int16_t temp = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	81fb      	strh	r3, [r7, #14]
	uint8_t hit = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0; i< 14;i++)
 8001106:	2300      	movs	r3, #0
 8001108:	733b      	strb	r3, [r7, #12]
 800110a:	e01b      	b.n	8001144 <AvreageTemp+0x50>
	{
		if(tyre_region[i] != 0)
 800110c:	7b3b      	ldrb	r3, [r7, #12]
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d011      	beq.n	800113c <AvreageTemp+0x48>
		{
			temp += pixels[tyre_region[i]];
 8001118:	7b3b      	ldrb	r3, [r7, #12]
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	4413      	add	r3, r2
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	683a      	ldr	r2, [r7, #0]
 8001124:	4413      	add	r3, r2
 8001126:	f9b3 3000 	ldrsh.w	r3, [r3]
 800112a:	b29a      	uxth	r2, r3
 800112c:	89fb      	ldrh	r3, [r7, #14]
 800112e:	4413      	add	r3, r2
 8001130:	b29b      	uxth	r3, r3
 8001132:	81fb      	strh	r3, [r7, #14]
			hit++;
 8001134:	7b7b      	ldrb	r3, [r7, #13]
 8001136:	3301      	adds	r3, #1
 8001138:	737b      	strb	r3, [r7, #13]
 800113a:	e000      	b.n	800113e <AvreageTemp+0x4a>
		}
		else continue;
 800113c:	bf00      	nop
	for(uint8_t i = 0; i< 14;i++)
 800113e:	7b3b      	ldrb	r3, [r7, #12]
 8001140:	3301      	adds	r3, #1
 8001142:	733b      	strb	r3, [r7, #12]
 8001144:	7b3b      	ldrb	r3, [r7, #12]
 8001146:	2b0d      	cmp	r3, #13
 8001148:	d9e0      	bls.n	800110c <AvreageTemp+0x18>
	}
	if(hit == 0) return 0;
 800114a:	7b7b      	ldrb	r3, [r7, #13]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d101      	bne.n	8001154 <AvreageTemp+0x60>
 8001150:	2300      	movs	r3, #0
 8001152:	e005      	b.n	8001160 <AvreageTemp+0x6c>
	return temp/hit;
 8001154:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001158:	7b7b      	ldrb	r3, [r7, #13]
 800115a:	fb92 f3f3 	sdiv	r3, r2, r3
 800115e:	b21b      	sxth	r3, r3
}
 8001160:	4618      	mov	r0, r3
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <GetPage>:
 * Some STM32F103C8 have 64 KB FLASH Memory, so I guess they have Page 0 to Page 63 only.
 */

/* FLASH_PAGE_SIZE should be able to get the size of the Page according to the controller */
static uint32_t GetPage(uint32_t Address)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<128; indx++)
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	e017      	b.n	80011aa <GetPage+0x3e>
  {
	  if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE*indx)))
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8001180:	02db      	lsls	r3, r3, #11
 8001182:	461a      	mov	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4293      	cmp	r3, r2
 8001188:	d20c      	bcs.n	80011a4 <GetPage+0x38>
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001190:	02db      	lsls	r3, r3, #11
 8001192:	461a      	mov	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4293      	cmp	r3, r2
 8001198:	d304      	bcc.n	80011a4 <GetPage+0x38>
	  {
		  return (0x08000000 + FLASH_PAGE_SIZE*indx);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80011a0:	02db      	lsls	r3, r3, #11
 80011a2:	e006      	b.n	80011b2 <GetPage+0x46>
  for (int indx=0; indx<128; indx++)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	3301      	adds	r3, #1
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2b7f      	cmp	r3, #127	; 0x7f
 80011ae:	dde4      	ble.n	800117a <GetPage+0xe>
	  }
  }

  return 0;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
	...

080011c0 <Flash_Write_Data>:
   float float_variable =  thing.a;
   return float_variable;
}

uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 80011c0:	b5b0      	push	{r4, r5, r7, lr}
 80011c2:	b08a      	sub	sp, #40	; 0x28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	4613      	mov	r3, r2
 80011cc:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 80011d2:	f002 fdfd 	bl	8003dd0 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 80011d6:	68f8      	ldr	r0, [r7, #12]
 80011d8:	f7ff ffc8 	bl	800116c <GetPage>
 80011dc:	6238      	str	r0, [r7, #32]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 80011de:	88fb      	ldrh	r3, [r7, #6]
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	461a      	mov	r2, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4413      	add	r3, r2
 80011e8:	61fb      	str	r3, [r7, #28]
	  uint32_t EndPage = GetPage(EndPageAdress);
 80011ea:	69f8      	ldr	r0, [r7, #28]
 80011ec:	f7ff ffbe 	bl	800116c <GetPage>
 80011f0:	61b8      	str	r0, [r7, #24]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80011f2:	4b20      	ldr	r3, [pc, #128]	; (8001274 <Flash_Write_Data+0xb4>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.PageAddress = StartPage;
 80011f8:	4a1e      	ldr	r2, [pc, #120]	; (8001274 <Flash_Write_Data+0xb4>)
 80011fa:	6a3b      	ldr	r3, [r7, #32]
 80011fc:	6053      	str	r3, [r2, #4]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	6a3b      	ldr	r3, [r7, #32]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	0adb      	lsrs	r3, r3, #11
 8001206:	3301      	adds	r3, #1
 8001208:	4a1a      	ldr	r2, [pc, #104]	; (8001274 <Flash_Write_Data+0xb4>)
 800120a:	6093      	str	r3, [r2, #8]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4619      	mov	r1, r3
 8001212:	4818      	ldr	r0, [pc, #96]	; (8001274 <Flash_Write_Data+0xb4>)
 8001214:	f002 feac 	bl	8003f70 <HAL_FLASHEx_Erase>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d01f      	beq.n	800125e <Flash_Write_Data+0x9e>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 800121e:	f002 fe0d 	bl	8003e3c <HAL_FLASH_GetError>
 8001222:	4603      	mov	r3, r0
 8001224:	e022      	b.n	800126c <Flash_Write_Data+0xac>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 8001226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	68ba      	ldr	r2, [r7, #8]
 800122c:	4413      	add	r3, r2
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2200      	movs	r2, #0
 8001232:	461c      	mov	r4, r3
 8001234:	4615      	mov	r5, r2
 8001236:	4622      	mov	r2, r4
 8001238:	462b      	mov	r3, r5
 800123a:	68f9      	ldr	r1, [r7, #12]
 800123c:	2002      	movs	r0, #2
 800123e:	f002 fd57 	bl	8003cf0 <HAL_FLASH_Program>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d106      	bne.n	8001256 <Flash_Write_Data+0x96>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	3304      	adds	r3, #4
 800124c:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 800124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001250:	3301      	adds	r3, #1
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
 8001254:	e003      	b.n	800125e <Flash_Write_Data+0x9e>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8001256:	f002 fdf1 	bl	8003e3c <HAL_FLASH_GetError>
 800125a:	4603      	mov	r3, r0
 800125c:	e006      	b.n	800126c <Flash_Write_Data+0xac>
	   while (sofar<numberofwords)
 800125e:	88fb      	ldrh	r3, [r7, #6]
 8001260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001262:	429a      	cmp	r2, r3
 8001264:	dbdf      	blt.n	8001226 <Flash_Write_Data+0x66>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 8001266:	f002 fdd9 	bl	8003e1c <HAL_FLASH_Lock>

	   return 0;
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	3728      	adds	r7, #40	; 0x28
 8001270:	46bd      	mov	sp, r7
 8001272:	bdb0      	pop	{r4, r5, r7, pc}
 8001274:	20000a30 	.word	0x20000a30

08001278 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartPageAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	4613      	mov	r3, r2
 8001284:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	601a      	str	r2, [r3, #0]
		StartPageAddress += 4;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	3304      	adds	r3, #4
 8001292:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	3304      	adds	r3, #4
 8001298:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 800129a:	88fb      	ldrh	r3, [r7, #6]
 800129c:	1e5a      	subs	r2, r3, #1
 800129e:	80fa      	strh	r2, [r7, #6]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d000      	beq.n	80012a6 <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 80012a4:	e7ef      	b.n	8001286 <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 80012a6:	bf00      	nop
	}
}
 80012a8:	bf00      	nop
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <MLX90621_DumpEE>:
void ExtractAlphaParameters(uint8_t *eeData, paramsMLX90621 *mlx90621);
void ExtractOffsetParameters(uint8_t *eeData, paramsMLX90621 *mlx90621);


int MLX90621_DumpEE(uint8_t *eeData)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
     return MLX90621_I2CReadEEPROM(0x50, 0, 256, eeData);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012c2:	2100      	movs	r1, #0
 80012c4:	2050      	movs	r0, #80	; 0x50
 80012c6:	f000 fe2f 	bl	8001f28 <MLX90621_I2CReadEEPROM>
 80012ca:	4603      	mov	r3, r0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <MLX90621_GetFrameData>:


int MLX90621_GetFrameData(uint16_t *frameData)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af02      	add	r7, sp, #8
 80012da:	6078      	str	r0, [r7, #4]
    int error = 1;
 80012dc:	2301      	movs	r3, #1
 80012de:	60fb      	str	r3, [r7, #12]
        
    error = MLX90621_I2CRead(0x60, 0x02, 0, 1, 66, frameData);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	9301      	str	r3, [sp, #4]
 80012e4:	2342      	movs	r3, #66	; 0x42
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	2301      	movs	r3, #1
 80012ea:	2200      	movs	r2, #0
 80012ec:	2102      	movs	r1, #2
 80012ee:	2060      	movs	r0, #96	; 0x60
 80012f0:	f000 fe4a 	bl	8001f88 <MLX90621_I2CRead>
 80012f4:	60f8      	str	r0, [r7, #12]
       
    return error;    
 80012f6:	68fb      	ldr	r3, [r7, #12]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <MLX90621_Configure>:

int MLX90621_Configure(uint8_t *eeData)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
    int error = 1;
 8001308:	2301      	movs	r3, #1
 800130a:	60fb      	str	r3, [r7, #12]
    uint16_t value;
    
    error = MLX90621_I2CWrite(0x60, 0x04, 0xAA, eeData[247]);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	33f7      	adds	r3, #247	; 0xf7
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	b29b      	uxth	r3, r3
 8001314:	22aa      	movs	r2, #170	; 0xaa
 8001316:	2104      	movs	r1, #4
 8001318:	2060      	movs	r0, #96	; 0x60
 800131a:	f000 fec7 	bl	80020ac <MLX90621_I2CWrite>
 800131e:	60f8      	str	r0, [r7, #12]
    
    if (error != 0)
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MLX90621_Configure+0x2a>
    {
        return error;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	e017      	b.n	800135a <MLX90621_Configure+0x5a>
    }

    value = 256*eeData[246] + eeData[245];      
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	33f6      	adds	r3, #246	; 0xf6
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	b29b      	uxth	r3, r3
 8001332:	021b      	lsls	r3, r3, #8
 8001334:	b29a      	uxth	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	33f5      	adds	r3, #245	; 0xf5
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	b29b      	uxth	r3, r3
 800133e:	4413      	add	r3, r2
 8001340:	817b      	strh	r3, [r7, #10]
    value = value | 0x0400;
 8001342:	897b      	ldrh	r3, [r7, #10]
 8001344:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001348:	817b      	strh	r3, [r7, #10]
    error = MLX90621_I2CWrite(0x60, 0x03, 0x55, value);
 800134a:	897b      	ldrh	r3, [r7, #10]
 800134c:	2255      	movs	r2, #85	; 0x55
 800134e:	2103      	movs	r1, #3
 8001350:	2060      	movs	r0, #96	; 0x60
 8001352:	f000 feab 	bl	80020ac <MLX90621_I2CWrite>
 8001356:	60f8      	str	r0, [r7, #12]
    
    return error;      
 8001358:	68fb      	ldr	r3, [r7, #12]
    
}   
 800135a:	4618      	mov	r0, r3
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <MLX90621_GetConfiguration>:
       
    return error;    
}    

int MLX90621_GetConfiguration(uint16_t *cfgReg)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b086      	sub	sp, #24
 8001366:	af02      	add	r7, sp, #8
 8001368:	6078      	str	r0, [r7, #4]
    int error = 1;
 800136a:	2301      	movs	r3, #1
 800136c:	60fb      	str	r3, [r7, #12]
        
    error = MLX90621_I2CRead(0x60, 0x02, 0x92, 0, 1, cfgReg);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	9301      	str	r3, [sp, #4]
 8001372:	2301      	movs	r3, #1
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	2300      	movs	r3, #0
 8001378:	2292      	movs	r2, #146	; 0x92
 800137a:	2102      	movs	r1, #2
 800137c:	2060      	movs	r0, #96	; 0x60
 800137e:	f000 fe03 	bl	8001f88 <MLX90621_I2CRead>
 8001382:	60f8      	str	r0, [r7, #12]
       
    return error;    
 8001384:	68fb      	ldr	r3, [r7, #12]
}   
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <MLX90621_ExtractParameters>:
 

int MLX90621_ExtractParameters(uint8_t *eeData, paramsMLX90621 *mlx90621)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b084      	sub	sp, #16
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
 8001396:	6039      	str	r1, [r7, #0]
    int error = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]
    
    ExtractPTATParameters(eeData, mlx90621);
 800139c:	6839      	ldr	r1, [r7, #0]
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f000 fab4 	bl	800190c <ExtractPTATParameters>
    ExtractTgcParameters(eeData, mlx90621);
 80013a4:	6839      	ldr	r1, [r7, #0]
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f000 fb52 	bl	8001a50 <ExtractTgcParameters>
    ExtractKsTaParameters(eeData, mlx90621);
 80013ac:	6839      	ldr	r1, [r7, #0]
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f000 fb6c 	bl	8001a8c <ExtractKsTaParameters>
    ExtractKsToParameters(eeData, mlx90621);
 80013b4:	6839      	ldr	r1, [r7, #0]
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f000 fba4 	bl	8001b04 <ExtractKsToParameters>
    ExtractAlphaParameters(eeData, mlx90621);
 80013bc:	6839      	ldr	r1, [r7, #0]
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f000 fbe6 	bl	8001b90 <ExtractAlphaParameters>
    ExtractOffsetParameters(eeData, mlx90621);
 80013c4:	6839      	ldr	r1, [r7, #0]
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f000 fca2 	bl	8001d10 <ExtractOffsetParameters>
        
    return error;
 80013cc:	68fb      	ldr	r3, [r7, #12]

}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <MLX90621_GetCurResolution>:
}

//------------------------------------------------------------------------------

int MLX90621_GetCurResolution()
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b084      	sub	sp, #16
 80013da:	af00      	add	r7, sp, #0
    uint16_t cfgReg;
    int resolution;
    int error;
    
    error = MLX90621_GetConfiguration(&cfgReg);
 80013dc:	1dbb      	adds	r3, r7, #6
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff ffbf 	bl	8001362 <MLX90621_GetConfiguration>
 80013e4:	60f8      	str	r0, [r7, #12]
    if(error != 0)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MLX90621_GetCurResolution+0x1a>
    {
        return error;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	e005      	b.n	80013fc <MLX90621_GetCurResolution+0x26>
    }    
    resolution = (cfgReg & 0x0030) >> 4;
 80013f0:	88fb      	ldrh	r3, [r7, #6]
 80013f2:	111b      	asrs	r3, r3, #4
 80013f4:	f003 0303 	and.w	r3, r3, #3
 80013f8:	60bb      	str	r3, [r7, #8]
    
    return resolution; 
 80013fa:	68bb      	ldr	r3, [r7, #8]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <MLX90621_SetRefreshRate>:

//------------------------------------------------------------------------------

int MLX90621_SetRefreshRate(uint8_t refreshRate)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	71fb      	strb	r3, [r7, #7]
    uint16_t cfgReg;
    int value;
    int error;
    
    value = refreshRate & 0x0F;
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	f003 030f 	and.w	r3, r3, #15
 8001414:	613b      	str	r3, [r7, #16]
    
    error = MLX90621_GetConfiguration(&cfgReg);
 8001416:	f107 030e 	add.w	r3, r7, #14
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff ffa1 	bl	8001362 <MLX90621_GetConfiguration>
 8001420:	6178      	str	r0, [r7, #20]
        
    if(error == 0)
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d10f      	bne.n	8001448 <MLX90621_SetRefreshRate+0x44>
    {
        value = (cfgReg & 0xFFF0) | value;
 8001428:	89fb      	ldrh	r3, [r7, #14]
 800142a:	461a      	mov	r2, r3
 800142c:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8001430:	4013      	ands	r3, r2
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4313      	orrs	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        error = MLX90621_I2CWrite(0x60, 0x03, 0x55, value);        
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	b29b      	uxth	r3, r3
 800143c:	2255      	movs	r2, #85	; 0x55
 800143e:	2103      	movs	r1, #3
 8001440:	2060      	movs	r0, #96	; 0x60
 8001442:	f000 fe33 	bl	80020ac <MLX90621_I2CWrite>
 8001446:	6178      	str	r0, [r7, #20]
    }    
    
    return error;
 8001448:	697b      	ldr	r3, [r7, #20]
}
 800144a:	4618      	mov	r0, r3
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <MLX90621_GetRefreshRate>:

//------------------------------------------------------------------------------

int MLX90621_GetRefreshRate()
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b084      	sub	sp, #16
 8001456:	af00      	add	r7, sp, #0
    uint16_t cfgReg;
    int rr;
    int error;
    
    error = MLX90621_GetConfiguration(&cfgReg);
 8001458:	1dbb      	adds	r3, r7, #6
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff ff81 	bl	8001362 <MLX90621_GetConfiguration>
 8001460:	60f8      	str	r0, [r7, #12]
    if(error != 0)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MLX90621_GetRefreshRate+0x1a>
    {
        return error;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	e004      	b.n	8001476 <MLX90621_GetRefreshRate+0x24>
    }    
    rr = (cfgReg & 0x000F);
 800146c:	88fb      	ldrh	r3, [r7, #6]
 800146e:	f003 030f 	and.w	r3, r3, #15
 8001472:	60bb      	str	r3, [r7, #8]
    
    return rr; 
 8001474:	68bb      	ldr	r3, [r7, #8]
}
 8001476:	4618      	mov	r0, r3
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
	...

08001480 <MLX90621_CalculateTo>:

//------------------------------------------------------------------------------

void MLX90621_CalculateTo(uint16_t *frameData, const paramsMLX90621 *params, float emissivity, float tr, float *result)
{
 8001480:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001484:	b090      	sub	sp, #64	; 0x40
 8001486:	af00      	add	r7, sp, #0
 8001488:	6178      	str	r0, [r7, #20]
 800148a:	6139      	str	r1, [r7, #16]
 800148c:	ed87 0a03 	vstr	s0, [r7, #12]
 8001490:	edc7 0a02 	vstr	s1, [r7, #8]
 8001494:	607a      	str	r2, [r7, #4]
    float irData;
    float alphaCompensated;
    float Sx;
    float To;
    
    ta = MLX90621_GetTa(frameData, params);
 8001496:	6939      	ldr	r1, [r7, #16]
 8001498:	6978      	ldr	r0, [r7, #20]
 800149a:	f000 f9b3 	bl	8001804 <MLX90621_GetTa>
 800149e:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
    
    ta4 = (ta + 273.15);
 80014a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80014a4:	f7fe fff4 	bl	8000490 <__aeabi_f2d>
 80014a8:	a3d1      	add	r3, pc, #836	; (adr r3, 80017f0 <MLX90621_CalculateTo+0x370>)
 80014aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ae:	f7fe fe91 	bl	80001d4 <__adddf3>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4610      	mov	r0, r2
 80014b8:	4619      	mov	r1, r3
 80014ba:	f7ff faf1 	bl	8000aa0 <__aeabi_d2f>
 80014be:	4603      	mov	r3, r0
 80014c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    ta4 = ta4 * ta4;
 80014c2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80014c6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014ca:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    ta4 = ta4 * ta4;
 80014ce:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80014d2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014d6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    tr4 = (tr + 273.15);
 80014da:	68b8      	ldr	r0, [r7, #8]
 80014dc:	f7fe ffd8 	bl	8000490 <__aeabi_f2d>
 80014e0:	a3c3      	add	r3, pc, #780	; (adr r3, 80017f0 <MLX90621_CalculateTo+0x370>)
 80014e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e6:	f7fe fe75 	bl	80001d4 <__adddf3>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	4610      	mov	r0, r2
 80014f0:	4619      	mov	r1, r3
 80014f2:	f7ff fad5 	bl	8000aa0 <__aeabi_d2f>
 80014f6:	4603      	mov	r3, r0
 80014f8:	62bb      	str	r3, [r7, #40]	; 0x28
    tr4 = tr4 * tr4;
 80014fa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80014fe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001502:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    tr4 = tr4 * tr4;
 8001506:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800150a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800150e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    taTr = tr4 - (tr4-ta4)/emissivity;
 8001512:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001516:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800151a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800151e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001522:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001526:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800152a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800152e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    
//------------------------- To calculation -------------------------------------    
        
    irDataCP = frameData[65];  
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	3382      	adds	r3, #130	; 0x82
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	ee07 3a90 	vmov	s15, r3
 800153c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001540:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    if(irDataCP > 32767)
 8001544:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001548:	ed9f 7aab 	vldr	s14, [pc, #684]	; 80017f8 <MLX90621_CalculateTo+0x378>
 800154c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001554:	dd07      	ble.n	8001566 <MLX90621_CalculateTo+0xe6>
    {
        irDataCP = irDataCP - 65536;
 8001556:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800155a:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 80017fc <MLX90621_CalculateTo+0x37c>
 800155e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001562:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }

    irDataCP = irDataCP - (params->cpA + params->cpB * (ta - 25));
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	ed93 7ac7 	vldr	s14, [r3, #796]	; 0x31c
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	edd3 6ac8 	vldr	s13, [r3, #800]	; 0x320
 8001572:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001576:	eeb3 6a09 	vmov.f32	s12, #57	; 0x41c80000  25.0
 800157a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800157e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001582:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001586:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800158a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800158e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    
    for( int pixelNumber = 0; pixelNumber < 64; pixelNumber++)
 8001592:	2300      	movs	r3, #0
 8001594:	637b      	str	r3, [r7, #52]	; 0x34
 8001596:	e121      	b.n	80017dc <MLX90621_CalculateTo+0x35c>
    {    
        irData = frameData[pixelNumber];
 8001598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	697a      	ldr	r2, [r7, #20]
 800159e:	4413      	add	r3, r2
 80015a0:	881b      	ldrh	r3, [r3, #0]
 80015a2:	ee07 3a90 	vmov	s15, r3
 80015a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015aa:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        if(irData > 32767)
 80015ae:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80015b2:	ed9f 7a91 	vldr	s14, [pc, #580]	; 80017f8 <MLX90621_CalculateTo+0x378>
 80015b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015be:	dd07      	ble.n	80015d0 <MLX90621_CalculateTo+0x150>
        {
            irData = irData - 65536;
 80015c0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80015c4:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 80017fc <MLX90621_CalculateTo+0x37c>
 80015c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80015cc:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        }
        
        irData = irData - (params->ai[pixelNumber] + params->bi[pixelNumber] * (ta - 25));
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015d4:	3346      	adds	r3, #70	; 0x46
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	ed93 7a00 	vldr	s14, [r3]
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015e2:	3386      	adds	r3, #134	; 0x86
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4413      	add	r3, r2
 80015e8:	edd3 6a00 	vldr	s13, [r3]
 80015ec:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80015f0:	eeb3 6a09 	vmov.f32	s12, #57	; 0x41c80000  25.0
 80015f4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80015f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001600:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001604:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001608:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        
        irData = irData - params->tgc * irDataCP;
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001612:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800161a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800161e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001622:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        irData = irData / emissivity;
 8001626:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800162a:	ed97 7a03 	vldr	s14, [r7, #12]
 800162e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001632:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        
        alphaCompensated = params->alpha[pixelNumber] - params->tgc * params->cpAlpha;
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800163a:	3306      	adds	r3, #6
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	ed93 7a00 	vldr	s14, [r3]
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	edd3 6a03 	vldr	s13, [r3, #12]
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	edd3 7ac6 	vldr	s15, [r3, #792]	; 0x318
 8001650:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001654:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001658:	edc7 7a08 	vstr	s15, [r7, #32]
        alphaCompensated = alphaCompensated *(1 + params->KsTa * (ta - 25));
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001662:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001666:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 800166a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800166e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001672:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001676:	ee77 7a87 	vadd.f32	s15, s15, s14
 800167a:	ed97 7a08 	vldr	s14, [r7, #32]
 800167e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001682:	edc7 7a08 	vstr	s15, [r7, #32]
                    
        Sx = alphaCompensated * alphaCompensated * alphaCompensated * (irData + alphaCompensated * taTr);
 8001686:	edd7 7a08 	vldr	s15, [r7, #32]
 800168a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800168e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001692:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001696:	edd7 6a08 	vldr	s13, [r7, #32]
 800169a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800169e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016a2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80016a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80016aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ae:	edc7 7a07 	vstr	s15, [r7, #28]
        Sx = sqrt(sqrt(Sx)) * params->ksTo;            
 80016b2:	69f8      	ldr	r0, [r7, #28]
 80016b4:	f7fe feec 	bl	8000490 <__aeabi_f2d>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	ec43 2b10 	vmov	d0, r2, r3
 80016c0:	f005 ffa4 	bl	800760c <sqrt>
 80016c4:	eeb0 7a40 	vmov.f32	s14, s0
 80016c8:	eef0 7a60 	vmov.f32	s15, s1
 80016cc:	eeb0 0a47 	vmov.f32	s0, s14
 80016d0:	eef0 0a67 	vmov.f32	s1, s15
 80016d4:	f005 ff9a 	bl	800760c <sqrt>
 80016d8:	ec55 4b10 	vmov	r4, r5, d0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	695b      	ldr	r3, [r3, #20]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe fed5 	bl	8000490 <__aeabi_f2d>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4620      	mov	r0, r4
 80016ec:	4629      	mov	r1, r5
 80016ee:	f7fe ff27 	bl	8000540 <__aeabi_dmul>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4610      	mov	r0, r2
 80016f8:	4619      	mov	r1, r3
 80016fa:	f7ff f9d1 	bl	8000aa0 <__aeabi_d2f>
 80016fe:	4603      	mov	r3, r0
 8001700:	61fb      	str	r3, [r7, #28]
        
        To = sqrt(sqrt(irData/(alphaCompensated * (1 - params->ksTo * 273.15) + Sx) + taTr)) - 273.15;                     
 8001702:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001704:	f7fe fec4 	bl	8000490 <__aeabi_f2d>
 8001708:	4604      	mov	r4, r0
 800170a:	460d      	mov	r5, r1
 800170c:	6a38      	ldr	r0, [r7, #32]
 800170e:	f7fe febf 	bl	8000490 <__aeabi_f2d>
 8001712:	4680      	mov	r8, r0
 8001714:	4689      	mov	r9, r1
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	4618      	mov	r0, r3
 800171c:	f7fe feb8 	bl	8000490 <__aeabi_f2d>
 8001720:	a333      	add	r3, pc, #204	; (adr r3, 80017f0 <MLX90621_CalculateTo+0x370>)
 8001722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001726:	f7fe ff0b 	bl	8000540 <__aeabi_dmul>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	f04f 0000 	mov.w	r0, #0
 8001732:	4933      	ldr	r1, [pc, #204]	; (8001800 <MLX90621_CalculateTo+0x380>)
 8001734:	f7fe fd4c 	bl	80001d0 <__aeabi_dsub>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	4640      	mov	r0, r8
 800173e:	4649      	mov	r1, r9
 8001740:	f7fe fefe 	bl	8000540 <__aeabi_dmul>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4690      	mov	r8, r2
 800174a:	4699      	mov	r9, r3
 800174c:	69f8      	ldr	r0, [r7, #28]
 800174e:	f7fe fe9f 	bl	8000490 <__aeabi_f2d>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	4640      	mov	r0, r8
 8001758:	4649      	mov	r1, r9
 800175a:	f7fe fd3b 	bl	80001d4 <__adddf3>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4620      	mov	r0, r4
 8001764:	4629      	mov	r1, r5
 8001766:	f7ff f815 	bl	8000794 <__aeabi_ddiv>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4614      	mov	r4, r2
 8001770:	461d      	mov	r5, r3
 8001772:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001774:	f7fe fe8c 	bl	8000490 <__aeabi_f2d>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4620      	mov	r0, r4
 800177e:	4629      	mov	r1, r5
 8001780:	f7fe fd28 	bl	80001d4 <__adddf3>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	ec43 2b17 	vmov	d7, r2, r3
 800178c:	eeb0 0a47 	vmov.f32	s0, s14
 8001790:	eef0 0a67 	vmov.f32	s1, s15
 8001794:	f005 ff3a 	bl	800760c <sqrt>
 8001798:	eeb0 7a40 	vmov.f32	s14, s0
 800179c:	eef0 7a60 	vmov.f32	s15, s1
 80017a0:	eeb0 0a47 	vmov.f32	s0, s14
 80017a4:	eef0 0a67 	vmov.f32	s1, s15
 80017a8:	f005 ff30 	bl	800760c <sqrt>
 80017ac:	ec51 0b10 	vmov	r0, r1, d0
 80017b0:	a30f      	add	r3, pc, #60	; (adr r3, 80017f0 <MLX90621_CalculateTo+0x370>)
 80017b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b6:	f7fe fd0b 	bl	80001d0 <__aeabi_dsub>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4610      	mov	r0, r2
 80017c0:	4619      	mov	r1, r3
 80017c2:	f7ff f96d 	bl	8000aa0 <__aeabi_d2f>
 80017c6:	4603      	mov	r3, r0
 80017c8:	61bb      	str	r3, [r7, #24]
                                    
        result[pixelNumber] = To;
 80017ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	4413      	add	r3, r2
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	601a      	str	r2, [r3, #0]
    for( int pixelNumber = 0; pixelNumber < 64; pixelNumber++)
 80017d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017d8:	3301      	adds	r3, #1
 80017da:	637b      	str	r3, [r7, #52]	; 0x34
 80017dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017de:	2b3f      	cmp	r3, #63	; 0x3f
 80017e0:	f77f aeda 	ble.w	8001598 <MLX90621_CalculateTo+0x118>
    
    }
}
 80017e4:	bf00      	nop
 80017e6:	bf00      	nop
 80017e8:	3740      	adds	r7, #64	; 0x40
 80017ea:	46bd      	mov	sp, r7
 80017ec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017f0:	66666666 	.word	0x66666666
 80017f4:	40711266 	.word	0x40711266
 80017f8:	46fffe00 	.word	0x46fffe00
 80017fc:	47800000 	.word	0x47800000
 8001800:	3ff00000 	.word	0x3ff00000

08001804 <MLX90621_GetTa>:
}

//------------------------------------------------------------------------------

float MLX90621_GetTa(uint16_t *frameData, const paramsMLX90621 *params)
{
 8001804:	b5b0      	push	{r4, r5, r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
    float ptat;
    float ta;
    
    ptat = frameData[64];
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3380      	adds	r3, #128	; 0x80
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	ee07 3a90 	vmov	s15, r3
 8001818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800181c:	edc7 7a03 	vstr	s15, [r7, #12]
    if(ptat > 32767)
 8001820:	edd7 7a03 	vldr	s15, [r7, #12]
 8001824:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001904 <MLX90621_GetTa+0x100>
 8001828:	eef4 7ac7 	vcmpe.f32	s15, s14
 800182c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001830:	dd07      	ble.n	8001842 <MLX90621_GetTa+0x3e>
    {
        ptat = ptat - 65536;
 8001832:	edd7 7a03 	vldr	s15, [r7, #12]
 8001836:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001908 <MLX90621_GetTa+0x104>
 800183a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800183e:	edc7 7a03 	vstr	s15, [r7, #12]
    }
       
    ta = params->vTh25 - ptat;
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001848:	ee07 3a90 	vmov	s15, r3
 800184c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001850:	edd7 7a03 	vldr	s15, [r7, #12]
 8001854:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001858:	edc7 7a02 	vstr	s15, [r7, #8]
    ta = 4*params->kT2*ta;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001862:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001866:	ee67 7a87 	vmul.f32	s15, s15, s14
 800186a:	ed97 7a02 	vldr	s14, [r7, #8]
 800186e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001872:	edc7 7a02 	vstr	s15, [r7, #8]
    ta = params->kT1*params->kT1 - ta;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	ed93 7a01 	vldr	s14, [r3, #4]
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001882:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001886:	edd7 7a02 	vldr	s15, [r7, #8]
 800188a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800188e:	edc7 7a02 	vstr	s15, [r7, #8]
    ta = sqrt(ta)-params->kT1;
 8001892:	68b8      	ldr	r0, [r7, #8]
 8001894:	f7fe fdfc 	bl	8000490 <__aeabi_f2d>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	ec43 2b10 	vmov	d0, r2, r3
 80018a0:	f005 feb4 	bl	800760c <sqrt>
 80018a4:	ec55 4b10 	vmov	r4, r5, d0
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7fe fdef 	bl	8000490 <__aeabi_f2d>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4620      	mov	r0, r4
 80018b8:	4629      	mov	r1, r5
 80018ba:	f7fe fc89 	bl	80001d0 <__aeabi_dsub>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4610      	mov	r0, r2
 80018c4:	4619      	mov	r1, r3
 80018c6:	f7ff f8eb 	bl	8000aa0 <__aeabi_d2f>
 80018ca:	4603      	mov	r3, r0
 80018cc:	60bb      	str	r3, [r7, #8]
    ta = ta / (2*params->kT2);
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80018d4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80018d8:	edd7 6a02 	vldr	s13, [r7, #8]
 80018dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018e0:	edc7 7a02 	vstr	s15, [r7, #8]
    ta = ta + 25;
 80018e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80018e8:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80018ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018f0:	edc7 7a02 	vstr	s15, [r7, #8]
    
    return ta;
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	ee07 3a90 	vmov	s15, r3
}
 80018fa:	eeb0 0a67 	vmov.f32	s0, s15
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bdb0      	pop	{r4, r5, r7, pc}
 8001904:	46fffe00 	.word	0x46fffe00
 8001908:	47800000 	.word	0x47800000

0800190c <ExtractPTATParameters>:

//------------------------------------------------------------------------------

void ExtractPTATParameters(uint8_t *eeData, paramsMLX90621 *mlx90621)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b088      	sub	sp, #32
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
    float kt1;
    float kt2;
    int16_t vth25;
    int kt1Scale = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
    int kt2Scale = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
    int resolution = 3;
 800191e:	2303      	movs	r3, #3
 8001920:	60fb      	str	r3, [r7, #12]
    uint16_t data;
    
    resolution = resolution - MLX90621_GetCurResolution();
 8001922:	f7ff fd58 	bl	80013d6 <MLX90621_GetCurResolution>
 8001926:	4602      	mov	r2, r0
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	1a9b      	subs	r3, r3, r2
 800192c:	60fb      	str	r3, [r7, #12]
    kt1Scale = (eeData[210] & 0xF0) >> 4;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	33d2      	adds	r3, #210	; 0xd2
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	091b      	lsrs	r3, r3, #4
 8001936:	b2db      	uxtb	r3, r3
 8001938:	617b      	str	r3, [r7, #20]
    kt2Scale = eeData[210] & 0x0F;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	33d2      	adds	r3, #210	; 0xd2
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	f003 030f 	and.w	r3, r3, #15
 8001944:	613b      	str	r3, [r7, #16]
    kt2Scale = kt2Scale + 10;
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	330a      	adds	r3, #10
 800194a:	613b      	str	r3, [r7, #16]
    kt1Scale = kt1Scale + resolution;
 800194c:	697a      	ldr	r2, [r7, #20]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	4413      	add	r3, r2
 8001952:	617b      	str	r3, [r7, #20]
    kt2Scale = kt2Scale + resolution;
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	4413      	add	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
    
    data = (eeData[219]<<8) + eeData[218];
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	33db      	adds	r3, #219	; 0xdb
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	b29b      	uxth	r3, r3
 8001964:	021b      	lsls	r3, r3, #8
 8001966:	b29a      	uxth	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	33da      	adds	r3, #218	; 0xda
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	b29b      	uxth	r3, r3
 8001970:	4413      	add	r3, r2
 8001972:	817b      	strh	r3, [r7, #10]
    vth25 = data;
 8001974:	897b      	ldrh	r3, [r7, #10]
 8001976:	813b      	strh	r3, [r7, #8]
    
    kt1 = (eeData[221]<<8) + eeData[220];
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	33dd      	adds	r3, #221	; 0xdd
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	021b      	lsls	r3, r3, #8
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	32dc      	adds	r2, #220	; 0xdc
 8001984:	7812      	ldrb	r2, [r2, #0]
 8001986:	4413      	add	r3, r2
 8001988:	ee07 3a90 	vmov	s15, r3
 800198c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001990:	edc7 7a07 	vstr	s15, [r7, #28]
    if (kt1 > 32767)
 8001994:	edd7 7a07 	vldr	s15, [r7, #28]
 8001998:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001a48 <ExtractPTATParameters+0x13c>
 800199c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a4:	dd07      	ble.n	80019b6 <ExtractPTATParameters+0xaa>
    {
        kt1 = kt1 - 65536;
 80019a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80019aa:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001a4c <ExtractPTATParameters+0x140>
 80019ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80019b2:	edc7 7a07 	vstr	s15, [r7, #28]
    }  
    
    kt1 = kt1 / (1<<kt1Scale);  
 80019b6:	2201      	movs	r2, #1
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	ee07 3a90 	vmov	s15, r3
 80019c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80019ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019ce:	edc7 7a07 	vstr	s15, [r7, #28]
    
    kt2 = (eeData[223]<<8) + eeData[222];
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	33df      	adds	r3, #223	; 0xdf
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	021b      	lsls	r3, r3, #8
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	32de      	adds	r2, #222	; 0xde
 80019de:	7812      	ldrb	r2, [r2, #0]
 80019e0:	4413      	add	r3, r2
 80019e2:	ee07 3a90 	vmov	s15, r3
 80019e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ea:	edc7 7a06 	vstr	s15, [r7, #24]
    if (kt2 > 32767)
 80019ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80019f2:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001a48 <ExtractPTATParameters+0x13c>
 80019f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019fe:	dd07      	ble.n	8001a10 <ExtractPTATParameters+0x104>
    {
        kt2 = kt2 - 65536;
 8001a00:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a04:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001a4c <ExtractPTATParameters+0x140>
 8001a08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a0c:	edc7 7a06 	vstr	s15, [r7, #24]
    }  
    
    kt2 = kt2 / (1<<kt2Scale); 
 8001a10:	2201      	movs	r2, #1
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	ee07 3a90 	vmov	s15, r3
 8001a1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a20:	edd7 6a06 	vldr	s13, [r7, #24]
 8001a24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a28:	edc7 7a06 	vstr	s15, [r7, #24]
    
    mlx90621->vTh25 = vth25;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	893a      	ldrh	r2, [r7, #8]
 8001a30:	801a      	strh	r2, [r3, #0]
    mlx90621->kT1 = kt1;    
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	69fa      	ldr	r2, [r7, #28]
 8001a36:	605a      	str	r2, [r3, #4]
    mlx90621->kT2 = kt2;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	609a      	str	r2, [r3, #8]
      
}
 8001a3e:	bf00      	nop
 8001a40:	3720      	adds	r7, #32
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	46fffe00 	.word	0x46fffe00
 8001a4c:	47800000 	.word	0x47800000

08001a50 <ExtractTgcParameters>:

//------------------------------------------------------------------------------

void ExtractTgcParameters(uint8_t *eeData, paramsMLX90621 *mlx90621)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
    float tgc;
    tgc = eeData[216]/32.0f;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	33d8      	adds	r3, #216	; 0xd8
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	ee07 3a90 	vmov	s15, r3
 8001a64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a68:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001a88 <ExtractTgcParameters+0x38>
 8001a6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a70:	edc7 7a03 	vstr	s15, [r7, #12]
        
    mlx90621->tgc = tgc;        
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	60da      	str	r2, [r3, #12]
}
 8001a7a:	bf00      	nop
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	42000000 	.word	0x42000000

08001a8c <ExtractKsTaParameters>:

//------------------------------------------------------------------------------

void ExtractKsTaParameters(uint8_t *eeData, paramsMLX90621 *mlx90621)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
    float KsTa;
    KsTa = (eeData[231] << 8) + eeData[230];
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	33e7      	adds	r3, #231	; 0xe7
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	021b      	lsls	r3, r3, #8
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	32e6      	adds	r2, #230	; 0xe6
 8001aa2:	7812      	ldrb	r2, [r2, #0]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	ee07 3a90 	vmov	s15, r3
 8001aaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aae:	edc7 7a03 	vstr	s15, [r7, #12]
    if(KsTa > 32767)
 8001ab2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ab6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001af8 <ExtractKsTaParameters+0x6c>
 8001aba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac2:	dd07      	ble.n	8001ad4 <ExtractKsTaParameters+0x48>
    {
        KsTa = KsTa - 65536;
 8001ac4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ac8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001afc <ExtractKsTaParameters+0x70>
 8001acc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ad0:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    KsTa = KsTa / (1<<20);
 8001ad4:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ad8:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001b00 <ExtractKsTaParameters+0x74>
 8001adc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ae0:	edc7 7a03 	vstr	s15, [r7, #12]
    
    mlx90621->KsTa = KsTa;
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	611a      	str	r2, [r3, #16]
}
 8001aea:	bf00      	nop
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	46fffe00 	.word	0x46fffe00
 8001afc:	47800000 	.word	0x47800000
 8001b00:	49800000 	.word	0x49800000

08001b04 <ExtractKsToParameters>:

//------------------------------------------------------------------------------

void ExtractKsToParameters(uint8_t *eeData, paramsMLX90621 *mlx90621)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
    int scale;
        
    scale = eeData[192] & 0x0F;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	33c0      	adds	r3, #192	; 0xc0
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	f003 030f 	and.w	r3, r3, #15
 8001b18:	60fb      	str	r3, [r7, #12]
    scale = scale + 8;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	3308      	adds	r3, #8
 8001b1e:	60fb      	str	r3, [r7, #12]
    
    mlx90621->ksTo = eeData[196];
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	33c4      	adds	r3, #196	; 0xc4
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	ee07 3a90 	vmov	s15, r3
 8001b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	edc3 7a05 	vstr	s15, [r3, #20]
       
    if(mlx90621->ksTo > 127)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b3a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001b88 <ExtractKsToParameters+0x84>
 8001b3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b46:	dd09      	ble.n	8001b5c <ExtractKsToParameters+0x58>
    {
        mlx90621->ksTo = mlx90621->ksTo - 256;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b4e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001b8c <ExtractKsToParameters+0x88>
 8001b52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	edc3 7a05 	vstr	s15, [r3, #20]
    }
    mlx90621->ksTo = mlx90621->ksTo / (1 << scale);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	edd3 6a05 	vldr	s13, [r3, #20]
 8001b62:	2201      	movs	r2, #1
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	ee07 3a90 	vmov	s15, r3
 8001b6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	edc3 7a05 	vstr	s15, [r3, #20]
    
}
 8001b7c:	bf00      	nop
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	42fe0000 	.word	0x42fe0000
 8001b8c:	43800000 	.word	0x43800000

08001b90 <ExtractAlphaParameters>:

//------------------------------------------------------------------------------

void ExtractAlphaParameters(uint8_t *eeData, paramsMLX90621 *mlx90621)
{    
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08c      	sub	sp, #48	; 0x30
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
    uint8_t resScale;
    float alphaCom; 
    float alphaTemp;
    float temp;
    
    alphaScale = eeData[226];
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	33e2      	adds	r3, #226	; 0xe2
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fc53 	bl	800044c <__aeabi_ui2d>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	e9c7 2308 	strd	r2, r3, [r7, #32]
    deltaScale = eeData[227];
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	33e3      	adds	r3, #227	; 0xe3
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe fc49 	bl	800044c <__aeabi_ui2d>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	e9c7 2306 	strd	r2, r3, [r7, #24]
    resScale = 3 - MLX90621_GetCurResolution();
 8001bc2:	f7ff fc08 	bl	80013d6 <MLX90621_GetCurResolution>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	f1c3 0303 	rsb	r3, r3, #3
 8001bce:	75fb      	strb	r3, [r7, #23]
    alphaCom = (eeData[225]<<8) + eeData[224];
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	33e1      	adds	r3, #225	; 0xe1
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	021b      	lsls	r3, r3, #8
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	32e0      	adds	r2, #224	; 0xe0
 8001bdc:	7812      	ldrb	r2, [r2, #0]
 8001bde:	4413      	add	r3, r2
 8001be0:	ee07 3a90 	vmov	s15, r3
 8001be4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001be8:	edc7 7a04 	vstr	s15, [r7, #16]
    alphaScale = pow(2,alphaScale);
 8001bec:	ed97 1b08 	vldr	d1, [r7, #32]
 8001bf0:	ed9f 0b45 	vldr	d0, [pc, #276]	; 8001d08 <ExtractAlphaParameters+0x178>
 8001bf4:	f005 fc9a 	bl	800752c <pow>
 8001bf8:	ed87 0b08 	vstr	d0, [r7, #32]
    deltaScale = pow(2,deltaScale);
 8001bfc:	ed97 1b06 	vldr	d1, [r7, #24]
 8001c00:	ed9f 0b41 	vldr	d0, [pc, #260]	; 8001d08 <ExtractAlphaParameters+0x178>
 8001c04:	f005 fc92 	bl	800752c <pow>
 8001c08:	ed87 0b06 	vstr	d0, [r7, #24]
    alphaCom = alphaCom / alphaScale;
 8001c0c:	6938      	ldr	r0, [r7, #16]
 8001c0e:	f7fe fc3f 	bl	8000490 <__aeabi_f2d>
 8001c12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c16:	f7fe fdbd 	bl	8000794 <__aeabi_ddiv>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4610      	mov	r0, r2
 8001c20:	4619      	mov	r1, r3
 8001c22:	f7fe ff3d 	bl	8000aa0 <__aeabi_d2f>
 8001c26:	4603      	mov	r3, r0
 8001c28:	613b      	str	r3, [r7, #16]
  
    for(int i = 0; i < 64; i++)
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c2e:	e036      	b.n	8001c9e <ExtractAlphaParameters+0x10e>
    {
        temp = eeData[128+i];
 8001c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c32:	3380      	adds	r3, #128	; 0x80
 8001c34:	461a      	mov	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4413      	add	r3, r2
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	ee07 3a90 	vmov	s15, r3
 8001c40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c44:	edc7 7a02 	vstr	s15, [r7, #8]
        temp = temp / deltaScale;        
 8001c48:	68b8      	ldr	r0, [r7, #8]
 8001c4a:	f7fe fc21 	bl	8000490 <__aeabi_f2d>
 8001c4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c52:	f7fe fd9f 	bl	8000794 <__aeabi_ddiv>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f7fe ff1f 	bl	8000aa0 <__aeabi_d2f>
 8001c62:	4603      	mov	r3, r0
 8001c64:	60bb      	str	r3, [r7, #8]
        alphaTemp = (alphaCom + temp)/(1<<resScale);
 8001c66:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c6e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001c72:	7dfb      	ldrb	r3, [r7, #23]
 8001c74:	2201      	movs	r2, #1
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	ee07 3a90 	vmov	s15, r3
 8001c7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c86:	edc7 7a03 	vstr	s15, [r7, #12]
        mlx90621->alpha[i] = alphaTemp;
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c8e:	3306      	adds	r3, #6
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < 64; i++)
 8001c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca0:	2b3f      	cmp	r3, #63	; 0x3f
 8001ca2:	ddc5      	ble.n	8001c30 <ExtractAlphaParameters+0xa0>
    } 
    
    alphaTemp = (eeData[215]<<8) + eeData[214];
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	33d7      	adds	r3, #215	; 0xd7
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	021b      	lsls	r3, r3, #8
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	32d6      	adds	r2, #214	; 0xd6
 8001cb0:	7812      	ldrb	r2, [r2, #0]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	ee07 3a90 	vmov	s15, r3
 8001cb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cbc:	edc7 7a03 	vstr	s15, [r7, #12]
    alphaTemp = alphaTemp / alphaScale;
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	f7fe fbe5 	bl	8000490 <__aeabi_f2d>
 8001cc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001cca:	f7fe fd63 	bl	8000794 <__aeabi_ddiv>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	4610      	mov	r0, r2
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f7fe fee3 	bl	8000aa0 <__aeabi_d2f>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	60fb      	str	r3, [r7, #12]
    
    mlx90621->cpAlpha = alphaTemp / (1<<resScale);
 8001cde:	7dfb      	ldrb	r3, [r7, #23]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	ee07 3a90 	vmov	s15, r3
 8001cea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cee:	edd7 6a03 	vldr	s13, [r7, #12]
 8001cf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	edc3 7ac6 	vstr	s15, [r3, #792]	; 0x318
}
 8001cfc:	bf00      	nop
 8001cfe:	3730      	adds	r7, #48	; 0x30
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	f3af 8000 	nop.w
 8001d08:	00000000 	.word	0x00000000
 8001d0c:	40000000 	.word	0x40000000

08001d10 <ExtractOffsetParameters>:

//------------------------------------------------------------------------------

void ExtractOffsetParameters(uint8_t *eeData, paramsMLX90621 *mlx90621)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08a      	sub	sp, #40	; 0x28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
    int16_t aCom;
    float aTemp;
    float bTemp;
    uint16_t data;
    
    aScale = eeData[217]>>4;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	33d9      	adds	r3, #217	; 0xd9
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	091b      	lsrs	r3, r3, #4
 8001d22:	76fb      	strb	r3, [r7, #27]
    bScale = eeData[217] & 0x0F;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	33d9      	adds	r3, #217	; 0xd9
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	ee07 3a90 	vmov	s15, r3
 8001d32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d36:	edc7 7a05 	vstr	s15, [r7, #20]
    resScale = 3 - MLX90621_GetCurResolution();
 8001d3a:	f7ff fb4c 	bl	80013d6 <MLX90621_GetCurResolution>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	f1c3 0303 	rsb	r3, r3, #3
 8001d46:	74fb      	strb	r3, [r7, #19]
    bScale = pow(2, (double)(bScale+resScale));
 8001d48:	7cfb      	ldrb	r3, [r7, #19]
 8001d4a:	ee07 3a90 	vmov	s15, r3
 8001d4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d52:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d5a:	ee17 0a90 	vmov	r0, s15
 8001d5e:	f7fe fb97 	bl	8000490 <__aeabi_f2d>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	ec43 2b11 	vmov	d1, r2, r3
 8001d6a:	ed9f 0b69 	vldr	d0, [pc, #420]	; 8001f10 <ExtractOffsetParameters+0x200>
 8001d6e:	f005 fbdd 	bl	800752c <pow>
 8001d72:	ec53 2b10 	vmov	r2, r3, d0
 8001d76:	4610      	mov	r0, r2
 8001d78:	4619      	mov	r1, r3
 8001d7a:	f7fe fe91 	bl	8000aa0 <__aeabi_d2f>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	617b      	str	r3, [r7, #20]
    
    data = (eeData[209]<<8) + eeData[208];
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	33d1      	adds	r3, #209	; 0xd1
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	021b      	lsls	r3, r3, #8
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	33d0      	adds	r3, #208	; 0xd0
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	4413      	add	r3, r2
 8001d98:	823b      	strh	r3, [r7, #16]
    aCom = data;    
 8001d9a:	8a3b      	ldrh	r3, [r7, #16]
 8001d9c:	81fb      	strh	r3, [r7, #14]

    for(int i=0; i<64; i++)
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61fb      	str	r3, [r7, #28]
 8001da2:	e057      	b.n	8001e54 <ExtractOffsetParameters+0x144>
    {
        aTemp = eeData[i]<<aScale; 
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	4413      	add	r3, r2
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	461a      	mov	r2, r3
 8001dae:	7efb      	ldrb	r3, [r7, #27]
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	ee07 3a90 	vmov	s15, r3
 8001db8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dbc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        bTemp = eeData[64+i];
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	3340      	adds	r3, #64	; 0x40
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	ee07 3a90 	vmov	s15, r3
 8001dd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dd4:	edc7 7a08 	vstr	s15, [r7, #32]
        if (bTemp > 127)
 8001dd8:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ddc:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001f18 <ExtractOffsetParameters+0x208>
 8001de0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de8:	dd07      	ble.n	8001dfa <ExtractOffsetParameters+0xea>
        {
            bTemp = bTemp - 256;
 8001dea:	edd7 7a08 	vldr	s15, [r7, #32]
 8001dee:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8001f1c <ExtractOffsetParameters+0x20c>
 8001df2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001df6:	edc7 7a08 	vstr	s15, [r7, #32]
        }            
        bTemp = bTemp / bScale;
 8001dfa:	edd7 6a08 	vldr	s13, [r7, #32]
 8001dfe:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e06:	edc7 7a08 	vstr	s15, [r7, #32]
        
        mlx90621->ai[i] = (aCom + aTemp) / (1<<resScale);
 8001e0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e0e:	ee07 3a90 	vmov	s15, r3
 8001e12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e16:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001e1a:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001e1e:	7cfb      	ldrb	r3, [r7, #19]
 8001e20:	2201      	movs	r2, #1
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	ee07 3a90 	vmov	s15, r3
 8001e2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	3346      	adds	r3, #70	; 0x46
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4413      	add	r3, r2
 8001e3c:	edc3 7a00 	vstr	s15, [r3]
        mlx90621->bi[i] = bTemp;
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3386      	adds	r3, #134	; 0x86
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	6a3a      	ldr	r2, [r7, #32]
 8001e4c:	601a      	str	r2, [r3, #0]
    for(int i=0; i<64; i++)
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3301      	adds	r3, #1
 8001e52:	61fb      	str	r3, [r7, #28]
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	2b3f      	cmp	r3, #63	; 0x3f
 8001e58:	dda4      	ble.n	8001da4 <ExtractOffsetParameters+0x94>
    } 
    
    aTemp = (eeData[212]<<8) + eeData[211];
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	33d4      	adds	r3, #212	; 0xd4
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	021b      	lsls	r3, r3, #8
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	32d3      	adds	r2, #211	; 0xd3
 8001e66:	7812      	ldrb	r2, [r2, #0]
 8001e68:	4413      	add	r3, r2
 8001e6a:	ee07 3a90 	vmov	s15, r3
 8001e6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e72:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    if (aTemp > 32767)
 8001e76:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001e7a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001f20 <ExtractOffsetParameters+0x210>
 8001e7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e86:	dd07      	ble.n	8001e98 <ExtractOffsetParameters+0x188>
    {
        aTemp = aTemp - 65536;
 8001e88:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001e8c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001f24 <ExtractOffsetParameters+0x214>
 8001e90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e94:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    }    
    aTemp = aTemp / (1<<resScale); 
 8001e98:	7cfb      	ldrb	r3, [r7, #19]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	ee07 3a90 	vmov	s15, r3
 8001ea4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ea8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001eac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eb0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    
    bTemp = eeData[213];
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	33d5      	adds	r3, #213	; 0xd5
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	ee07 3a90 	vmov	s15, r3
 8001ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ec2:	edc7 7a08 	vstr	s15, [r7, #32]
    if (bTemp > 127)
 8001ec6:	edd7 7a08 	vldr	s15, [r7, #32]
 8001eca:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001f18 <ExtractOffsetParameters+0x208>
 8001ece:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed6:	dd07      	ble.n	8001ee8 <ExtractOffsetParameters+0x1d8>
    {
        bTemp = bTemp - 256;
 8001ed8:	edd7 7a08 	vldr	s15, [r7, #32]
 8001edc:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001f1c <ExtractOffsetParameters+0x20c>
 8001ee0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ee4:	edc7 7a08 	vstr	s15, [r7, #32]
    }     
    bTemp = bTemp / bScale;      
 8001ee8:	edd7 6a08 	vldr	s13, [r7, #32]
 8001eec:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ef0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ef4:	edc7 7a08 	vstr	s15, [r7, #32]
    
    mlx90621->cpA = aTemp;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001efc:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c
    mlx90621->cpB = bTemp;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	6a3a      	ldr	r2, [r7, #32]
 8001f04:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
}
 8001f08:	bf00      	nop
 8001f0a:	3728      	adds	r7, #40	; 0x28
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	00000000 	.word	0x00000000
 8001f14:	40000000 	.word	0x40000000
 8001f18:	42fe0000 	.word	0x42fe0000
 8001f1c:	43800000 	.word	0x43800000
 8001f20:	46fffe00 	.word	0x46fffe00
 8001f24:	47800000 	.word	0x47800000

08001f28 <MLX90621_I2CReadEEPROM>:
void MLX90621_I2CInit()
{   
}

int MLX90621_I2CReadEEPROM(uint8_t slaveAddr, uint8_t startAddress, uint16_t nMemAddressRead, uint8_t *data)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af02      	add	r7, sp, #8
 8001f2e:	603b      	str	r3, [r7, #0]
 8001f30:	4603      	mov	r3, r0
 8001f32:	71fb      	strb	r3, [r7, #7]
 8001f34:	460b      	mov	r3, r1
 8001f36:	71bb      	strb	r3, [r7, #6]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	80bb      	strh	r3, [r7, #4]
	uint8_t sa;
	uint8_t cmd = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	73bb      	strb	r3, [r7, #14]

	sa = (slaveAddr << 1);
 8001f40:	79fb      	ldrb	r3, [r7, #7]
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	73fb      	strb	r3, [r7, #15]


	if(HAL_I2C_Master_Transmit(&hi2c1, sa, &cmd, 1, 1000)==HAL_OK)
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
 8001f48:	b299      	uxth	r1, r3
 8001f4a:	f107 020e 	add.w	r2, r7, #14
 8001f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	2301      	movs	r3, #1
 8001f56:	480b      	ldr	r0, [pc, #44]	; (8001f84 <MLX90621_I2CReadEEPROM+0x5c>)
 8001f58:	f002 fae2 	bl	8004520 <HAL_I2C_Master_Transmit>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10b      	bne.n	8001f7a <MLX90621_I2CReadEEPROM+0x52>
	{
//		sa = sa | 0x01;
		return HAL_I2C_Master_Receive(&hi2c1, sa, data, nMemAddressRead, 1000);
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
 8001f64:	b299      	uxth	r1, r3
 8001f66:	88bb      	ldrh	r3, [r7, #4]
 8001f68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f6c:	9200      	str	r2, [sp, #0]
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	4804      	ldr	r0, [pc, #16]	; (8001f84 <MLX90621_I2CReadEEPROM+0x5c>)
 8001f72:	f002 fbc9 	bl	8004708 <HAL_I2C_Master_Receive>
 8001f76:	4603      	mov	r3, r0
 8001f78:	e000      	b.n	8001f7c <MLX90621_I2CReadEEPROM+0x54>
	}

	return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
} 
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20000a68 	.word	0x20000a68

08001f88 <MLX90621_I2CRead>:

int MLX90621_I2CRead(uint8_t slaveAddr,uint8_t command, uint8_t startAddress, uint8_t addressStep, uint8_t nMemAddressRead, uint16_t *data)
{
 8001f88:	b590      	push	{r4, r7, lr}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af02      	add	r7, sp, #8
 8001f8e:	4604      	mov	r4, r0
 8001f90:	4608      	mov	r0, r1
 8001f92:	4611      	mov	r1, r2
 8001f94:	461a      	mov	r2, r3
 8001f96:	4623      	mov	r3, r4
 8001f98:	71fb      	strb	r3, [r7, #7]
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	71bb      	strb	r3, [r7, #6]
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	717b      	strb	r3, [r7, #5]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	713b      	strb	r3, [r7, #4]
	MLX90621_I2CRead_Polling(slaveAddr, command, startAddress, addressStep, nMemAddressRead, data);
 8001fa6:	793c      	ldrb	r4, [r7, #4]
 8001fa8:	797a      	ldrb	r2, [r7, #5]
 8001faa:	79b9      	ldrb	r1, [r7, #6]
 8001fac:	79f8      	ldrb	r0, [r7, #7]
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	9301      	str	r3, [sp, #4]
 8001fb2:	7e3b      	ldrb	r3, [r7, #24]
 8001fb4:	9300      	str	r3, [sp, #0]
 8001fb6:	4623      	mov	r3, r4
 8001fb8:	f000 f806 	bl	8001fc8 <MLX90621_I2CRead_Polling>
//	{
//		return -1;
//	}
//
//	return HAL_OK;
} 
 8001fbc:	bf00      	nop
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd90      	pop	{r4, r7, pc}
	...

08001fc8 <MLX90621_I2CRead_Polling>:

}


static int MLX90621_I2CRead_Polling(uint8_t slaveAddr,uint8_t command, uint8_t startAddress, uint8_t addressStep, uint8_t nMemAddressRead, uint16_t *data)
{
 8001fc8:	b590      	push	{r4, r7, lr}
 8001fca:	b0ad      	sub	sp, #180	; 0xb4
 8001fcc:	af06      	add	r7, sp, #24
 8001fce:	4604      	mov	r4, r0
 8001fd0:	4608      	mov	r0, r1
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4623      	mov	r3, r4
 8001fd8:	71fb      	strb	r3, [r7, #7]
 8001fda:	4603      	mov	r3, r0
 8001fdc:	71bb      	strb	r3, [r7, #6]
 8001fde:	460b      	mov	r3, r1
 8001fe0:	717b      	strb	r3, [r7, #5]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	713b      	strb	r3, [r7, #4]
    int cnt = 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    int i = 0;
 8001fec:	2300      	movs	r3, #0
 8001fee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    uint8_t i2cData[132] = {0};
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	f107 0310 	add.w	r3, r7, #16
 8001ffa:	2280      	movs	r2, #128	; 0x80
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	4618      	mov	r0, r3
 8002000:	f005 fa54 	bl	80074ac <memset>


    if(Custom_HAL_I2C_Mem_Read(&hi2c1, (slaveAddr << 1), command, startAddress, addressStep, nMemAddressRead, i2cData, 2*nMemAddressRead, 100) != HAL_OK)
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	b29b      	uxth	r3, r3
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	b299      	uxth	r1, r3
 800200c:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 8002010:	b29b      	uxth	r3, r3
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	b29b      	uxth	r3, r3
 8002016:	7978      	ldrb	r0, [r7, #5]
 8002018:	79ba      	ldrb	r2, [r7, #6]
 800201a:	2464      	movs	r4, #100	; 0x64
 800201c:	9404      	str	r4, [sp, #16]
 800201e:	9303      	str	r3, [sp, #12]
 8002020:	f107 030c 	add.w	r3, r7, #12
 8002024:	9302      	str	r3, [sp, #8]
 8002026:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 800202a:	9301      	str	r3, [sp, #4]
 800202c:	793b      	ldrb	r3, [r7, #4]
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	4603      	mov	r3, r0
 8002032:	481d      	ldr	r0, [pc, #116]	; (80020a8 <MLX90621_I2CRead_Polling+0xe0>)
 8002034:	f003 fccc 	bl	80059d0 <Custom_HAL_I2C_Mem_Read>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d002      	beq.n	8002044 <MLX90621_I2CRead_Polling+0x7c>
    {
    	return -1;
 800203e:	f04f 33ff 	mov.w	r3, #4294967295
 8002042:	e02d      	b.n	80020a0 <MLX90621_I2CRead_Polling+0xd8>
    }

    for(cnt=0; cnt < nMemAddressRead; cnt++)
 8002044:	2300      	movs	r3, #0
 8002046:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800204a:	e022      	b.n	8002092 <MLX90621_I2CRead_Polling+0xca>
    {
        i = cnt << 1;
 800204c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        *data++ = (uint16_t)i2cData[i+1]*256 + (uint16_t)i2cData[i];
 8002056:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800205a:	3301      	adds	r3, #1
 800205c:	3398      	adds	r3, #152	; 0x98
 800205e:	443b      	add	r3, r7
 8002060:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 8002064:	b29b      	uxth	r3, r3
 8002066:	021b      	lsls	r3, r3, #8
 8002068:	b299      	uxth	r1, r3
 800206a:	f107 020c 	add.w	r2, r7, #12
 800206e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002072:	4413      	add	r3, r2
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	b29a      	uxth	r2, r3
 8002078:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800207c:	1c98      	adds	r0, r3, #2
 800207e:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 8002082:	440a      	add	r2, r1
 8002084:	b292      	uxth	r2, r2
 8002086:	801a      	strh	r2, [r3, #0]
    for(cnt=0; cnt < nMemAddressRead; cnt++)
 8002088:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800208c:	3301      	adds	r3, #1
 800208e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002092:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 8002096:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800209a:	429a      	cmp	r2, r3
 800209c:	dbd6      	blt.n	800204c <MLX90621_I2CRead_Polling+0x84>
    }

    return 0;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	379c      	adds	r7, #156	; 0x9c
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd90      	pop	{r4, r7, pc}
 80020a8:	20000a68 	.word	0x20000a68

080020ac <MLX90621_I2CWrite>:


int MLX90621_I2CWrite(uint8_t slaveAddr, uint8_t command, uint8_t checkValue, uint16_t data)
{
 80020ac:	b590      	push	{r4, r7, lr}
 80020ae:	b087      	sub	sp, #28
 80020b0:	af02      	add	r7, sp, #8
 80020b2:	4604      	mov	r4, r0
 80020b4:	4608      	mov	r0, r1
 80020b6:	4611      	mov	r1, r2
 80020b8:	461a      	mov	r2, r3
 80020ba:	4623      	mov	r3, r4
 80020bc:	71fb      	strb	r3, [r7, #7]
 80020be:	4603      	mov	r3, r0
 80020c0:	71bb      	strb	r3, [r7, #6]
 80020c2:	460b      	mov	r3, r1
 80020c4:	717b      	strb	r3, [r7, #5]
 80020c6:	4613      	mov	r3, r2
 80020c8:	807b      	strh	r3, [r7, #2]
    uint8_t sa;
    char cmd[5] = {0,0,0,0,0};
 80020ca:	4a24      	ldr	r2, [pc, #144]	; (800215c <MLX90621_I2CWrite+0xb0>)
 80020cc:	f107 0308 	add.w	r3, r7, #8
 80020d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020d4:	6018      	str	r0, [r3, #0]
 80020d6:	3304      	adds	r3, #4
 80020d8:	7019      	strb	r1, [r3, #0]
    static uint16_t dataCheck = 0;
    

    sa = (slaveAddr << 1);
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	73fb      	strb	r3, [r7, #15]
    cmd[0] = command;
 80020e0:	79bb      	ldrb	r3, [r7, #6]
 80020e2:	723b      	strb	r3, [r7, #8]
    cmd[2] = data & 0x00FF;
 80020e4:	887b      	ldrh	r3, [r7, #2]
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	72bb      	strb	r3, [r7, #10]
    cmd[1] = cmd[2] - checkValue;
 80020ea:	7aba      	ldrb	r2, [r7, #10]
 80020ec:	797b      	ldrb	r3, [r7, #5]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	727b      	strb	r3, [r7, #9]
    cmd[4] = data >> 8;
 80020f4:	887b      	ldrh	r3, [r7, #2]
 80020f6:	0a1b      	lsrs	r3, r3, #8
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	733b      	strb	r3, [r7, #12]
    cmd[3] = cmd[4] - checkValue;
 80020fe:	7b3a      	ldrb	r2, [r7, #12]
 8002100:	797b      	ldrb	r3, [r7, #5]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	b2db      	uxtb	r3, r3
 8002106:	72fb      	strb	r3, [r7, #11]

//    &hi2c1, sa, cmd, 5, 1000
    if(HAL_I2C_Master_Transmit(&hi2c1, sa, cmd, 5, 1000)!=HAL_OK)
 8002108:	7bfb      	ldrb	r3, [r7, #15]
 800210a:	b299      	uxth	r1, r3
 800210c:	f107 0208 	add.w	r2, r7, #8
 8002110:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	2305      	movs	r3, #5
 8002118:	4811      	ldr	r0, [pc, #68]	; (8002160 <MLX90621_I2CWrite+0xb4>)
 800211a:	f002 fa01 	bl	8004520 <HAL_I2C_Master_Transmit>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MLX90621_I2CWrite+0x7c>
    {
    	return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e014      	b.n	8002152 <MLX90621_I2CWrite+0xa6>
    }

    MLX90621_I2CRead_Polling(slaveAddr, 0x02, 0x8F+command, 0, 1, &dataCheck);
 8002128:	79bb      	ldrb	r3, [r7, #6]
 800212a:	3b71      	subs	r3, #113	; 0x71
 800212c:	b2da      	uxtb	r2, r3
 800212e:	79f8      	ldrb	r0, [r7, #7]
 8002130:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <MLX90621_I2CWrite+0xb8>)
 8002132:	9301      	str	r3, [sp, #4]
 8002134:	2301      	movs	r3, #1
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	2300      	movs	r3, #0
 800213a:	2102      	movs	r1, #2
 800213c:	f7ff ff44 	bl	8001fc8 <MLX90621_I2CRead_Polling>

    if (dataCheck != data)
 8002140:	4b08      	ldr	r3, [pc, #32]	; (8002164 <MLX90621_I2CWrite+0xb8>)
 8002142:	881b      	ldrh	r3, [r3, #0]
 8002144:	887a      	ldrh	r2, [r7, #2]
 8002146:	429a      	cmp	r2, r3
 8002148:	d002      	beq.n	8002150 <MLX90621_I2CWrite+0xa4>
    {
        return -2;
 800214a:	f06f 0301 	mvn.w	r3, #1
 800214e:	e000      	b.n	8002152 <MLX90621_I2CWrite+0xa6>
    }

    return 0;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	bd90      	pop	{r4, r7, pc}
 800215a:	bf00      	nop
 800215c:	08008410 	.word	0x08008410
 8002160:	20000a68 	.word	0x20000a68
 8002164:	20000a3c 	.word	0x20000a3c

08002168 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800216c:	4b17      	ldr	r3, [pc, #92]	; (80021cc <MX_CAN_Init+0x64>)
 800216e:	4a18      	ldr	r2, [pc, #96]	; (80021d0 <MX_CAN_Init+0x68>)
 8002170:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8002172:	4b16      	ldr	r3, [pc, #88]	; (80021cc <MX_CAN_Init+0x64>)
 8002174:	2202      	movs	r2, #2
 8002176:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002178:	4b14      	ldr	r3, [pc, #80]	; (80021cc <MX_CAN_Init+0x64>)
 800217a:	2200      	movs	r2, #0
 800217c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800217e:	4b13      	ldr	r3, [pc, #76]	; (80021cc <MX_CAN_Init+0x64>)
 8002180:	2200      	movs	r2, #0
 8002182:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 8002184:	4b11      	ldr	r3, [pc, #68]	; (80021cc <MX_CAN_Init+0x64>)
 8002186:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800218a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 800218c:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <MX_CAN_Init+0x64>)
 800218e:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8002192:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002194:	4b0d      	ldr	r3, [pc, #52]	; (80021cc <MX_CAN_Init+0x64>)
 8002196:	2200      	movs	r2, #0
 8002198:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 800219a:	4b0c      	ldr	r3, [pc, #48]	; (80021cc <MX_CAN_Init+0x64>)
 800219c:	2201      	movs	r2, #1
 800219e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80021a0:	4b0a      	ldr	r3, [pc, #40]	; (80021cc <MX_CAN_Init+0x64>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80021a6:	4b09      	ldr	r3, [pc, #36]	; (80021cc <MX_CAN_Init+0x64>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80021ac:	4b07      	ldr	r3, [pc, #28]	; (80021cc <MX_CAN_Init+0x64>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80021b2:	4b06      	ldr	r3, [pc, #24]	; (80021cc <MX_CAN_Init+0x64>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80021b8:	4804      	ldr	r0, [pc, #16]	; (80021cc <MX_CAN_Init+0x64>)
 80021ba:	f000 feb5 	bl	8002f28 <HAL_CAN_Init>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80021c4:	f000 f9d1 	bl	800256a <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80021c8:	bf00      	nop
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	20000a40 	.word	0x20000a40
 80021d0:	40006400 	.word	0x40006400

080021d4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08a      	sub	sp, #40	; 0x28
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021dc:	f107 0314 	add.w	r3, r7, #20
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]
 80021ea:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a28      	ldr	r2, [pc, #160]	; (8002294 <HAL_CAN_MspInit+0xc0>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d149      	bne.n	800228a <HAL_CAN_MspInit+0xb6>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80021f6:	4b28      	ldr	r3, [pc, #160]	; (8002298 <HAL_CAN_MspInit+0xc4>)
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	4a27      	ldr	r2, [pc, #156]	; (8002298 <HAL_CAN_MspInit+0xc4>)
 80021fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002200:	61d3      	str	r3, [r2, #28]
 8002202:	4b25      	ldr	r3, [pc, #148]	; (8002298 <HAL_CAN_MspInit+0xc4>)
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220a:	613b      	str	r3, [r7, #16]
 800220c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800220e:	4b22      	ldr	r3, [pc, #136]	; (8002298 <HAL_CAN_MspInit+0xc4>)
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	4a21      	ldr	r2, [pc, #132]	; (8002298 <HAL_CAN_MspInit+0xc4>)
 8002214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002218:	6153      	str	r3, [r2, #20]
 800221a:	4b1f      	ldr	r3, [pc, #124]	; (8002298 <HAL_CAN_MspInit+0xc4>)
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002226:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800222a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222c:	2302      	movs	r3, #2
 800222e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002234:	2303      	movs	r3, #3
 8002236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 8002238:	2309      	movs	r3, #9
 800223a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800223c:	f107 0314 	add.w	r3, r7, #20
 8002240:	4619      	mov	r1, r3
 8002242:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002246:	f001 ff37 	bl	80040b8 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN_TX_IRQn, 0, 0);
 800224a:	2200      	movs	r2, #0
 800224c:	2100      	movs	r1, #0
 800224e:	2013      	movs	r0, #19
 8002250:	f001 fccd 	bl	8003bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN_TX_IRQn);
 8002254:	2013      	movs	r0, #19
 8002256:	f001 fce6 	bl	8003c26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800225a:	2200      	movs	r2, #0
 800225c:	2100      	movs	r1, #0
 800225e:	2014      	movs	r0, #20
 8002260:	f001 fcc5 	bl	8003bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8002264:	2014      	movs	r0, #20
 8002266:	f001 fcde 	bl	8003c26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 800226a:	2200      	movs	r2, #0
 800226c:	2100      	movs	r1, #0
 800226e:	2015      	movs	r0, #21
 8002270:	f001 fcbd 	bl	8003bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8002274:	2015      	movs	r0, #21
 8002276:	f001 fcd6 	bl	8003c26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 0, 0);
 800227a:	2200      	movs	r2, #0
 800227c:	2100      	movs	r1, #0
 800227e:	2016      	movs	r0, #22
 8002280:	f001 fcb5 	bl	8003bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 8002284:	2016      	movs	r0, #22
 8002286:	f001 fcce 	bl	8003c26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 800228a:	bf00      	nop
 800228c:	3728      	adds	r7, #40	; 0x28
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40006400 	.word	0x40006400
 8002298:	40021000 	.word	0x40021000

0800229c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b088      	sub	sp, #32
 80022a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a2:	f107 030c 	add.w	r3, r7, #12
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	605a      	str	r2, [r3, #4]
 80022ac:	609a      	str	r2, [r3, #8]
 80022ae:	60da      	str	r2, [r3, #12]
 80022b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80022b2:	4b1e      	ldr	r3, [pc, #120]	; (800232c <MX_GPIO_Init+0x90>)
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	4a1d      	ldr	r2, [pc, #116]	; (800232c <MX_GPIO_Init+0x90>)
 80022b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022bc:	6153      	str	r3, [r2, #20]
 80022be:	4b1b      	ldr	r3, [pc, #108]	; (800232c <MX_GPIO_Init+0x90>)
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022c6:	60bb      	str	r3, [r7, #8]
 80022c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ca:	4b18      	ldr	r3, [pc, #96]	; (800232c <MX_GPIO_Init+0x90>)
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	4a17      	ldr	r2, [pc, #92]	; (800232c <MX_GPIO_Init+0x90>)
 80022d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022d4:	6153      	str	r3, [r2, #20]
 80022d6:	4b15      	ldr	r3, [pc, #84]	; (800232c <MX_GPIO_Init+0x90>)
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	607b      	str	r3, [r7, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e2:	4b12      	ldr	r3, [pc, #72]	; (800232c <MX_GPIO_Init+0x90>)
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	4a11      	ldr	r2, [pc, #68]	; (800232c <MX_GPIO_Init+0x90>)
 80022e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022ec:	6153      	str	r3, [r2, #20]
 80022ee:	4b0f      	ldr	r3, [pc, #60]	; (800232c <MX_GPIO_Init+0x90>)
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022f6:	603b      	str	r3, [r7, #0]
 80022f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80022fa:	2200      	movs	r2, #0
 80022fc:	2101      	movs	r1, #1
 80022fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002302:	f002 f84b 	bl	800439c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002306:	2301      	movs	r3, #1
 8002308:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800230a:	2301      	movs	r3, #1
 800230c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002312:	2300      	movs	r3, #0
 8002314:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002316:	f107 030c 	add.w	r3, r7, #12
 800231a:	4619      	mov	r1, r3
 800231c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002320:	f001 feca 	bl	80040b8 <HAL_GPIO_Init>

}
 8002324:	bf00      	nop
 8002326:	3720      	adds	r7, #32
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40021000 	.word	0x40021000

08002330 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002334:	4b1b      	ldr	r3, [pc, #108]	; (80023a4 <MX_I2C1_Init+0x74>)
 8002336:	4a1c      	ldr	r2, [pc, #112]	; (80023a8 <MX_I2C1_Init+0x78>)
 8002338:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00101D2D;
 800233a:	4b1a      	ldr	r3, [pc, #104]	; (80023a4 <MX_I2C1_Init+0x74>)
 800233c:	4a1b      	ldr	r2, [pc, #108]	; (80023ac <MX_I2C1_Init+0x7c>)
 800233e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002340:	4b18      	ldr	r3, [pc, #96]	; (80023a4 <MX_I2C1_Init+0x74>)
 8002342:	2200      	movs	r2, #0
 8002344:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002346:	4b17      	ldr	r3, [pc, #92]	; (80023a4 <MX_I2C1_Init+0x74>)
 8002348:	2201      	movs	r2, #1
 800234a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800234c:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <MX_I2C1_Init+0x74>)
 800234e:	2200      	movs	r2, #0
 8002350:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002352:	4b14      	ldr	r3, [pc, #80]	; (80023a4 <MX_I2C1_Init+0x74>)
 8002354:	2200      	movs	r2, #0
 8002356:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002358:	4b12      	ldr	r3, [pc, #72]	; (80023a4 <MX_I2C1_Init+0x74>)
 800235a:	2200      	movs	r2, #0
 800235c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800235e:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <MX_I2C1_Init+0x74>)
 8002360:	2200      	movs	r2, #0
 8002362:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002364:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <MX_I2C1_Init+0x74>)
 8002366:	2200      	movs	r2, #0
 8002368:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800236a:	480e      	ldr	r0, [pc, #56]	; (80023a4 <MX_I2C1_Init+0x74>)
 800236c:	f002 f848 	bl	8004400 <HAL_I2C_Init>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002376:	f000 f8f8 	bl	800256a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 800237a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800237e:	4809      	ldr	r0, [pc, #36]	; (80023a4 <MX_I2C1_Init+0x74>)
 8002380:	f003 fc44 	bl	8005c0c <HAL_I2CEx_ConfigAnalogFilter>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800238a:	f000 f8ee 	bl	800256a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800238e:	2100      	movs	r1, #0
 8002390:	4804      	ldr	r0, [pc, #16]	; (80023a4 <MX_I2C1_Init+0x74>)
 8002392:	f003 fc86 	bl	8005ca2 <HAL_I2CEx_ConfigDigitalFilter>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800239c:	f000 f8e5 	bl	800256a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80023a0:	bf00      	nop
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	20000a68 	.word	0x20000a68
 80023a8:	40005400 	.word	0x40005400
 80023ac:	00101d2d 	.word	0x00101d2d

080023b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08a      	sub	sp, #40	; 0x28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b8:	f107 0314 	add.w	r3, r7, #20
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	60da      	str	r2, [r3, #12]
 80023c6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a2e      	ldr	r2, [pc, #184]	; (8002488 <HAL_I2C_MspInit+0xd8>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d155      	bne.n	800247e <HAL_I2C_MspInit+0xce>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d2:	4b2e      	ldr	r3, [pc, #184]	; (800248c <HAL_I2C_MspInit+0xdc>)
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	4a2d      	ldr	r2, [pc, #180]	; (800248c <HAL_I2C_MspInit+0xdc>)
 80023d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023dc:	6153      	str	r3, [r2, #20]
 80023de:	4b2b      	ldr	r3, [pc, #172]	; (800248c <HAL_I2C_MspInit+0xdc>)
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e6:	613b      	str	r3, [r7, #16]
 80023e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ea:	4b28      	ldr	r3, [pc, #160]	; (800248c <HAL_I2C_MspInit+0xdc>)
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	4a27      	ldr	r2, [pc, #156]	; (800248c <HAL_I2C_MspInit+0xdc>)
 80023f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023f4:	6153      	str	r3, [r2, #20]
 80023f6:	4b25      	ldr	r3, [pc, #148]	; (800248c <HAL_I2C_MspInit+0xdc>)
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002406:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002408:	2312      	movs	r3, #18
 800240a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240c:	2300      	movs	r3, #0
 800240e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002410:	2303      	movs	r3, #3
 8002412:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002414:	2304      	movs	r3, #4
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002418:	f107 0314 	add.w	r3, r7, #20
 800241c:	4619      	mov	r1, r3
 800241e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002422:	f001 fe49 	bl	80040b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002426:	2380      	movs	r3, #128	; 0x80
 8002428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800242a:	2312      	movs	r3, #18
 800242c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242e:	2300      	movs	r3, #0
 8002430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002432:	2303      	movs	r3, #3
 8002434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002436:	2304      	movs	r3, #4
 8002438:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800243a:	f107 0314 	add.w	r3, r7, #20
 800243e:	4619      	mov	r1, r3
 8002440:	4813      	ldr	r0, [pc, #76]	; (8002490 <HAL_I2C_MspInit+0xe0>)
 8002442:	f001 fe39 	bl	80040b8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002446:	4b11      	ldr	r3, [pc, #68]	; (800248c <HAL_I2C_MspInit+0xdc>)
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	4a10      	ldr	r2, [pc, #64]	; (800248c <HAL_I2C_MspInit+0xdc>)
 800244c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002450:	61d3      	str	r3, [r2, #28]
 8002452:	4b0e      	ldr	r3, [pc, #56]	; (800248c <HAL_I2C_MspInit+0xdc>)
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800245e:	2200      	movs	r2, #0
 8002460:	2100      	movs	r1, #0
 8002462:	201f      	movs	r0, #31
 8002464:	f001 fbc3 	bl	8003bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002468:	201f      	movs	r0, #31
 800246a:	f001 fbdc 	bl	8003c26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800246e:	2200      	movs	r2, #0
 8002470:	2100      	movs	r1, #0
 8002472:	2020      	movs	r0, #32
 8002474:	f001 fbbb 	bl	8003bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002478:	2020      	movs	r0, #32
 800247a:	f001 fbd4 	bl	8003c26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800247e:	bf00      	nop
 8002480:	3728      	adds	r7, #40	; 0x28
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40005400 	.word	0x40005400
 800248c:	40021000 	.word	0x40021000
 8002490:	48000400 	.word	0x48000400

08002494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002498:	f000 fcbc 	bl	8002e14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800249c:	f000 f809 	bl	80024b2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024a0:	f7ff fefc 	bl	800229c <MX_GPIO_Init>
  MX_CAN_Init();
 80024a4:	f7ff fe60 	bl	8002168 <MX_CAN_Init>
  MX_I2C1_Init();
 80024a8:	f7ff ff42 	bl	8002330 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  App_Init();
 80024ac:	f7fe fb48 	bl	8000b40 <App_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80024b0:	e7fe      	b.n	80024b0 <main+0x1c>

080024b2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b09c      	sub	sp, #112	; 0x70
 80024b6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80024bc:	2228      	movs	r2, #40	; 0x28
 80024be:	2100      	movs	r1, #0
 80024c0:	4618      	mov	r0, r3
 80024c2:	f004 fff3 	bl	80074ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]
 80024ce:	605a      	str	r2, [r3, #4]
 80024d0:	609a      	str	r2, [r3, #8]
 80024d2:	60da      	str	r2, [r3, #12]
 80024d4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024d6:	463b      	mov	r3, r7
 80024d8:	2234      	movs	r2, #52	; 0x34
 80024da:	2100      	movs	r1, #0
 80024dc:	4618      	mov	r0, r3
 80024de:	f004 ffe5 	bl	80074ac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80024e2:	2303      	movs	r3, #3
 80024e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80024e6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80024ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80024ec:	2301      	movs	r3, #1
 80024ee:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024f0:	2301      	movs	r3, #1
 80024f2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024f4:	2310      	movs	r3, #16
 80024f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024f8:	2302      	movs	r3, #2
 80024fa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002500:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002502:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002506:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002508:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800250c:	4618      	mov	r0, r3
 800250e:	f003 fc15 	bl	8005d3c <HAL_RCC_OscConfig>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002518:	f000 f827 	bl	800256a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800251c:	230f      	movs	r3, #15
 800251e:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002520:	2302      	movs	r3, #2
 8002522:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002524:	2300      	movs	r3, #0
 8002526:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002528:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800252c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800252e:	2300      	movs	r3, #0
 8002530:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002532:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002536:	2102      	movs	r1, #2
 8002538:	4618      	mov	r0, r3
 800253a:	f004 fc3d 	bl	8006db8 <HAL_RCC_ClockConfig>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002544:	f000 f811 	bl	800256a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002548:	2320      	movs	r3, #32
 800254a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800254c:	2300      	movs	r3, #0
 800254e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002550:	463b      	mov	r3, r7
 8002552:	4618      	mov	r0, r3
 8002554:	f004 fe18 	bl	8007188 <HAL_RCCEx_PeriphCLKConfig>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800255e:	f000 f804 	bl	800256a <Error_Handler>
  }
}
 8002562:	bf00      	nop
 8002564:	3770      	adds	r7, #112	; 0x70
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800256a:	b480      	push	{r7}
 800256c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800256e:	b672      	cpsid	i
}
 8002570:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002572:	e7fe      	b.n	8002572 <Error_Handler+0x8>

08002574 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800257a:	4b0f      	ldr	r3, [pc, #60]	; (80025b8 <HAL_MspInit+0x44>)
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	4a0e      	ldr	r2, [pc, #56]	; (80025b8 <HAL_MspInit+0x44>)
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	6193      	str	r3, [r2, #24]
 8002586:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <HAL_MspInit+0x44>)
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	607b      	str	r3, [r7, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002592:	4b09      	ldr	r3, [pc, #36]	; (80025b8 <HAL_MspInit+0x44>)
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	4a08      	ldr	r2, [pc, #32]	; (80025b8 <HAL_MspInit+0x44>)
 8002598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800259c:	61d3      	str	r3, [r2, #28]
 800259e:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <HAL_MspInit+0x44>)
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a6:	603b      	str	r3, [r7, #0]
 80025a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40021000 	.word	0x40021000

080025bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025c0:	e7fe      	b.n	80025c0 <NMI_Handler+0x4>

080025c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025c2:	b480      	push	{r7}
 80025c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025c6:	e7fe      	b.n	80025c6 <HardFault_Handler+0x4>

080025c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025cc:	e7fe      	b.n	80025cc <MemManage_Handler+0x4>

080025ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025ce:	b480      	push	{r7}
 80025d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025d2:	e7fe      	b.n	80025d2 <BusFault_Handler+0x4>

080025d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025d8:	e7fe      	b.n	80025d8 <UsageFault_Handler+0x4>

080025da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025da:	b480      	push	{r7}
 80025dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025de:	bf00      	nop
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025f6:	b480      	push	{r7}
 80025f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002608:	f000 fc4a 	bl	8002ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800260c:	bf00      	nop
 800260e:	bd80      	pop	{r7, pc}

08002610 <USB_HP_CAN_TX_IRQHandler>:

/**
  * @brief This function handles CAN TX and USB high priority interrupts.
  */
void USB_HP_CAN_TX_IRQHandler(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002614:	4802      	ldr	r0, [pc, #8]	; (8002620 <USB_HP_CAN_TX_IRQHandler+0x10>)
 8002616:	f000 ffd8 	bl	80035ca <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20000a40 	.word	0x20000a40

08002624 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 and USB low priority interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002628:	4802      	ldr	r0, [pc, #8]	; (8002634 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800262a:	f000 ffce 	bl	80035ca <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800262e:	bf00      	nop
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20000a40 	.word	0x20000a40

08002638 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800263c:	4802      	ldr	r0, [pc, #8]	; (8002648 <CAN_RX1_IRQHandler+0x10>)
 800263e:	f000 ffc4 	bl	80035ca <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	20000a40 	.word	0x20000a40

0800264c <CAN_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN_SCE_IRQHandler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_SCE_IRQn 0 */

  /* USER CODE END CAN_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002650:	4802      	ldr	r0, [pc, #8]	; (800265c <CAN_SCE_IRQHandler+0x10>)
 8002652:	f000 ffba 	bl	80035ca <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_SCE_IRQn 1 */

  /* USER CODE END CAN_SCE_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20000a40 	.word	0x20000a40

08002660 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002664:	4802      	ldr	r0, [pc, #8]	; (8002670 <I2C1_EV_IRQHandler+0x10>)
 8002666:	f002 f945 	bl	80048f4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20000a68 	.word	0x20000a68

08002674 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002678:	4802      	ldr	r0, [pc, #8]	; (8002684 <I2C1_ER_IRQHandler+0x10>)
 800267a:	f002 f955 	bl	8004928 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	20000a68 	.word	0x20000a68

08002688 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800268c:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <SystemInit+0x20>)
 800268e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002692:	4a05      	ldr	r2, [pc, #20]	; (80026a8 <SystemInit+0x20>)
 8002694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	e000ed00 	.word	0xe000ed00

080026ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80026ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026e4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80026b0:	f7ff ffea 	bl	8002688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026b4:	480c      	ldr	r0, [pc, #48]	; (80026e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80026b6:	490d      	ldr	r1, [pc, #52]	; (80026ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80026b8:	4a0d      	ldr	r2, [pc, #52]	; (80026f0 <LoopForever+0xe>)
  movs r3, #0
 80026ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026bc:	e002      	b.n	80026c4 <LoopCopyDataInit>

080026be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026c2:	3304      	adds	r3, #4

080026c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026c8:	d3f9      	bcc.n	80026be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ca:	4a0a      	ldr	r2, [pc, #40]	; (80026f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026cc:	4c0a      	ldr	r4, [pc, #40]	; (80026f8 <LoopForever+0x16>)
  movs r3, #0
 80026ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026d0:	e001      	b.n	80026d6 <LoopFillZerobss>

080026d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026d4:	3204      	adds	r2, #4

080026d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026d8:	d3fb      	bcc.n	80026d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026da:	f004 fef5 	bl	80074c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026de:	f7ff fed9 	bl	8002494 <main>

080026e2 <LoopForever>:

LoopForever:
    b LoopForever
 80026e2:	e7fe      	b.n	80026e2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80026e4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80026e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026ec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80026f0:	08008480 	.word	0x08008480
  ldr r2, =_sbss
 80026f4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80026f8:	20000e30 	.word	0x20000e30

080026fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026fc:	e7fe      	b.n	80026fc <ADC1_IRQHandler>
	...

08002700 <CAN_FIFO_Add>:

#include "CAN_FIFO.h"


void CAN_FIFO_Add(can_fifo *fifo, uint8_t *data_ptr)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
	if(fifo->empty)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00b      	beq.n	800272c <CAN_FIFO_Add+0x2c>
	{
		fifo->data_ptr[fifo->last_element]=data_ptr;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	785b      	ldrb	r3, [r3, #1]
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	605a      	str	r2, [r3, #4]
		fifo->empty=0;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		return;
 800272a:	e02e      	b.n	800278a <CAN_FIFO_Add+0x8a>
	}
	fifo->last_element=(fifo->last_element+1)%CAN_FIFO_SIZE;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	785b      	ldrb	r3, [r3, #1]
 8002730:	1c5a      	adds	r2, r3, #1
 8002732:	4b18      	ldr	r3, [pc, #96]	; (8002794 <CAN_FIFO_Add+0x94>)
 8002734:	fb83 1302 	smull	r1, r3, r3, r2
 8002738:	1099      	asrs	r1, r3, #2
 800273a:	17d3      	asrs	r3, r2, #31
 800273c:	1ac9      	subs	r1, r1, r3
 800273e:	460b      	mov	r3, r1
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	440b      	add	r3, r1
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	1ad1      	subs	r1, r2, r3
 8002748:	b2ca      	uxtb	r2, r1
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	705a      	strb	r2, [r3, #1]

	if(fifo->last_element==fifo->first_element)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	785a      	ldrb	r2, [r3, #1]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	429a      	cmp	r2, r3
 8002758:	d110      	bne.n	800277c <CAN_FIFO_Add+0x7c>
	{
		fifo->first_element=(fifo->first_element+1)%CAN_FIFO_SIZE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <CAN_FIFO_Add+0x94>)
 8002762:	fb83 1302 	smull	r1, r3, r3, r2
 8002766:	1099      	asrs	r1, r3, #2
 8002768:	17d3      	asrs	r3, r2, #31
 800276a:	1ac9      	subs	r1, r1, r3
 800276c:	460b      	mov	r3, r1
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	1ad1      	subs	r1, r2, r3
 8002776:	b2ca      	uxtb	r2, r1
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	701a      	strb	r2, [r3, #0]
	}
	fifo->data_ptr[fifo->last_element]=data_ptr;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	785b      	ldrb	r3, [r3, #1]
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	605a      	str	r2, [r3, #4]
}
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	66666667 	.word	0x66666667

08002798 <CAN_FIFO_Get>:

/* return 0 if FIFO is empty */
uint8_t* CAN_FIFO_Get(can_fifo *fifo)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
	uint8_t *temp;
	if(fifo->empty){
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <CAN_FIFO_Get+0x16>
		return 0;
 80027aa:	2300      	movs	r3, #0
 80027ac:	e024      	b.n	80027f8 <CAN_FIFO_Get+0x60>
	}
	temp=fifo->data_ptr[fifo->first_element];
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	60fb      	str	r3, [r7, #12]

	if(fifo->first_element==fifo->last_element){
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	781a      	ldrb	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	785b      	ldrb	r3, [r3, #1]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d105      	bne.n	80027d4 <CAN_FIFO_Get+0x3c>
		fifo->empty=1;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		return temp;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	e011      	b.n	80027f8 <CAN_FIFO_Get+0x60>
	}
	fifo->first_element=(fifo->first_element+1)%CAN_FIFO_SIZE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	1c5a      	adds	r2, r3, #1
 80027da:	4b0a      	ldr	r3, [pc, #40]	; (8002804 <CAN_FIFO_Get+0x6c>)
 80027dc:	fb83 1302 	smull	r1, r3, r3, r2
 80027e0:	1099      	asrs	r1, r3, #2
 80027e2:	17d3      	asrs	r3, r2, #31
 80027e4:	1ac9      	subs	r1, r1, r3
 80027e6:	460b      	mov	r3, r1
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	440b      	add	r3, r1
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	1ad1      	subs	r1, r2, r3
 80027f0:	b2ca      	uxtb	r2, r1
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	701a      	strb	r2, [r3, #0]

	return temp;
 80027f6:	68fb      	ldr	r3, [r7, #12]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	66666667 	.word	0x66666667

08002808 <CAN_FIFO_Flush>:

void CAN_FIFO_Flush(can_fifo *fifo)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
	fifo->first_element=0;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	701a      	strb	r2, [r3, #0]
	fifo->last_element=0;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	705a      	strb	r2, [r3, #1]
	fifo->empty=1;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <CAN_Init>:

uint8_t FilterFrame(CAN_HandleTypeDef* hcan, uint16_t id);

can_info _can_info;

void CAN_Init(CAN_HandleTypeDef* hcan){
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
	static uint8_t can_number;
	if(can_number >= NUMBER_OF_CANS)
 8002838:	4b1b      	ldr	r3, [pc, #108]	; (80028a8 <CAN_Init+0x78>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b02      	cmp	r3, #2
 800283e:	d901      	bls.n	8002844 <CAN_Init+0x14>
		Error_Handler();
 8002840:	f7ff fe93 	bl	800256a <Error_Handler>

	cans[can_number].hcan = hcan;
 8002844:	4b18      	ldr	r3, [pc, #96]	; (80028a8 <CAN_Init+0x78>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	4619      	mov	r1, r3
 800284a:	4a18      	ldr	r2, [pc, #96]	; (80028ac <CAN_Init+0x7c>)
 800284c:	460b      	mov	r3, r1
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	1a5b      	subs	r3, r3, r1
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	601a      	str	r2, [r3, #0]
	cans[can_number].retransmision_counter = 0;
 800285a:	4b13      	ldr	r3, [pc, #76]	; (80028a8 <CAN_Init+0x78>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	4619      	mov	r1, r3
 8002860:	4a12      	ldr	r2, [pc, #72]	; (80028ac <CAN_Init+0x7c>)
 8002862:	460b      	mov	r3, r1
 8002864:	011b      	lsls	r3, r3, #4
 8002866:	1a5b      	subs	r3, r3, r1
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	3334      	adds	r3, #52	; 0x34
 800286e:	2200      	movs	r2, #0
 8002870:	701a      	strb	r2, [r3, #0]

	CAN_HW_Init(hcan);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f93a 	bl	8002aec <CAN_HW_Init>
	CAN_FIFO_Flush(&cans[can_number].fifo);
 8002878:	4b0b      	ldr	r3, [pc, #44]	; (80028a8 <CAN_Init+0x78>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	461a      	mov	r2, r3
 800287e:	4613      	mov	r3, r2
 8002880:	011b      	lsls	r3, r3, #4
 8002882:	1a9b      	subs	r3, r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4a09      	ldr	r2, [pc, #36]	; (80028ac <CAN_Init+0x7c>)
 8002888:	4413      	add	r3, r2
 800288a:	3304      	adds	r3, #4
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff ffbb 	bl	8002808 <CAN_FIFO_Flush>

	can_number++;
 8002892:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <CAN_Init+0x78>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	3301      	adds	r3, #1
 8002898:	b2da      	uxtb	r2, r3
 800289a:	4b03      	ldr	r3, [pc, #12]	; (80028a8 <CAN_Init+0x78>)
 800289c:	701a      	strb	r2, [r3, #0]
}
 800289e:	bf00      	nop
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	20000bf0 	.word	0x20000bf0
 80028ac:	20000abc 	.word	0x20000abc

080028b0 <CAN_InitFrame>:

void CAN_InitFrame(can_frame* pFrame, CAN_HandleTypeDef* hcan, uint16_t id, uint16_t period, uint8_t dlc)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	4611      	mov	r1, r2
 80028bc:	461a      	mov	r2, r3
 80028be:	460b      	mov	r3, r1
 80028c0:	80fb      	strh	r3, [r7, #6]
 80028c2:	4613      	mov	r3, r2
 80028c4:	80bb      	strh	r3, [r7, #4]
	pFrame->hcan = hcan;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	68ba      	ldr	r2, [r7, #8]
 80028ca:	601a      	str	r2, [r3, #0]
	pFrame->core.id = id;
 80028cc:	88fa      	ldrh	r2, [r7, #6]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	609a      	str	r2, [r3, #8]
	pFrame->period = period;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	88ba      	ldrh	r2, [r7, #4]
 80028d6:	831a      	strh	r2, [r3, #24]
	pFrame->core.dlc = dlc;
 80028d8:	7e3a      	ldrb	r2, [r7, #24]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	60da      	str	r2, [r3, #12]
	_can_info.pFrames[_can_info.frames_num] = pFrame;
 80028de:	4b09      	ldr	r3, [pc, #36]	; (8002904 <CAN_InitFrame+0x54>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	4a08      	ldr	r2, [pc, #32]	; (8002904 <CAN_InitFrame+0x54>)
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	605a      	str	r2, [r3, #4]
	_can_info.frames_num++;
 80028ec:	4b05      	ldr	r3, [pc, #20]	; (8002904 <CAN_InitFrame+0x54>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	3301      	adds	r3, #1
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	4b03      	ldr	r3, [pc, #12]	; (8002904 <CAN_InitFrame+0x54>)
 80028f6:	701a      	strb	r2, [r3, #0]

}
 80028f8:	bf00      	nop
 80028fa:	3714      	adds	r7, #20
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	20000b70 	.word	0x20000b70

08002908 <FilterFrame>:
}

/* returns index of frame in _can_info or
   returns 255 if didn't found matching frame */
uint8_t FilterFrame(CAN_HandleTypeDef* hcan, uint16_t id)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	807b      	strh	r3, [r7, #2]
	for(uint8_t i = 0; i < _can_info.frames_num; i++){
 8002914:	2300      	movs	r3, #0
 8002916:	73fb      	strb	r3, [r7, #15]
 8002918:	e016      	b.n	8002948 <FilterFrame+0x40>
		if(_can_info.pFrames[i]->core.id == id && _can_info.pFrames[i]->hcan == hcan){
 800291a:	7bfb      	ldrb	r3, [r7, #15]
 800291c:	4a10      	ldr	r2, [pc, #64]	; (8002960 <FilterFrame+0x58>)
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	887b      	ldrh	r3, [r7, #2]
 8002928:	429a      	cmp	r2, r3
 800292a:	d10a      	bne.n	8002942 <FilterFrame+0x3a>
 800292c:	7bfb      	ldrb	r3, [r7, #15]
 800292e:	4a0c      	ldr	r2, [pc, #48]	; (8002960 <FilterFrame+0x58>)
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	429a      	cmp	r2, r3
 800293c:	d101      	bne.n	8002942 <FilterFrame+0x3a>
			return i;
 800293e:	7bfb      	ldrb	r3, [r7, #15]
 8002940:	e008      	b.n	8002954 <FilterFrame+0x4c>
	for(uint8_t i = 0; i < _can_info.frames_num; i++){
 8002942:	7bfb      	ldrb	r3, [r7, #15]
 8002944:	3301      	adds	r3, #1
 8002946:	73fb      	strb	r3, [r7, #15]
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <FilterFrame+0x58>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	7bfa      	ldrb	r2, [r7, #15]
 800294e:	429a      	cmp	r2, r3
 8002950:	d3e3      	bcc.n	800291a <FilterFrame+0x12>
		}
	}
	return 255;
 8002952:	23ff      	movs	r3, #255	; 0xff
}
 8002954:	4618      	mov	r0, r3
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	20000b70 	.word	0x20000b70

08002964 <CAN_SendFrame>:
{
	return (pFrame->recieve_time_ms != 0) || (HAL_GetTick() - pFrame->recieve_time_ms < pFrame->period*ACTUAL_TIME_MULTIPLIER);
}

void CAN_SendFrame(can_frame* pFrame)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
	if(CAN_HW_SendFrame(pFrame) != CAN_SUCCESS){
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 f909 	bl	8002b84 <CAN_HW_SendFrame>
 8002972:	4603      	mov	r3, r0
 8002974:	2b01      	cmp	r3, #1
 8002976:	d020      	beq.n	80029ba <CAN_SendFrame+0x56>
		for(uint8_t i=0; i<NUMBER_OF_CANS; i++)
 8002978:	2300      	movs	r3, #0
 800297a:	73fb      	strb	r3, [r7, #15]
 800297c:	e01a      	b.n	80029b4 <CAN_SendFrame+0x50>
		{
			if(pFrame->hcan == cans[i].hcan)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6819      	ldr	r1, [r3, #0]
 8002982:	7bfa      	ldrb	r2, [r7, #15]
 8002984:	480f      	ldr	r0, [pc, #60]	; (80029c4 <CAN_SendFrame+0x60>)
 8002986:	4613      	mov	r3, r2
 8002988:	011b      	lsls	r3, r3, #4
 800298a:	1a9b      	subs	r3, r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4403      	add	r3, r0
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4299      	cmp	r1, r3
 8002994:	d10b      	bne.n	80029ae <CAN_SendFrame+0x4a>
			{
				CAN_FIFO_Add(&cans[i].fifo, (uint8_t*)pFrame);
 8002996:	7bfa      	ldrb	r2, [r7, #15]
 8002998:	4613      	mov	r3, r2
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	1a9b      	subs	r3, r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4a08      	ldr	r2, [pc, #32]	; (80029c4 <CAN_SendFrame+0x60>)
 80029a2:	4413      	add	r3, r2
 80029a4:	3304      	adds	r3, #4
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff fea9 	bl	8002700 <CAN_FIFO_Add>
		for(uint8_t i=0; i<NUMBER_OF_CANS; i++)
 80029ae:	7bfb      	ldrb	r3, [r7, #15]
 80029b0:	3301      	adds	r3, #1
 80029b2:	73fb      	strb	r3, [r7, #15]
 80029b4:	7bfb      	ldrb	r3, [r7, #15]
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d9e1      	bls.n	800297e <CAN_SendFrame+0x1a>
			}
		}
	}
}
 80029ba:	bf00      	nop
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	20000abc 	.word	0x20000abc

080029c8 <CAN_ReceiveCallback>:
		}
	}
}

void CAN_ReceiveCallback(CAN_HandleTypeDef* hcan, can_msg* msg)
{
 80029c8:	b590      	push	{r4, r7, lr}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
	uint8_t index = FilterFrame(hcan, msg->id);
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	4619      	mov	r1, r3
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7ff ff94 	bl	8002908 <FilterFrame>
 80029e0:	4603      	mov	r3, r0
 80029e2:	73bb      	strb	r3, [r7, #14]
	if(index==255) return;
 80029e4:	7bbb      	ldrb	r3, [r7, #14]
 80029e6:	2bff      	cmp	r3, #255	; 0xff
 80029e8:	d045      	beq.n	8002a76 <CAN_ReceiveCallback+0xae>
	memcpy(_can_info.pFrames[index]->core.data, msg->data, 8);
 80029ea:	7bbb      	ldrb	r3, [r7, #14]
 80029ec:	4a24      	ldr	r2, [pc, #144]	; (8002a80 <CAN_ReceiveCallback+0xb8>)
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f103 0010 	add.w	r0, r3, #16
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	330c      	adds	r3, #12
 80029fc:	2208      	movs	r2, #8
 80029fe:	4619      	mov	r1, r3
 8002a00:	f004 fd86 	bl	8007510 <memcpy>
	_can_info.pFrames[index]->recieve_time_ms = HAL_GetTick();
 8002a04:	7bbb      	ldrb	r3, [r7, #14]
 8002a06:	4a1e      	ldr	r2, [pc, #120]	; (8002a80 <CAN_ReceiveCallback+0xb8>)
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4413      	add	r3, r2
 8002a0c:	685c      	ldr	r4, [r3, #4]
 8002a0e:	f000 fa5b 	bl	8002ec8 <HAL_GetTick>
 8002a12:	4603      	mov	r3, r0
 8002a14:	61e3      	str	r3, [r4, #28]
	for(uint8_t i=0; i<NUMBER_OF_CANS; i++){
 8002a16:	2300      	movs	r3, #0
 8002a18:	73fb      	strb	r3, [r7, #15]
 8002a1a:	e028      	b.n	8002a6e <CAN_ReceiveCallback+0xa6>
		if(hcan == cans[i].hcan && cans[i].callback != NULL){
 8002a1c:	7bfa      	ldrb	r2, [r7, #15]
 8002a1e:	4919      	ldr	r1, [pc, #100]	; (8002a84 <CAN_ReceiveCallback+0xbc>)
 8002a20:	4613      	mov	r3, r2
 8002a22:	011b      	lsls	r3, r3, #4
 8002a24:	1a9b      	subs	r3, r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d11a      	bne.n	8002a68 <CAN_ReceiveCallback+0xa0>
 8002a32:	7bfa      	ldrb	r2, [r7, #15]
 8002a34:	4913      	ldr	r1, [pc, #76]	; (8002a84 <CAN_ReceiveCallback+0xbc>)
 8002a36:	4613      	mov	r3, r2
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	1a9b      	subs	r3, r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	440b      	add	r3, r1
 8002a40:	3338      	adds	r3, #56	; 0x38
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00f      	beq.n	8002a68 <CAN_ReceiveCallback+0xa0>
			cans[i].callback(_can_info.pFrames[index]);
 8002a48:	7bfa      	ldrb	r2, [r7, #15]
 8002a4a:	490e      	ldr	r1, [pc, #56]	; (8002a84 <CAN_ReceiveCallback+0xbc>)
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	011b      	lsls	r3, r3, #4
 8002a50:	1a9b      	subs	r3, r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	3338      	adds	r3, #56	; 0x38
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	7bbb      	ldrb	r3, [r7, #14]
 8002a5c:	4908      	ldr	r1, [pc, #32]	; (8002a80 <CAN_ReceiveCallback+0xb8>)
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	4618      	mov	r0, r3
 8002a66:	4790      	blx	r2
	for(uint8_t i=0; i<NUMBER_OF_CANS; i++){
 8002a68:	7bfb      	ldrb	r3, [r7, #15]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	73fb      	strb	r3, [r7, #15]
 8002a6e:	7bfb      	ldrb	r3, [r7, #15]
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d9d3      	bls.n	8002a1c <CAN_ReceiveCallback+0x54>
 8002a74:	e000      	b.n	8002a78 <CAN_ReceiveCallback+0xb0>
	if(index==255) return;
 8002a76:	bf00      	nop
		}
	}
}
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd90      	pop	{r4, r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	20000b70 	.word	0x20000b70
 8002a84:	20000abc 	.word	0x20000abc

08002a88 <CAN_TxCompleteCallback>:

void CAN_TxCompleteCallback(CAN_HandleTypeDef* hcan)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0; i<NUMBER_OF_CANS; i++){
 8002a90:	2300      	movs	r3, #0
 8002a92:	73fb      	strb	r3, [r7, #15]
 8002a94:	e01f      	b.n	8002ad6 <CAN_TxCompleteCallback+0x4e>
		if(hcan == cans[i].hcan){
 8002a96:	7bfa      	ldrb	r2, [r7, #15]
 8002a98:	4913      	ldr	r1, [pc, #76]	; (8002ae8 <CAN_TxCompleteCallback+0x60>)
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	1a9b      	subs	r3, r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	440b      	add	r3, r1
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d111      	bne.n	8002ad0 <CAN_TxCompleteCallback+0x48>
			uint8_t* pFrame = CAN_FIFO_Get(&cans[i].fifo);
 8002aac:	7bfa      	ldrb	r2, [r7, #15]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	011b      	lsls	r3, r3, #4
 8002ab2:	1a9b      	subs	r3, r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4a0c      	ldr	r2, [pc, #48]	; (8002ae8 <CAN_TxCompleteCallback+0x60>)
 8002ab8:	4413      	add	r3, r2
 8002aba:	3304      	adds	r3, #4
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff fe6b 	bl	8002798 <CAN_FIFO_Get>
 8002ac2:	60b8      	str	r0, [r7, #8]
			if(pFrame){
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d002      	beq.n	8002ad0 <CAN_TxCompleteCallback+0x48>
				CAN_SendFrame((can_frame*)pFrame);
 8002aca:	68b8      	ldr	r0, [r7, #8]
 8002acc:	f7ff ff4a 	bl	8002964 <CAN_SendFrame>
	for(uint8_t i=0; i<NUMBER_OF_CANS; i++){
 8002ad0:	7bfb      	ldrb	r3, [r7, #15]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	73fb      	strb	r3, [r7, #15]
 8002ad6:	7bfb      	ldrb	r3, [r7, #15]
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d9dc      	bls.n	8002a96 <CAN_TxCompleteCallback+0xe>
			}
		}
	}
}
 8002adc:	bf00      	nop
 8002ade:	bf00      	nop
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	20000abc 	.word	0x20000abc

08002aec <CAN_HW_Init>:
#include "CAN_LIB_HW.h"
#ifndef CAN2
#define CAN2 0
#endif

void CAN_HW_Init(CAN_HandleTypeDef* hcan){
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]

	static CAN_FilterTypeDef sFilterConfig;
	if(hcan->Instance == CAN2)sFilterConfig.FilterBank = 14;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d103      	bne.n	8002b04 <CAN_HW_Init+0x18>
 8002afc:	4b20      	ldr	r3, [pc, #128]	; (8002b80 <CAN_HW_Init+0x94>)
 8002afe:	220e      	movs	r2, #14
 8002b00:	615a      	str	r2, [r3, #20]
 8002b02:	e002      	b.n	8002b0a <CAN_HW_Init+0x1e>
	else sFilterConfig.FilterBank = 0;
 8002b04:	4b1e      	ldr	r3, [pc, #120]	; (8002b80 <CAN_HW_Init+0x94>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002b0a:	4b1d      	ldr	r3, [pc, #116]	; (8002b80 <CAN_HW_Init+0x94>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002b10:	4b1b      	ldr	r3, [pc, #108]	; (8002b80 <CAN_HW_Init+0x94>)
 8002b12:	2201      	movs	r2, #1
 8002b14:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8002b16:	4b1a      	ldr	r3, [pc, #104]	; (8002b80 <CAN_HW_Init+0x94>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8002b1c:	4b18      	ldr	r3, [pc, #96]	; (8002b80 <CAN_HW_Init+0x94>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8002b22:	4b17      	ldr	r3, [pc, #92]	; (8002b80 <CAN_HW_Init+0x94>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8002b28:	4b15      	ldr	r3, [pc, #84]	; (8002b80 <CAN_HW_Init+0x94>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002b2e:	4b14      	ldr	r3, [pc, #80]	; (8002b80 <CAN_HW_Init+0x94>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8002b34:	4b12      	ldr	r3, [pc, #72]	; (8002b80 <CAN_HW_Init+0x94>)
 8002b36:	2201      	movs	r2, #1
 8002b38:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8002b3a:	4b11      	ldr	r3, [pc, #68]	; (8002b80 <CAN_HW_Init+0x94>)
 8002b3c:	220e      	movs	r2, #14
 8002b3e:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_CAN_ConfigFilter(hcan, &sFilterConfig) != HAL_OK)
 8002b40:	490f      	ldr	r1, [pc, #60]	; (8002b80 <CAN_HW_Init+0x94>)
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 faeb 	bl	800311e <HAL_CAN_ConfigFilter>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <CAN_HW_Init+0x66>
	{
		/* Filter configuration Error */
		Error_Handler();
 8002b4e:	f7ff fd0c 	bl	800256a <Error_Handler>
	}

	if (HAL_CAN_Start(hcan) != HAL_OK)
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 fbad 	bl	80032b2 <HAL_CAN_Start>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <CAN_HW_Init+0x76>
	{
		/* Start Error */
		Error_Handler();
 8002b5e:	f7ff fd04 	bl	800256a <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(hcan,
 8002b62:	f248 010f 	movw	r1, #32783	; 0x800f
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 fd09 	bl	800357e <HAL_CAN_ActivateNotification>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <CAN_HW_Init+0x8a>
			CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_OVERRUN
					| CAN_IT_RX_FIFO0_FULL | CAN_IT_TX_MAILBOX_EMPTY
					| CAN_IT_ERROR) != HAL_OK)
	{
		/* Notification Error */
		Error_Handler();
 8002b72:	f7ff fcfa 	bl	800256a <Error_Handler>
	}

}
 8002b76:	bf00      	nop
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20000ca8 	.word	0x20000ca8

08002b84 <CAN_HW_SendFrame>:

CAN_status CAN_HW_SendFrame(can_frame* pFrame){
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]

	/* Check if mailbox is free */
	if ((pFrame->hcan->Instance->TSR & CAN_TSR_TME0) == 0U)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <CAN_HW_SendFrame+0x1c>
		return CAN_FAILURE;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	e052      	b.n	8002c46 <CAN_HW_SendFrame+0xc2>

	/* Set up the Id */
	if (pFrame->core.isExtId) {
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	791b      	ldrb	r3, [r3, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00a      	beq.n	8002bbe <CAN_HW_SendFrame+0x3a>
		pFrame->hcan->Instance->sTxMailBox[0].TIR = ((pFrame->core.id
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
				<< CAN_TI0R_EXID_Pos) | CAN_ID_EXT | CAN_RTR_DATA);
 8002bac:	00da      	lsls	r2, r3, #3
		pFrame->hcan->Instance->sTxMailBox[0].TIR = ((pFrame->core.id
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
				<< CAN_TI0R_EXID_Pos) | CAN_ID_EXT | CAN_RTR_DATA);
 8002bb4:	f042 0204 	orr.w	r2, r2, #4
		pFrame->hcan->Instance->sTxMailBox[0].TIR = ((pFrame->core.id
 8002bb8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 8002bbc:	e007      	b.n	8002bce <CAN_HW_SendFrame+0x4a>
	} else {
		pFrame->hcan->Instance->sTxMailBox[0].TIR = ((pFrame->core.id
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
				<< CAN_TI0R_STID_Pos) | CAN_RTR_DATA);
 8002bc8:	0552      	lsls	r2, r2, #21
		pFrame->hcan->Instance->sTxMailBox[0].TIR = ((pFrame->core.id
 8002bca:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	}

	/* Set up the DLC */
	pFrame->hcan->Instance->sTxMailBox[0].TDTR = pFrame->core.dlc;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	68d2      	ldr	r2, [r2, #12]
 8002bd8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	/* Set up the data field */
	WRITE_REG(pFrame->hcan->Instance->sTxMailBox[0].TDHR,
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	7ddb      	ldrb	r3, [r3, #23]
 8002be0:	061a      	lsls	r2, r3, #24
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	7d9b      	ldrb	r3, [r3, #22]
 8002be6:	041b      	lsls	r3, r3, #16
 8002be8:	431a      	orrs	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	7d5b      	ldrb	r3, [r3, #21]
 8002bee:	021b      	lsls	r3, r3, #8
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	7d1b      	ldrb	r3, [r3, #20]
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
			((uint32_t)pFrame->core.data[7] << CAN_TDH0R_DATA7_Pos) | ((uint32_t)pFrame->core.data[6] << CAN_TDH0R_DATA6_Pos) | ((uint32_t)pFrame->core.data[5] << CAN_TDH0R_DATA5_Pos) | ((uint32_t)pFrame->core.data[4] << CAN_TDH0R_DATA4_Pos));
	WRITE_REG(pFrame->hcan->Instance->sTxMailBox[0].TDLR,
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	7cdb      	ldrb	r3, [r3, #19]
 8002c08:	061a      	lsls	r2, r3, #24
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	7c9b      	ldrb	r3, [r3, #18]
 8002c0e:	041b      	lsls	r3, r3, #16
 8002c10:	431a      	orrs	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	7c5b      	ldrb	r3, [r3, #17]
 8002c16:	021b      	lsls	r3, r3, #8
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	7c1b      	ldrb	r3, [r3, #16]
 8002c1e:	4619      	mov	r1, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
			((uint32_t)pFrame->core.data[3] << CAN_TDL0R_DATA3_Pos) | ((uint32_t)pFrame->core.data[2] << CAN_TDL0R_DATA2_Pos) | ((uint32_t)pFrame->core.data[1] << CAN_TDL0R_DATA1_Pos) | ((uint32_t)pFrame->core.data[0] << CAN_TDL0R_DATA0_Pos));

	/* Request transmission */
	SET_BIT(pFrame->hcan->Instance->sTxMailBox[0].TIR, CAN_TI0R_TXRQ);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f042 0201 	orr.w	r2, r2, #1
 8002c40:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	return CAN_SUCCESS;
 8002c44:	2301      	movs	r3, #1
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
	...

08002c54 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
	CAN_TxCompleteCallback(hcan);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f7ff ff13 	bl	8002a88 <CAN_TxCompleteCallback>
	for(int i=0; i<NUMBER_OF_CANS; i++)
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	e017      	b.n	8002c98 <HAL_CAN_TxMailbox0CompleteCallback+0x44>
	{
		if(hcan == cans[i].hcan){
 8002c68:	490f      	ldr	r1, [pc, #60]	; (8002ca8 <HAL_CAN_TxMailbox0CompleteCallback+0x54>)
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	011b      	lsls	r3, r3, #4
 8002c70:	1a9b      	subs	r3, r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d109      	bne.n	8002c92 <HAL_CAN_TxMailbox0CompleteCallback+0x3e>
			cans[i].retransmision_counter = 0;
 8002c7e:	490a      	ldr	r1, [pc, #40]	; (8002ca8 <HAL_CAN_TxMailbox0CompleteCallback+0x54>)
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	4613      	mov	r3, r2
 8002c84:	011b      	lsls	r3, r3, #4
 8002c86:	1a9b      	subs	r3, r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	3334      	adds	r3, #52	; 0x34
 8002c8e:	2200      	movs	r2, #0
 8002c90:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<NUMBER_OF_CANS; i++)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	3301      	adds	r3, #1
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	dde4      	ble.n	8002c68 <HAL_CAN_TxMailbox0CompleteCallback+0x14>
		}
	}}
 8002c9e:	bf00      	nop
 8002ca0:	bf00      	nop
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	20000bf4 	.word	0x20000bf4

08002cac <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan) {
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
	CAN_TxCompleteCallback(hcan);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7ff fee7 	bl	8002a88 <CAN_TxCompleteCallback>
	for(int i=0; i<NUMBER_OF_CANS; i++)
 8002cba:	2300      	movs	r3, #0
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	e017      	b.n	8002cf0 <HAL_CAN_TxMailbox0AbortCallback+0x44>
	{
		if(hcan == cans[i].hcan){
 8002cc0:	490f      	ldr	r1, [pc, #60]	; (8002d00 <HAL_CAN_TxMailbox0AbortCallback+0x54>)
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	011b      	lsls	r3, r3, #4
 8002cc8:	1a9b      	subs	r3, r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d109      	bne.n	8002cea <HAL_CAN_TxMailbox0AbortCallback+0x3e>
			cans[i].retransmision_counter = 0;
 8002cd6:	490a      	ldr	r1, [pc, #40]	; (8002d00 <HAL_CAN_TxMailbox0AbortCallback+0x54>)
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	011b      	lsls	r3, r3, #4
 8002cde:	1a9b      	subs	r3, r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	3334      	adds	r3, #52	; 0x34
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<NUMBER_OF_CANS; i++)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	3301      	adds	r3, #1
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	dde4      	ble.n	8002cc0 <HAL_CAN_TxMailbox0AbortCallback+0x14>
		}
	}
}
 8002cf6:	bf00      	nop
 8002cf8:	bf00      	nop
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	20000bf4 	.word	0x20000bf4

08002d04 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08e      	sub	sp, #56	; 0x38
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]

	can_msg msg;
	CAN_RxHeaderTypeDef RxHeader;
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, msg.data);
 8002d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d10:	330c      	adds	r3, #12
 8002d12:	f107 0208 	add.w	r2, r7, #8
 8002d16:	2100      	movs	r1, #0
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 fb0e 	bl	800333a <HAL_CAN_GetRxMessage>
	msg.dlc = RxHeader.DLC;
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	62fb      	str	r3, [r7, #44]	; 0x2c
	msg.id = RxHeader.StdId;
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	62bb      	str	r3, [r7, #40]	; 0x28
	CAN_ReceiveCallback(hcan, &msg);
 8002d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f7ff fe4b 	bl	80029c8 <CAN_ReceiveCallback>
}
 8002d32:	bf00      	nop
 8002d34:	3738      	adds	r7, #56	; 0x38
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_CAN_RxFifo0FullCallback>:

void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan){
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]

}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
	...

08002d50 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan){
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]

	uint32_t errorcode;
	errorcode = HAL_CAN_GetError(hcan);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 fe3d 	bl	80039d8 <HAL_CAN_GetError>
 8002d5e:	60b8      	str	r0, [r7, #8]
	for(int i=0; i<NUMBER_OF_CANS; i++)
 8002d60:	2300      	movs	r3, #0
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	e04a      	b.n	8002dfc <HAL_CAN_ErrorCallback+0xac>
	{
		if(hcan == cans[i].hcan){
 8002d66:	492a      	ldr	r1, [pc, #168]	; (8002e10 <HAL_CAN_ErrorCallback+0xc0>)
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	011b      	lsls	r3, r3, #4
 8002d6e:	1a9b      	subs	r3, r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	440b      	add	r3, r1
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d13c      	bne.n	8002df6 <HAL_CAN_ErrorCallback+0xa6>
			/* arbitration lost, retransmit */
			if (errorcode & HAL_CAN_ERROR_TX_ALST0) {
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d037      	beq.n	8002df6 <HAL_CAN_ErrorCallback+0xa6>
				if (cans[i].retransmision_counter < CAN_ARB_LOST_RETR) {
 8002d86:	4922      	ldr	r1, [pc, #136]	; (8002e10 <HAL_CAN_ErrorCallback+0xc0>)
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	011b      	lsls	r3, r3, #4
 8002d8e:	1a9b      	subs	r3, r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	440b      	add	r3, r1
 8002d94:	3334      	adds	r3, #52	; 0x34
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b27      	cmp	r3, #39	; 0x27
 8002d9a:	d82c      	bhi.n	8002df6 <HAL_CAN_ErrorCallback+0xa6>
					SET_BIT(cans[i].hcan->Instance->sTxMailBox[0].TIR, CAN_TI0R_TXRQ);
 8002d9c:	491c      	ldr	r1, [pc, #112]	; (8002e10 <HAL_CAN_ErrorCallback+0xc0>)
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	4613      	mov	r3, r2
 8002da2:	011b      	lsls	r3, r3, #4
 8002da4:	1a9b      	subs	r3, r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f8d3 1180 	ldr.w	r1, [r3, #384]	; 0x180
 8002db2:	4817      	ldr	r0, [pc, #92]	; (8002e10 <HAL_CAN_ErrorCallback+0xc0>)
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	4613      	mov	r3, r2
 8002db8:	011b      	lsls	r3, r3, #4
 8002dba:	1a9b      	subs	r3, r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4403      	add	r3, r0
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f041 0201 	orr.w	r2, r1, #1
 8002dc8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
					cans[i].retransmision_counter++;
 8002dcc:	4910      	ldr	r1, [pc, #64]	; (8002e10 <HAL_CAN_ErrorCallback+0xc0>)
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	011b      	lsls	r3, r3, #4
 8002dd4:	1a9b      	subs	r3, r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	3334      	adds	r3, #52	; 0x34
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	3301      	adds	r3, #1
 8002de0:	b2d8      	uxtb	r0, r3
 8002de2:	490b      	ldr	r1, [pc, #44]	; (8002e10 <HAL_CAN_ErrorCallback+0xc0>)
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	4613      	mov	r3, r2
 8002de8:	011b      	lsls	r3, r3, #4
 8002dea:	1a9b      	subs	r3, r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	440b      	add	r3, r1
 8002df0:	3334      	adds	r3, #52	; 0x34
 8002df2:	4602      	mov	r2, r0
 8002df4:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<NUMBER_OF_CANS; i++)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	ddb1      	ble.n	8002d66 <HAL_CAN_ErrorCallback+0x16>
				}
			}
		}
	}

	HAL_CAN_ResetError(hcan);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 fdf4 	bl	80039f0 <HAL_CAN_ResetError>
}
 8002e08:	bf00      	nop
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	20000bf4 	.word	0x20000bf4

08002e14 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e18:	4b08      	ldr	r3, [pc, #32]	; (8002e3c <HAL_Init+0x28>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a07      	ldr	r2, [pc, #28]	; (8002e3c <HAL_Init+0x28>)
 8002e1e:	f043 0310 	orr.w	r3, r3, #16
 8002e22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e24:	2003      	movs	r0, #3
 8002e26:	f000 fed7 	bl	8003bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e2a:	200f      	movs	r0, #15
 8002e2c:	f000 f808 	bl	8002e40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e30:	f7ff fba0 	bl	8002574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40022000 	.word	0x40022000

08002e40 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e48:	4b12      	ldr	r3, [pc, #72]	; (8002e94 <HAL_InitTick+0x54>)
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	4b12      	ldr	r3, [pc, #72]	; (8002e98 <HAL_InitTick+0x58>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	4619      	mov	r1, r3
 8002e52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 feef 	bl	8003c42 <HAL_SYSTICK_Config>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e00e      	b.n	8002e8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b0f      	cmp	r3, #15
 8002e72:	d80a      	bhi.n	8002e8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e74:	2200      	movs	r2, #0
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	f04f 30ff 	mov.w	r0, #4294967295
 8002e7c:	f000 feb7 	bl	8003bee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e80:	4a06      	ldr	r2, [pc, #24]	; (8002e9c <HAL_InitTick+0x5c>)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
 8002e88:	e000      	b.n	8002e8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	20000000 	.word	0x20000000
 8002e98:	20000008 	.word	0x20000008
 8002e9c:	20000004 	.word	0x20000004

08002ea0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ea4:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <HAL_IncTick+0x20>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <HAL_IncTick+0x24>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4413      	add	r3, r2
 8002eb0:	4a04      	ldr	r2, [pc, #16]	; (8002ec4 <HAL_IncTick+0x24>)
 8002eb2:	6013      	str	r3, [r2, #0]
}
 8002eb4:	bf00      	nop
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	20000008 	.word	0x20000008
 8002ec4:	20000cd0 	.word	0x20000cd0

08002ec8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  return uwTick;  
 8002ecc:	4b03      	ldr	r3, [pc, #12]	; (8002edc <HAL_GetTick+0x14>)
 8002ece:	681b      	ldr	r3, [r3, #0]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	20000cd0 	.word	0x20000cd0

08002ee0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ee8:	f7ff ffee 	bl	8002ec8 <HAL_GetTick>
 8002eec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef8:	d005      	beq.n	8002f06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002efa:	4b0a      	ldr	r3, [pc, #40]	; (8002f24 <HAL_Delay+0x44>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	461a      	mov	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4413      	add	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002f06:	bf00      	nop
 8002f08:	f7ff ffde 	bl	8002ec8 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d8f7      	bhi.n	8002f08 <HAL_Delay+0x28>
  {
  }
}
 8002f18:	bf00      	nop
 8002f1a:	bf00      	nop
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	20000008 	.word	0x20000008

08002f28 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e0ed      	b.n	8003116 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d102      	bne.n	8002f4c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7ff f944 	bl	80021d4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 0201 	orr.w	r2, r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f5c:	f7ff ffb4 	bl	8002ec8 <HAL_GetTick>
 8002f60:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f62:	e012      	b.n	8002f8a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f64:	f7ff ffb0 	bl	8002ec8 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b0a      	cmp	r3, #10
 8002f70:	d90b      	bls.n	8002f8a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2205      	movs	r2, #5
 8002f82:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e0c5      	b.n	8003116 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0e5      	beq.n	8002f64 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 0202 	bic.w	r2, r2, #2
 8002fa6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fa8:	f7ff ff8e 	bl	8002ec8 <HAL_GetTick>
 8002fac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002fae:	e012      	b.n	8002fd6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002fb0:	f7ff ff8a 	bl	8002ec8 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b0a      	cmp	r3, #10
 8002fbc:	d90b      	bls.n	8002fd6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2205      	movs	r2, #5
 8002fce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e09f      	b.n	8003116 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1e5      	bne.n	8002fb0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	7e1b      	ldrb	r3, [r3, #24]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d108      	bne.n	8002ffe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	e007      	b.n	800300e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800300c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	7e5b      	ldrb	r3, [r3, #25]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d108      	bne.n	8003028 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	e007      	b.n	8003038 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003036:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	7e9b      	ldrb	r3, [r3, #26]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d108      	bne.n	8003052 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f042 0220 	orr.w	r2, r2, #32
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	e007      	b.n	8003062 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0220 	bic.w	r2, r2, #32
 8003060:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	7edb      	ldrb	r3, [r3, #27]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d108      	bne.n	800307c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 0210 	bic.w	r2, r2, #16
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	e007      	b.n	800308c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0210 	orr.w	r2, r2, #16
 800308a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	7f1b      	ldrb	r3, [r3, #28]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d108      	bne.n	80030a6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f042 0208 	orr.w	r2, r2, #8
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	e007      	b.n	80030b6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 0208 	bic.w	r2, r2, #8
 80030b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	7f5b      	ldrb	r3, [r3, #29]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d108      	bne.n	80030d0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f042 0204 	orr.w	r2, r2, #4
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	e007      	b.n	80030e0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0204 	bic.w	r2, r2, #4
 80030de:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	431a      	orrs	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	ea42 0103 	orr.w	r1, r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	1e5a      	subs	r2, r3, #1
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800311e:	b480      	push	{r7}
 8003120:	b087      	sub	sp, #28
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
 8003126:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003134:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003136:	7cfb      	ldrb	r3, [r7, #19]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d003      	beq.n	8003144 <HAL_CAN_ConfigFilter+0x26>
 800313c:	7cfb      	ldrb	r3, [r7, #19]
 800313e:	2b02      	cmp	r3, #2
 8003140:	f040 80aa 	bne.w	8003298 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800314a:	f043 0201 	orr.w	r2, r3, #1
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	f003 031f 	and.w	r3, r3, #31
 800315c:	2201      	movs	r2, #1
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	43db      	mvns	r3, r3
 800316e:	401a      	ands	r2, r3
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d123      	bne.n	80031c6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	43db      	mvns	r3, r3
 8003188:	401a      	ands	r2, r3
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80031a0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	3248      	adds	r2, #72	; 0x48
 80031a6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031ba:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031bc:	6979      	ldr	r1, [r7, #20]
 80031be:	3348      	adds	r3, #72	; 0x48
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	440b      	add	r3, r1
 80031c4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d122      	bne.n	8003214 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	431a      	orrs	r2, r3
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80031ee:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	3248      	adds	r2, #72	; 0x48
 80031f4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003208:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800320a:	6979      	ldr	r1, [r7, #20]
 800320c:	3348      	adds	r3, #72	; 0x48
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	440b      	add	r3, r1
 8003212:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d109      	bne.n	8003230 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	43db      	mvns	r3, r3
 8003226:	401a      	ands	r2, r3
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800322e:	e007      	b.n	8003240 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	431a      	orrs	r2, r3
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d109      	bne.n	800325c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	43db      	mvns	r3, r3
 8003252:	401a      	ands	r2, r3
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800325a:	e007      	b.n	800326c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	431a      	orrs	r2, r3
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d107      	bne.n	8003284 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	431a      	orrs	r2, r3
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800328a:	f023 0201 	bic.w	r2, r3, #1
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003294:	2300      	movs	r3, #0
 8003296:	e006      	b.n	80032a6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
  }
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	371c      	adds	r7, #28
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b084      	sub	sp, #16
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d12e      	bne.n	8003324 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2202      	movs	r2, #2
 80032ca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0201 	bic.w	r2, r2, #1
 80032dc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80032de:	f7ff fdf3 	bl	8002ec8 <HAL_GetTick>
 80032e2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80032e4:	e012      	b.n	800330c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80032e6:	f7ff fdef 	bl	8002ec8 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b0a      	cmp	r3, #10
 80032f2:	d90b      	bls.n	800330c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2205      	movs	r2, #5
 8003304:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e012      	b.n	8003332 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1e5      	bne.n	80032e6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003320:	2300      	movs	r3, #0
 8003322:	e006      	b.n	8003332 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
  }
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800333a:	b480      	push	{r7}
 800333c:	b087      	sub	sp, #28
 800333e:	af00      	add	r7, sp, #0
 8003340:	60f8      	str	r0, [r7, #12]
 8003342:	60b9      	str	r1, [r7, #8]
 8003344:	607a      	str	r2, [r7, #4]
 8003346:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800334e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003350:	7dfb      	ldrb	r3, [r7, #23]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d003      	beq.n	800335e <HAL_CAN_GetRxMessage+0x24>
 8003356:	7dfb      	ldrb	r3, [r7, #23]
 8003358:	2b02      	cmp	r3, #2
 800335a:	f040 8103 	bne.w	8003564 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10e      	bne.n	8003382 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d116      	bne.n	80033a0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003376:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e0f7      	b.n	8003572 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	f003 0303 	and.w	r3, r3, #3
 800338c:	2b00      	cmp	r3, #0
 800338e:	d107      	bne.n	80033a0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e0e8      	b.n	8003572 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	331b      	adds	r3, #27
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	4413      	add	r3, r2
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0204 	and.w	r2, r3, #4
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10c      	bne.n	80033d8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	331b      	adds	r3, #27
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	4413      	add	r3, r2
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	0d5b      	lsrs	r3, r3, #21
 80033ce:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	e00b      	b.n	80033f0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	331b      	adds	r3, #27
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	4413      	add	r3, r2
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	08db      	lsrs	r3, r3, #3
 80033e8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	331b      	adds	r3, #27
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	4413      	add	r3, r2
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0202 	and.w	r2, r3, #2
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	331b      	adds	r3, #27
 800340e:	011b      	lsls	r3, r3, #4
 8003410:	4413      	add	r3, r2
 8003412:	3304      	adds	r3, #4
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0308 	and.w	r3, r3, #8
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2208      	movs	r2, #8
 8003422:	611a      	str	r2, [r3, #16]
 8003424:	e00b      	b.n	800343e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	331b      	adds	r3, #27
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	4413      	add	r3, r2
 8003432:	3304      	adds	r3, #4
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 020f 	and.w	r2, r3, #15
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	331b      	adds	r3, #27
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	4413      	add	r3, r2
 800344a:	3304      	adds	r3, #4
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	0a1b      	lsrs	r3, r3, #8
 8003450:	b2da      	uxtb	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	331b      	adds	r3, #27
 800345e:	011b      	lsls	r3, r3, #4
 8003460:	4413      	add	r3, r2
 8003462:	3304      	adds	r3, #4
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	0c1b      	lsrs	r3, r3, #16
 8003468:	b29a      	uxth	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	011b      	lsls	r3, r3, #4
 8003476:	4413      	add	r3, r2
 8003478:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	b2da      	uxtb	r2, r3
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	4413      	add	r3, r2
 800348e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	0a1a      	lsrs	r2, r3, #8
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	3301      	adds	r3, #1
 800349a:	b2d2      	uxtb	r2, r2
 800349c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	0c1a      	lsrs	r2, r3, #16
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	3302      	adds	r3, #2
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	011b      	lsls	r3, r3, #4
 80034c0:	4413      	add	r3, r2
 80034c2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	0e1a      	lsrs	r2, r3, #24
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	3303      	adds	r3, #3
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	4413      	add	r3, r2
 80034dc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	3304      	adds	r3, #4
 80034e6:	b2d2      	uxtb	r2, r2
 80034e8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	4413      	add	r3, r2
 80034f4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	0a1a      	lsrs	r2, r3, #8
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	3305      	adds	r3, #5
 8003500:	b2d2      	uxtb	r2, r2
 8003502:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	4413      	add	r3, r2
 800350e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	0c1a      	lsrs	r2, r3, #16
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	3306      	adds	r3, #6
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	011b      	lsls	r3, r3, #4
 8003526:	4413      	add	r3, r2
 8003528:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	0e1a      	lsrs	r2, r3, #24
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	3307      	adds	r3, #7
 8003534:	b2d2      	uxtb	r2, r2
 8003536:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d108      	bne.n	8003550 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68da      	ldr	r2, [r3, #12]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f042 0220 	orr.w	r2, r2, #32
 800354c:	60da      	str	r2, [r3, #12]
 800354e:	e007      	b.n	8003560 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	691a      	ldr	r2, [r3, #16]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0220 	orr.w	r2, r2, #32
 800355e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003560:	2300      	movs	r3, #0
 8003562:	e006      	b.n	8003572 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
  }
}
 8003572:	4618      	mov	r0, r3
 8003574:	371c      	adds	r7, #28
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr

0800357e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800357e:	b480      	push	{r7}
 8003580:	b085      	sub	sp, #20
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
 8003586:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800358e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003590:	7bfb      	ldrb	r3, [r7, #15]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d002      	beq.n	800359c <HAL_CAN_ActivateNotification+0x1e>
 8003596:	7bfb      	ldrb	r3, [r7, #15]
 8003598:	2b02      	cmp	r3, #2
 800359a:	d109      	bne.n	80035b0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6959      	ldr	r1, [r3, #20]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80035ac:	2300      	movs	r3, #0
 80035ae:	e006      	b.n	80035be <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
  }
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b08a      	sub	sp, #40	; 0x28
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80035d2:	2300      	movs	r3, #0
 80035d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003606:	6a3b      	ldr	r3, [r7, #32]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b00      	cmp	r3, #0
 800360e:	d07c      	beq.n	800370a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	d023      	beq.n	8003662 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2201      	movs	r2, #1
 8003620:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7ff fb11 	bl	8002c54 <HAL_CAN_TxMailbox0CompleteCallback>
 8003632:	e016      	b.n	8003662 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	f003 0304 	and.w	r3, r3, #4
 800363a:	2b00      	cmp	r3, #0
 800363c:	d004      	beq.n	8003648 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003644:	627b      	str	r3, [r7, #36]	; 0x24
 8003646:	e00c      	b.n	8003662 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	f003 0308 	and.w	r3, r3, #8
 800364e:	2b00      	cmp	r3, #0
 8003650:	d004      	beq.n	800365c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003658:	627b      	str	r3, [r7, #36]	; 0x24
 800365a:	e002      	b.n	8003662 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f7ff fb25 	bl	8002cac <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003668:	2b00      	cmp	r3, #0
 800366a:	d024      	beq.n	80036b6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003674:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f959 	bl	8003938 <HAL_CAN_TxMailbox1CompleteCallback>
 8003686:	e016      	b.n	80036b6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800368e:	2b00      	cmp	r3, #0
 8003690:	d004      	beq.n	800369c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003698:	627b      	str	r3, [r7, #36]	; 0x24
 800369a:	e00c      	b.n	80036b6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d004      	beq.n	80036b0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24
 80036ae:	e002      	b.n	80036b6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 f955 	bl	8003960 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d024      	beq.n	800370a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80036c8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f939 	bl	800394c <HAL_CAN_TxMailbox2CompleteCallback>
 80036da:	e016      	b.n	800370a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d004      	beq.n	80036f0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24
 80036ee:	e00c      	b.n	800370a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d004      	beq.n	8003704 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003700:	627b      	str	r3, [r7, #36]	; 0x24
 8003702:	e002      	b.n	800370a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f935 	bl	8003974 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800370a:	6a3b      	ldr	r3, [r7, #32]
 800370c:	f003 0308 	and.w	r3, r3, #8
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00c      	beq.n	800372e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	f003 0310 	and.w	r3, r3, #16
 800371a:	2b00      	cmp	r3, #0
 800371c:	d007      	beq.n	800372e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003724:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2210      	movs	r2, #16
 800372c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800372e:	6a3b      	ldr	r3, [r7, #32]
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00b      	beq.n	8003750 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	2b00      	cmp	r3, #0
 8003740:	d006      	beq.n	8003750 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2208      	movs	r2, #8
 8003748:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7ff faf5 	bl	8002d3a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d009      	beq.n	800376e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	f003 0303 	and.w	r3, r3, #3
 8003764:	2b00      	cmp	r3, #0
 8003766:	d002      	beq.n	800376e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f7ff facb 	bl	8002d04 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00c      	beq.n	8003792 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	f003 0310 	and.w	r3, r3, #16
 800377e:	2b00      	cmp	r3, #0
 8003780:	d007      	beq.n	8003792 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003788:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2210      	movs	r2, #16
 8003790:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003792:	6a3b      	ldr	r3, [r7, #32]
 8003794:	f003 0320 	and.w	r3, r3, #32
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00b      	beq.n	80037b4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	f003 0308 	and.w	r3, r3, #8
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d006      	beq.n	80037b4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2208      	movs	r2, #8
 80037ac:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f8f4 	bl	800399c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	f003 0310 	and.w	r3, r3, #16
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d009      	beq.n	80037d2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	f003 0303 	and.w	r3, r3, #3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d002      	beq.n	80037d2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 f8db 	bl	8003988 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80037d2:	6a3b      	ldr	r3, [r7, #32]
 80037d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00b      	beq.n	80037f4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	f003 0310 	and.w	r3, r3, #16
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d006      	beq.n	80037f4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2210      	movs	r2, #16
 80037ec:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f8de 	bl	80039b0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00b      	beq.n	8003816 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	f003 0308 	and.w	r3, r3, #8
 8003804:	2b00      	cmp	r3, #0
 8003806:	d006      	beq.n	8003816 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2208      	movs	r2, #8
 800380e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f8d7 	bl	80039c4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003816:	6a3b      	ldr	r3, [r7, #32]
 8003818:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d07b      	beq.n	8003918 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f003 0304 	and.w	r3, r3, #4
 8003826:	2b00      	cmp	r3, #0
 8003828:	d072      	beq.n	8003910 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800382a:	6a3b      	ldr	r3, [r7, #32]
 800382c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003830:	2b00      	cmp	r3, #0
 8003832:	d008      	beq.n	8003846 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800383e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003840:	f043 0301 	orr.w	r3, r3, #1
 8003844:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003846:	6a3b      	ldr	r3, [r7, #32]
 8003848:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800384c:	2b00      	cmp	r3, #0
 800384e:	d008      	beq.n	8003862 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	f043 0302 	orr.w	r3, r3, #2
 8003860:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003868:	2b00      	cmp	r3, #0
 800386a:	d008      	beq.n	800387e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	f043 0304 	orr.w	r3, r3, #4
 800387c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800387e:	6a3b      	ldr	r3, [r7, #32]
 8003880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003884:	2b00      	cmp	r3, #0
 8003886:	d043      	beq.n	8003910 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800388e:	2b00      	cmp	r3, #0
 8003890:	d03e      	beq.n	8003910 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003898:	2b60      	cmp	r3, #96	; 0x60
 800389a:	d02b      	beq.n	80038f4 <HAL_CAN_IRQHandler+0x32a>
 800389c:	2b60      	cmp	r3, #96	; 0x60
 800389e:	d82e      	bhi.n	80038fe <HAL_CAN_IRQHandler+0x334>
 80038a0:	2b50      	cmp	r3, #80	; 0x50
 80038a2:	d022      	beq.n	80038ea <HAL_CAN_IRQHandler+0x320>
 80038a4:	2b50      	cmp	r3, #80	; 0x50
 80038a6:	d82a      	bhi.n	80038fe <HAL_CAN_IRQHandler+0x334>
 80038a8:	2b40      	cmp	r3, #64	; 0x40
 80038aa:	d019      	beq.n	80038e0 <HAL_CAN_IRQHandler+0x316>
 80038ac:	2b40      	cmp	r3, #64	; 0x40
 80038ae:	d826      	bhi.n	80038fe <HAL_CAN_IRQHandler+0x334>
 80038b0:	2b30      	cmp	r3, #48	; 0x30
 80038b2:	d010      	beq.n	80038d6 <HAL_CAN_IRQHandler+0x30c>
 80038b4:	2b30      	cmp	r3, #48	; 0x30
 80038b6:	d822      	bhi.n	80038fe <HAL_CAN_IRQHandler+0x334>
 80038b8:	2b10      	cmp	r3, #16
 80038ba:	d002      	beq.n	80038c2 <HAL_CAN_IRQHandler+0x2f8>
 80038bc:	2b20      	cmp	r3, #32
 80038be:	d005      	beq.n	80038cc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80038c0:	e01d      	b.n	80038fe <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	f043 0308 	orr.w	r3, r3, #8
 80038c8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80038ca:	e019      	b.n	8003900 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80038cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ce:	f043 0310 	orr.w	r3, r3, #16
 80038d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80038d4:	e014      	b.n	8003900 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d8:	f043 0320 	orr.w	r3, r3, #32
 80038dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80038de:	e00f      	b.n	8003900 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80038e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80038e8:	e00a      	b.n	8003900 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80038f2:	e005      	b.n	8003900 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80038fc:	e000      	b.n	8003900 <HAL_CAN_IRQHandler+0x336>
            break;
 80038fe:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	699a      	ldr	r2, [r3, #24]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800390e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2204      	movs	r2, #4
 8003916:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	2b00      	cmp	r3, #0
 800391c:	d008      	beq.n	8003930 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	431a      	orrs	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7ff fa10 	bl	8002d50 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003930:	bf00      	nop
 8003932:	3728      	adds	r7, #40	; 0x28
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039f8:	2300      	movs	r3, #0
 80039fa:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a02:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 8003a04:	7bbb      	ldrb	r3, [r7, #14]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d002      	beq.n	8003a10 <HAL_CAN_ResetError+0x20>
 8003a0a:	7bbb      	ldrb	r3, [r7, #14]
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d103      	bne.n	8003a18 <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	625a      	str	r2, [r3, #36]	; 0x24
 8003a16:	e007      	b.n	8003a28 <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 8003a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3714      	adds	r7, #20
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
	...

08003a38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f003 0307 	and.w	r3, r3, #7
 8003a46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a48:	4b0c      	ldr	r3, [pc, #48]	; (8003a7c <__NVIC_SetPriorityGrouping+0x44>)
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a54:	4013      	ands	r3, r2
 8003a56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a6a:	4a04      	ldr	r2, [pc, #16]	; (8003a7c <__NVIC_SetPriorityGrouping+0x44>)
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	60d3      	str	r3, [r2, #12]
}
 8003a70:	bf00      	nop
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	e000ed00 	.word	0xe000ed00

08003a80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a84:	4b04      	ldr	r3, [pc, #16]	; (8003a98 <__NVIC_GetPriorityGrouping+0x18>)
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	0a1b      	lsrs	r3, r3, #8
 8003a8a:	f003 0307 	and.w	r3, r3, #7
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	e000ed00 	.word	0xe000ed00

08003a9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	db0b      	blt.n	8003ac6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003aae:	79fb      	ldrb	r3, [r7, #7]
 8003ab0:	f003 021f 	and.w	r2, r3, #31
 8003ab4:	4907      	ldr	r1, [pc, #28]	; (8003ad4 <__NVIC_EnableIRQ+0x38>)
 8003ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aba:	095b      	lsrs	r3, r3, #5
 8003abc:	2001      	movs	r0, #1
 8003abe:	fa00 f202 	lsl.w	r2, r0, r2
 8003ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	e000e100 	.word	0xe000e100

08003ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	4603      	mov	r3, r0
 8003ae0:	6039      	str	r1, [r7, #0]
 8003ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	db0a      	blt.n	8003b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	b2da      	uxtb	r2, r3
 8003af0:	490c      	ldr	r1, [pc, #48]	; (8003b24 <__NVIC_SetPriority+0x4c>)
 8003af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af6:	0112      	lsls	r2, r2, #4
 8003af8:	b2d2      	uxtb	r2, r2
 8003afa:	440b      	add	r3, r1
 8003afc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b00:	e00a      	b.n	8003b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	4908      	ldr	r1, [pc, #32]	; (8003b28 <__NVIC_SetPriority+0x50>)
 8003b08:	79fb      	ldrb	r3, [r7, #7]
 8003b0a:	f003 030f 	and.w	r3, r3, #15
 8003b0e:	3b04      	subs	r3, #4
 8003b10:	0112      	lsls	r2, r2, #4
 8003b12:	b2d2      	uxtb	r2, r2
 8003b14:	440b      	add	r3, r1
 8003b16:	761a      	strb	r2, [r3, #24]
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr
 8003b24:	e000e100 	.word	0xe000e100
 8003b28:	e000ed00 	.word	0xe000ed00

08003b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b089      	sub	sp, #36	; 0x24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	f1c3 0307 	rsb	r3, r3, #7
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	bf28      	it	cs
 8003b4a:	2304      	movcs	r3, #4
 8003b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	3304      	adds	r3, #4
 8003b52:	2b06      	cmp	r3, #6
 8003b54:	d902      	bls.n	8003b5c <NVIC_EncodePriority+0x30>
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	3b03      	subs	r3, #3
 8003b5a:	e000      	b.n	8003b5e <NVIC_EncodePriority+0x32>
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b60:	f04f 32ff 	mov.w	r2, #4294967295
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6a:	43da      	mvns	r2, r3
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	401a      	ands	r2, r3
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b74:	f04f 31ff 	mov.w	r1, #4294967295
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b7e:	43d9      	mvns	r1, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b84:	4313      	orrs	r3, r2
         );
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3724      	adds	r7, #36	; 0x24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
	...

08003b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ba4:	d301      	bcc.n	8003baa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e00f      	b.n	8003bca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003baa:	4a0a      	ldr	r2, [pc, #40]	; (8003bd4 <SysTick_Config+0x40>)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bb2:	210f      	movs	r1, #15
 8003bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bb8:	f7ff ff8e 	bl	8003ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bbc:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <SysTick_Config+0x40>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bc2:	4b04      	ldr	r3, [pc, #16]	; (8003bd4 <SysTick_Config+0x40>)
 8003bc4:	2207      	movs	r2, #7
 8003bc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	e000e010 	.word	0xe000e010

08003bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7ff ff29 	bl	8003a38 <__NVIC_SetPriorityGrouping>
}
 8003be6:	bf00      	nop
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b086      	sub	sp, #24
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	60b9      	str	r1, [r7, #8]
 8003bf8:	607a      	str	r2, [r7, #4]
 8003bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c00:	f7ff ff3e 	bl	8003a80 <__NVIC_GetPriorityGrouping>
 8003c04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	68b9      	ldr	r1, [r7, #8]
 8003c0a:	6978      	ldr	r0, [r7, #20]
 8003c0c:	f7ff ff8e 	bl	8003b2c <NVIC_EncodePriority>
 8003c10:	4602      	mov	r2, r0
 8003c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c16:	4611      	mov	r1, r2
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7ff ff5d 	bl	8003ad8 <__NVIC_SetPriority>
}
 8003c1e:	bf00      	nop
 8003c20:	3718      	adds	r7, #24
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b082      	sub	sp, #8
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7ff ff31 	bl	8003a9c <__NVIC_EnableIRQ>
}
 8003c3a:	bf00      	nop
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b082      	sub	sp, #8
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7ff ffa2 	bl	8003b94 <SysTick_Config>
 8003c50:	4603      	mov	r3, r0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b084      	sub	sp, #16
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c62:	2300      	movs	r3, #0
 8003c64:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d005      	beq.n	8003c7c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2204      	movs	r2, #4
 8003c74:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	73fb      	strb	r3, [r7, #15]
 8003c7a:	e027      	b.n	8003ccc <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 020e 	bic.w	r2, r2, #14
 8003c8a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 0201 	bic.w	r2, r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	fa01 f202 	lsl.w	r2, r1, r2
 8003caa:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d003      	beq.n	8003ccc <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	4798      	blx	r3
    } 
  }
  return status;
 8003ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cf2:	b087      	sub	sp, #28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8003d02:	2300      	movs	r3, #0
 8003d04:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 8003d06:	2300      	movs	r3, #0
 8003d08:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003d0a:	4b2f      	ldr	r3, [pc, #188]	; (8003dc8 <HAL_FLASH_Program+0xd8>)
 8003d0c:	7e1b      	ldrb	r3, [r3, #24]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d101      	bne.n	8003d16 <HAL_FLASH_Program+0x26>
 8003d12:	2302      	movs	r3, #2
 8003d14:	e054      	b.n	8003dc0 <HAL_FLASH_Program+0xd0>
 8003d16:	4b2c      	ldr	r3, [pc, #176]	; (8003dc8 <HAL_FLASH_Program+0xd8>)
 8003d18:	2201      	movs	r2, #1
 8003d1a:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003d1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003d20:	f000 f8b4 	bl	8003e8c <FLASH_WaitForLastOperation>
 8003d24:	4603      	mov	r3, r0
 8003d26:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003d28:	7dfb      	ldrb	r3, [r7, #23]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d144      	bne.n	8003db8 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d102      	bne.n	8003d3a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003d34:	2301      	movs	r3, #1
 8003d36:	757b      	strb	r3, [r7, #21]
 8003d38:	e007      	b.n	8003d4a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d102      	bne.n	8003d46 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003d40:	2302      	movs	r3, #2
 8003d42:	757b      	strb	r3, [r7, #21]
 8003d44:	e001      	b.n	8003d4a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003d46:	2304      	movs	r3, #4
 8003d48:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	75bb      	strb	r3, [r7, #22]
 8003d4e:	e02d      	b.n	8003dac <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003d50:	7dbb      	ldrb	r3, [r7, #22]
 8003d52:	005a      	lsls	r2, r3, #1
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	eb02 0c03 	add.w	ip, r2, r3
 8003d5a:	7dbb      	ldrb	r3, [r7, #22]
 8003d5c:	0119      	lsls	r1, r3, #4
 8003d5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d62:	f1c1 0620 	rsb	r6, r1, #32
 8003d66:	f1a1 0020 	sub.w	r0, r1, #32
 8003d6a:	fa22 f401 	lsr.w	r4, r2, r1
 8003d6e:	fa03 f606 	lsl.w	r6, r3, r6
 8003d72:	4334      	orrs	r4, r6
 8003d74:	fa23 f000 	lsr.w	r0, r3, r0
 8003d78:	4304      	orrs	r4, r0
 8003d7a:	fa23 f501 	lsr.w	r5, r3, r1
 8003d7e:	b2a3      	uxth	r3, r4
 8003d80:	4619      	mov	r1, r3
 8003d82:	4660      	mov	r0, ip
 8003d84:	f000 f866 	bl	8003e54 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003d88:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003d8c:	f000 f87e 	bl	8003e8c <FLASH_WaitForLastOperation>
 8003d90:	4603      	mov	r3, r0
 8003d92:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003d94:	4b0d      	ldr	r3, [pc, #52]	; (8003dcc <HAL_FLASH_Program+0xdc>)
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	4a0c      	ldr	r2, [pc, #48]	; (8003dcc <HAL_FLASH_Program+0xdc>)
 8003d9a:	f023 0301 	bic.w	r3, r3, #1
 8003d9e:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8003da0:	7dfb      	ldrb	r3, [r7, #23]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d107      	bne.n	8003db6 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003da6:	7dbb      	ldrb	r3, [r7, #22]
 8003da8:	3301      	adds	r3, #1
 8003daa:	75bb      	strb	r3, [r7, #22]
 8003dac:	7dba      	ldrb	r2, [r7, #22]
 8003dae:	7d7b      	ldrb	r3, [r7, #21]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d3cd      	bcc.n	8003d50 <HAL_FLASH_Program+0x60>
 8003db4:	e000      	b.n	8003db8 <HAL_FLASH_Program+0xc8>
      {
        break;
 8003db6:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003db8:	4b03      	ldr	r3, [pc, #12]	; (8003dc8 <HAL_FLASH_Program+0xd8>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	761a      	strb	r2, [r3, #24]

  return status;
 8003dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	371c      	adds	r7, #28
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dc8:	20000cd8 	.word	0x20000cd8
 8003dcc:	40022000 	.word	0x40022000

08003dd0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003dda:	4b0d      	ldr	r3, [pc, #52]	; (8003e10 <HAL_FLASH_Unlock+0x40>)
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00d      	beq.n	8003e02 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003de6:	4b0a      	ldr	r3, [pc, #40]	; (8003e10 <HAL_FLASH_Unlock+0x40>)
 8003de8:	4a0a      	ldr	r2, [pc, #40]	; (8003e14 <HAL_FLASH_Unlock+0x44>)
 8003dea:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003dec:	4b08      	ldr	r3, [pc, #32]	; (8003e10 <HAL_FLASH_Unlock+0x40>)
 8003dee:	4a0a      	ldr	r2, [pc, #40]	; (8003e18 <HAL_FLASH_Unlock+0x48>)
 8003df0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003df2:	4b07      	ldr	r3, [pc, #28]	; (8003e10 <HAL_FLASH_Unlock+0x40>)
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003e02:	79fb      	ldrb	r3, [r7, #7]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	40022000 	.word	0x40022000
 8003e14:	45670123 	.word	0x45670123
 8003e18:	cdef89ab 	.word	0xcdef89ab

08003e1c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003e20:	4b05      	ldr	r3, [pc, #20]	; (8003e38 <HAL_FLASH_Lock+0x1c>)
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	4a04      	ldr	r2, [pc, #16]	; (8003e38 <HAL_FLASH_Lock+0x1c>)
 8003e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e2a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr
 8003e38:	40022000 	.word	0x40022000

08003e3c <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8003e40:	4b03      	ldr	r3, [pc, #12]	; (8003e50 <HAL_FLASH_GetError+0x14>)
 8003e42:	69db      	ldr	r3, [r3, #28]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	20000cd8 	.word	0x20000cd8

08003e54 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003e60:	4b08      	ldr	r3, [pc, #32]	; (8003e84 <FLASH_Program_HalfWord+0x30>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003e66:	4b08      	ldr	r3, [pc, #32]	; (8003e88 <FLASH_Program_HalfWord+0x34>)
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	4a07      	ldr	r2, [pc, #28]	; (8003e88 <FLASH_Program_HalfWord+0x34>)
 8003e6c:	f043 0301 	orr.w	r3, r3, #1
 8003e70:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	887a      	ldrh	r2, [r7, #2]
 8003e76:	801a      	strh	r2, [r3, #0]
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	20000cd8 	.word	0x20000cd8
 8003e88:	40022000 	.word	0x40022000

08003e8c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003e94:	f7ff f818 	bl	8002ec8 <HAL_GetTick>
 8003e98:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003e9a:	e010      	b.n	8003ebe <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea2:	d00c      	beq.n	8003ebe <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d007      	beq.n	8003eba <FLASH_WaitForLastOperation+0x2e>
 8003eaa:	f7ff f80d 	bl	8002ec8 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d201      	bcs.n	8003ebe <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e01f      	b.n	8003efe <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003ebe:	4b12      	ldr	r3, [pc, #72]	; (8003f08 <FLASH_WaitForLastOperation+0x7c>)
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d0e8      	beq.n	8003e9c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003eca:	4b0f      	ldr	r3, [pc, #60]	; (8003f08 <FLASH_WaitForLastOperation+0x7c>)
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	f003 0320 	and.w	r3, r3, #32
 8003ed2:	2b20      	cmp	r3, #32
 8003ed4:	d102      	bne.n	8003edc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003ed6:	4b0c      	ldr	r3, [pc, #48]	; (8003f08 <FLASH_WaitForLastOperation+0x7c>)
 8003ed8:	2220      	movs	r2, #32
 8003eda:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003edc:	4b0a      	ldr	r3, [pc, #40]	; (8003f08 <FLASH_WaitForLastOperation+0x7c>)
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f003 0310 	and.w	r3, r3, #16
 8003ee4:	2b10      	cmp	r3, #16
 8003ee6:	d005      	beq.n	8003ef4 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003ee8:	4b07      	ldr	r3, [pc, #28]	; (8003f08 <FLASH_WaitForLastOperation+0x7c>)
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003ef0:	2b04      	cmp	r3, #4
 8003ef2:	d103      	bne.n	8003efc <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003ef4:	f000 f80a 	bl	8003f0c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e000      	b.n	8003efe <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	40022000 	.word	0x40022000

08003f0c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003f12:	2300      	movs	r3, #0
 8003f14:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003f16:	4b14      	ldr	r3, [pc, #80]	; (8003f68 <FLASH_SetErrorCode+0x5c>)
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	f003 0310 	and.w	r3, r3, #16
 8003f1e:	2b10      	cmp	r3, #16
 8003f20:	d109      	bne.n	8003f36 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003f22:	4b12      	ldr	r3, [pc, #72]	; (8003f6c <FLASH_SetErrorCode+0x60>)
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	f043 0302 	orr.w	r3, r3, #2
 8003f2a:	4a10      	ldr	r2, [pc, #64]	; (8003f6c <FLASH_SetErrorCode+0x60>)
 8003f2c:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f043 0310 	orr.w	r3, r3, #16
 8003f34:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003f36:	4b0c      	ldr	r3, [pc, #48]	; (8003f68 <FLASH_SetErrorCode+0x5c>)
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	f003 0304 	and.w	r3, r3, #4
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	d109      	bne.n	8003f56 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003f42:	4b0a      	ldr	r3, [pc, #40]	; (8003f6c <FLASH_SetErrorCode+0x60>)
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	f043 0301 	orr.w	r3, r3, #1
 8003f4a:	4a08      	ldr	r2, [pc, #32]	; (8003f6c <FLASH_SetErrorCode+0x60>)
 8003f4c:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f043 0304 	orr.w	r3, r3, #4
 8003f54:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003f56:	4a04      	ldr	r2, [pc, #16]	; (8003f68 <FLASH_SetErrorCode+0x5c>)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	60d3      	str	r3, [r2, #12]
}  
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr
 8003f68:	40022000 	.word	0x40022000
 8003f6c:	20000cd8 	.word	0x20000cd8

08003f70 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003f82:	4b2e      	ldr	r3, [pc, #184]	; (800403c <HAL_FLASHEx_Erase+0xcc>)
 8003f84:	7e1b      	ldrb	r3, [r3, #24]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d101      	bne.n	8003f8e <HAL_FLASHEx_Erase+0x1e>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	e052      	b.n	8004034 <HAL_FLASHEx_Erase+0xc4>
 8003f8e:	4b2b      	ldr	r3, [pc, #172]	; (800403c <HAL_FLASHEx_Erase+0xcc>)
 8003f90:	2201      	movs	r2, #1
 8003f92:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d115      	bne.n	8003fc8 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003f9c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003fa0:	f7ff ff74 	bl	8003e8c <FLASH_WaitForLastOperation>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d140      	bne.n	800402c <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8003faa:	f000 f84b 	bl	8004044 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003fae:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003fb2:	f7ff ff6b 	bl	8003e8c <FLASH_WaitForLastOperation>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003fba:	4b21      	ldr	r3, [pc, #132]	; (8004040 <HAL_FLASHEx_Erase+0xd0>)
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	4a20      	ldr	r2, [pc, #128]	; (8004040 <HAL_FLASHEx_Erase+0xd0>)
 8003fc0:	f023 0304 	bic.w	r3, r3, #4
 8003fc4:	6113      	str	r3, [r2, #16]
 8003fc6:	e031      	b.n	800402c <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003fc8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003fcc:	f7ff ff5e 	bl	8003e8c <FLASH_WaitForLastOperation>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d12a      	bne.n	800402c <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fdc:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	60bb      	str	r3, [r7, #8]
 8003fe4:	e019      	b.n	800401a <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003fe6:	68b8      	ldr	r0, [r7, #8]
 8003fe8:	f000 f846 	bl	8004078 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003fec:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ff0:	f7ff ff4c 	bl	8003e8c <FLASH_WaitForLastOperation>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003ff8:	4b11      	ldr	r3, [pc, #68]	; (8004040 <HAL_FLASHEx_Erase+0xd0>)
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	4a10      	ldr	r2, [pc, #64]	; (8004040 <HAL_FLASHEx_Erase+0xd0>)
 8003ffe:	f023 0302 	bic.w	r3, r3, #2
 8004002:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8004004:	7bfb      	ldrb	r3, [r7, #15]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	601a      	str	r2, [r3, #0]
            break;
 8004010:	e00c      	b.n	800402c <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004018:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	02da      	lsls	r2, r3, #11
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	4413      	add	r3, r2
 8004026:	68ba      	ldr	r2, [r7, #8]
 8004028:	429a      	cmp	r2, r3
 800402a:	d3dc      	bcc.n	8003fe6 <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800402c:	4b03      	ldr	r3, [pc, #12]	; (800403c <HAL_FLASHEx_Erase+0xcc>)
 800402e:	2200      	movs	r2, #0
 8004030:	761a      	strb	r2, [r3, #24]

  return status;
 8004032:	7bfb      	ldrb	r3, [r7, #15]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	20000cd8 	.word	0x20000cd8
 8004040:	40022000 	.word	0x40022000

08004044 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004048:	4b09      	ldr	r3, [pc, #36]	; (8004070 <FLASH_MassErase+0x2c>)
 800404a:	2200      	movs	r2, #0
 800404c:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800404e:	4b09      	ldr	r3, [pc, #36]	; (8004074 <FLASH_MassErase+0x30>)
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	4a08      	ldr	r2, [pc, #32]	; (8004074 <FLASH_MassErase+0x30>)
 8004054:	f043 0304 	orr.w	r3, r3, #4
 8004058:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800405a:	4b06      	ldr	r3, [pc, #24]	; (8004074 <FLASH_MassErase+0x30>)
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	4a05      	ldr	r2, [pc, #20]	; (8004074 <FLASH_MassErase+0x30>)
 8004060:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004064:	6113      	str	r3, [r2, #16]
}
 8004066:	bf00      	nop
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr
 8004070:	20000cd8 	.word	0x20000cd8
 8004074:	40022000 	.word	0x40022000

08004078 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004080:	4b0b      	ldr	r3, [pc, #44]	; (80040b0 <FLASH_PageErase+0x38>)
 8004082:	2200      	movs	r2, #0
 8004084:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004086:	4b0b      	ldr	r3, [pc, #44]	; (80040b4 <FLASH_PageErase+0x3c>)
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	4a0a      	ldr	r2, [pc, #40]	; (80040b4 <FLASH_PageErase+0x3c>)
 800408c:	f043 0302 	orr.w	r3, r3, #2
 8004090:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8004092:	4a08      	ldr	r2, [pc, #32]	; (80040b4 <FLASH_PageErase+0x3c>)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004098:	4b06      	ldr	r3, [pc, #24]	; (80040b4 <FLASH_PageErase+0x3c>)
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	4a05      	ldr	r2, [pc, #20]	; (80040b4 <FLASH_PageErase+0x3c>)
 800409e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040a2:	6113      	str	r3, [r2, #16]
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	20000cd8 	.word	0x20000cd8
 80040b4:	40022000 	.word	0x40022000

080040b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b087      	sub	sp, #28
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040c2:	2300      	movs	r3, #0
 80040c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040c6:	e14e      	b.n	8004366 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	2101      	movs	r1, #1
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	fa01 f303 	lsl.w	r3, r1, r3
 80040d4:	4013      	ands	r3, r2
 80040d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 8140 	beq.w	8004360 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f003 0303 	and.w	r3, r3, #3
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d005      	beq.n	80040f8 <HAL_GPIO_Init+0x40>
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f003 0303 	and.w	r3, r3, #3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d130      	bne.n	800415a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	2203      	movs	r2, #3
 8004104:	fa02 f303 	lsl.w	r3, r2, r3
 8004108:	43db      	mvns	r3, r3
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	4013      	ands	r3, r2
 800410e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	68da      	ldr	r2, [r3, #12]
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	fa02 f303 	lsl.w	r3, r2, r3
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	4313      	orrs	r3, r2
 8004120:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800412e:	2201      	movs	r2, #1
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	fa02 f303 	lsl.w	r3, r2, r3
 8004136:	43db      	mvns	r3, r3
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	4013      	ands	r3, r2
 800413c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	091b      	lsrs	r3, r3, #4
 8004144:	f003 0201 	and.w	r2, r3, #1
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	fa02 f303 	lsl.w	r3, r2, r3
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	4313      	orrs	r3, r2
 8004152:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f003 0303 	and.w	r3, r3, #3
 8004162:	2b03      	cmp	r3, #3
 8004164:	d017      	beq.n	8004196 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	005b      	lsls	r3, r3, #1
 8004170:	2203      	movs	r2, #3
 8004172:	fa02 f303 	lsl.w	r3, r2, r3
 8004176:	43db      	mvns	r3, r3
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	4013      	ands	r3, r2
 800417c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	689a      	ldr	r2, [r3, #8]
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	fa02 f303 	lsl.w	r3, r2, r3
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	4313      	orrs	r3, r2
 800418e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f003 0303 	and.w	r3, r3, #3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d123      	bne.n	80041ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	08da      	lsrs	r2, r3, #3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	3208      	adds	r2, #8
 80041aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	220f      	movs	r2, #15
 80041ba:	fa02 f303 	lsl.w	r3, r2, r3
 80041be:	43db      	mvns	r3, r3
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	4013      	ands	r3, r2
 80041c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	691a      	ldr	r2, [r3, #16]
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f003 0307 	and.w	r3, r3, #7
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	fa02 f303 	lsl.w	r3, r2, r3
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	4313      	orrs	r3, r2
 80041da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	08da      	lsrs	r2, r3, #3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3208      	adds	r2, #8
 80041e4:	6939      	ldr	r1, [r7, #16]
 80041e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	2203      	movs	r2, #3
 80041f6:	fa02 f303 	lsl.w	r3, r2, r3
 80041fa:	43db      	mvns	r3, r3
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	4013      	ands	r3, r2
 8004200:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f003 0203 	and.w	r2, r3, #3
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	fa02 f303 	lsl.w	r3, r2, r3
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	4313      	orrs	r3, r2
 8004216:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004226:	2b00      	cmp	r3, #0
 8004228:	f000 809a 	beq.w	8004360 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800422c:	4b55      	ldr	r3, [pc, #340]	; (8004384 <HAL_GPIO_Init+0x2cc>)
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	4a54      	ldr	r2, [pc, #336]	; (8004384 <HAL_GPIO_Init+0x2cc>)
 8004232:	f043 0301 	orr.w	r3, r3, #1
 8004236:	6193      	str	r3, [r2, #24]
 8004238:	4b52      	ldr	r3, [pc, #328]	; (8004384 <HAL_GPIO_Init+0x2cc>)
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	60bb      	str	r3, [r7, #8]
 8004242:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004244:	4a50      	ldr	r2, [pc, #320]	; (8004388 <HAL_GPIO_Init+0x2d0>)
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	089b      	lsrs	r3, r3, #2
 800424a:	3302      	adds	r3, #2
 800424c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004250:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	f003 0303 	and.w	r3, r3, #3
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	220f      	movs	r2, #15
 800425c:	fa02 f303 	lsl.w	r3, r2, r3
 8004260:	43db      	mvns	r3, r3
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	4013      	ands	r3, r2
 8004266:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800426e:	d013      	beq.n	8004298 <HAL_GPIO_Init+0x1e0>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a46      	ldr	r2, [pc, #280]	; (800438c <HAL_GPIO_Init+0x2d4>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d00d      	beq.n	8004294 <HAL_GPIO_Init+0x1dc>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a45      	ldr	r2, [pc, #276]	; (8004390 <HAL_GPIO_Init+0x2d8>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d007      	beq.n	8004290 <HAL_GPIO_Init+0x1d8>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a44      	ldr	r2, [pc, #272]	; (8004394 <HAL_GPIO_Init+0x2dc>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d101      	bne.n	800428c <HAL_GPIO_Init+0x1d4>
 8004288:	2303      	movs	r3, #3
 800428a:	e006      	b.n	800429a <HAL_GPIO_Init+0x1e2>
 800428c:	2305      	movs	r3, #5
 800428e:	e004      	b.n	800429a <HAL_GPIO_Init+0x1e2>
 8004290:	2302      	movs	r3, #2
 8004292:	e002      	b.n	800429a <HAL_GPIO_Init+0x1e2>
 8004294:	2301      	movs	r3, #1
 8004296:	e000      	b.n	800429a <HAL_GPIO_Init+0x1e2>
 8004298:	2300      	movs	r3, #0
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	f002 0203 	and.w	r2, r2, #3
 80042a0:	0092      	lsls	r2, r2, #2
 80042a2:	4093      	lsls	r3, r2
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80042aa:	4937      	ldr	r1, [pc, #220]	; (8004388 <HAL_GPIO_Init+0x2d0>)
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	089b      	lsrs	r3, r3, #2
 80042b0:	3302      	adds	r3, #2
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042b8:	4b37      	ldr	r3, [pc, #220]	; (8004398 <HAL_GPIO_Init+0x2e0>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	43db      	mvns	r3, r3
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	4013      	ands	r3, r2
 80042c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d003      	beq.n	80042dc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	4313      	orrs	r3, r2
 80042da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80042dc:	4a2e      	ldr	r2, [pc, #184]	; (8004398 <HAL_GPIO_Init+0x2e0>)
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042e2:	4b2d      	ldr	r3, [pc, #180]	; (8004398 <HAL_GPIO_Init+0x2e0>)
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	43db      	mvns	r3, r3
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	4013      	ands	r3, r2
 80042f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	4313      	orrs	r3, r2
 8004304:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004306:	4a24      	ldr	r2, [pc, #144]	; (8004398 <HAL_GPIO_Init+0x2e0>)
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800430c:	4b22      	ldr	r3, [pc, #136]	; (8004398 <HAL_GPIO_Init+0x2e0>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	43db      	mvns	r3, r3
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	4013      	ands	r3, r2
 800431a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d003      	beq.n	8004330 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	4313      	orrs	r3, r2
 800432e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004330:	4a19      	ldr	r2, [pc, #100]	; (8004398 <HAL_GPIO_Init+0x2e0>)
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004336:	4b18      	ldr	r3, [pc, #96]	; (8004398 <HAL_GPIO_Init+0x2e0>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	43db      	mvns	r3, r3
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	4013      	ands	r3, r2
 8004344:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d003      	beq.n	800435a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4313      	orrs	r3, r2
 8004358:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800435a:	4a0f      	ldr	r2, [pc, #60]	; (8004398 <HAL_GPIO_Init+0x2e0>)
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	3301      	adds	r3, #1
 8004364:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	fa22 f303 	lsr.w	r3, r2, r3
 8004370:	2b00      	cmp	r3, #0
 8004372:	f47f aea9 	bne.w	80040c8 <HAL_GPIO_Init+0x10>
  }
}
 8004376:	bf00      	nop
 8004378:	bf00      	nop
 800437a:	371c      	adds	r7, #28
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr
 8004384:	40021000 	.word	0x40021000
 8004388:	40010000 	.word	0x40010000
 800438c:	48000400 	.word	0x48000400
 8004390:	48000800 	.word	0x48000800
 8004394:	48000c00 	.word	0x48000c00
 8004398:	40010400 	.word	0x40010400

0800439c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	460b      	mov	r3, r1
 80043a6:	807b      	strh	r3, [r7, #2]
 80043a8:	4613      	mov	r3, r2
 80043aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043ac:	787b      	ldrb	r3, [r7, #1]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043b2:	887a      	ldrh	r2, [r7, #2]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043b8:	e002      	b.n	80043c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043ba:	887a      	ldrh	r2, [r7, #2]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	460b      	mov	r3, r1
 80043d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80043de:	887a      	ldrh	r2, [r7, #2]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	4013      	ands	r3, r2
 80043e4:	041a      	lsls	r2, r3, #16
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	43d9      	mvns	r1, r3
 80043ea:	887b      	ldrh	r3, [r7, #2]
 80043ec:	400b      	ands	r3, r1
 80043ee:	431a      	orrs	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	619a      	str	r2, [r3, #24]
}
 80043f4:	bf00      	nop
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e081      	b.n	8004516 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d106      	bne.n	800442c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7fd ffc2 	bl	80023b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2224      	movs	r2, #36	; 0x24
 8004430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 0201 	bic.w	r2, r2, #1
 8004442:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004450:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689a      	ldr	r2, [r3, #8]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004460:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d107      	bne.n	800447a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	689a      	ldr	r2, [r3, #8]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004476:	609a      	str	r2, [r3, #8]
 8004478:	e006      	b.n	8004488 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	689a      	ldr	r2, [r3, #8]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004486:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	2b02      	cmp	r3, #2
 800448e:	d104      	bne.n	800449a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004498:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	6812      	ldr	r2, [r2, #0]
 80044a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80044a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68da      	ldr	r2, [r3, #12]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	691a      	ldr	r2, [r3, #16]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	69d9      	ldr	r1, [r3, #28]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a1a      	ldr	r2, [r3, #32]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	430a      	orrs	r2, r1
 80044e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0201 	orr.w	r2, r2, #1
 80044f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2220      	movs	r2, #32
 8004502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
	...

08004520 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b088      	sub	sp, #32
 8004524:	af02      	add	r7, sp, #8
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	607a      	str	r2, [r7, #4]
 800452a:	461a      	mov	r2, r3
 800452c:	460b      	mov	r3, r1
 800452e:	817b      	strh	r3, [r7, #10]
 8004530:	4613      	mov	r3, r2
 8004532:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b20      	cmp	r3, #32
 800453e:	f040 80da 	bne.w	80046f6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004548:	2b01      	cmp	r3, #1
 800454a:	d101      	bne.n	8004550 <HAL_I2C_Master_Transmit+0x30>
 800454c:	2302      	movs	r3, #2
 800454e:	e0d3      	b.n	80046f8 <HAL_I2C_Master_Transmit+0x1d8>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004558:	f7fe fcb6 	bl	8002ec8 <HAL_GetTick>
 800455c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	2319      	movs	r3, #25
 8004564:	2201      	movs	r2, #1
 8004566:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f000 ff03 	bl	8005376 <I2C_WaitOnFlagUntilTimeout>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e0be      	b.n	80046f8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2221      	movs	r2, #33	; 0x21
 800457e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2210      	movs	r2, #16
 8004586:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	893a      	ldrh	r2, [r7, #8]
 800459a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	2bff      	cmp	r3, #255	; 0xff
 80045aa:	d90e      	bls.n	80045ca <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	22ff      	movs	r2, #255	; 0xff
 80045b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	8979      	ldrh	r1, [r7, #10]
 80045ba:	4b51      	ldr	r3, [pc, #324]	; (8004700 <HAL_I2C_Master_Transmit+0x1e0>)
 80045bc:	9300      	str	r3, [sp, #0]
 80045be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f001 f912 	bl	80057ec <I2C_TransferConfig>
 80045c8:	e06c      	b.n	80046a4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	8979      	ldrh	r1, [r7, #10]
 80045dc:	4b48      	ldr	r3, [pc, #288]	; (8004700 <HAL_I2C_Master_Transmit+0x1e0>)
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f001 f901 	bl	80057ec <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80045ea:	e05b      	b.n	80046a4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	6a39      	ldr	r1, [r7, #32]
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f000 ff0f 	bl	8005414 <I2C_WaitOnTXISFlagUntilTimeout>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e07b      	b.n	80046f8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	781a      	ldrb	r2, [r3, #0]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	1c5a      	adds	r2, r3, #1
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461a:	b29b      	uxth	r3, r3
 800461c:	3b01      	subs	r3, #1
 800461e:	b29a      	uxth	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004628:	3b01      	subs	r3, #1
 800462a:	b29a      	uxth	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004634:	b29b      	uxth	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d034      	beq.n	80046a4 <HAL_I2C_Master_Transmit+0x184>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800463e:	2b00      	cmp	r3, #0
 8004640:	d130      	bne.n	80046a4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	9300      	str	r3, [sp, #0]
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	2200      	movs	r2, #0
 800464a:	2180      	movs	r1, #128	; 0x80
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 fe92 	bl	8005376 <I2C_WaitOnFlagUntilTimeout>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d001      	beq.n	800465c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e04d      	b.n	80046f8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004660:	b29b      	uxth	r3, r3
 8004662:	2bff      	cmp	r3, #255	; 0xff
 8004664:	d90e      	bls.n	8004684 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	22ff      	movs	r2, #255	; 0xff
 800466a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004670:	b2da      	uxtb	r2, r3
 8004672:	8979      	ldrh	r1, [r7, #10]
 8004674:	2300      	movs	r3, #0
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f001 f8b5 	bl	80057ec <I2C_TransferConfig>
 8004682:	e00f      	b.n	80046a4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004688:	b29a      	uxth	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004692:	b2da      	uxtb	r2, r3
 8004694:	8979      	ldrh	r1, [r7, #10]
 8004696:	2300      	movs	r3, #0
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f001 f8a4 	bl	80057ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d19e      	bne.n	80045ec <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	6a39      	ldr	r1, [r7, #32]
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 fef5 	bl	80054a2 <I2C_WaitOnSTOPFlagUntilTimeout>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e01a      	b.n	80046f8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2220      	movs	r2, #32
 80046c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6859      	ldr	r1, [r3, #4]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	4b0b      	ldr	r3, [pc, #44]	; (8004704 <HAL_I2C_Master_Transmit+0x1e4>)
 80046d6:	400b      	ands	r3, r1
 80046d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2220      	movs	r2, #32
 80046de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046f2:	2300      	movs	r3, #0
 80046f4:	e000      	b.n	80046f8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80046f6:	2302      	movs	r3, #2
  }
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3718      	adds	r7, #24
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	80002000 	.word	0x80002000
 8004704:	fe00e800 	.word	0xfe00e800

08004708 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b088      	sub	sp, #32
 800470c:	af02      	add	r7, sp, #8
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	607a      	str	r2, [r7, #4]
 8004712:	461a      	mov	r2, r3
 8004714:	460b      	mov	r3, r1
 8004716:	817b      	strh	r3, [r7, #10]
 8004718:	4613      	mov	r3, r2
 800471a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b20      	cmp	r3, #32
 8004726:	f040 80db 	bne.w	80048e0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004730:	2b01      	cmp	r3, #1
 8004732:	d101      	bne.n	8004738 <HAL_I2C_Master_Receive+0x30>
 8004734:	2302      	movs	r3, #2
 8004736:	e0d4      	b.n	80048e2 <HAL_I2C_Master_Receive+0x1da>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004740:	f7fe fbc2 	bl	8002ec8 <HAL_GetTick>
 8004744:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	9300      	str	r3, [sp, #0]
 800474a:	2319      	movs	r3, #25
 800474c:	2201      	movs	r2, #1
 800474e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f000 fe0f 	bl	8005376 <I2C_WaitOnFlagUntilTimeout>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e0bf      	b.n	80048e2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2222      	movs	r2, #34	; 0x22
 8004766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2210      	movs	r2, #16
 800476e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	893a      	ldrh	r2, [r7, #8]
 8004782:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800478e:	b29b      	uxth	r3, r3
 8004790:	2bff      	cmp	r3, #255	; 0xff
 8004792:	d90e      	bls.n	80047b2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	22ff      	movs	r2, #255	; 0xff
 8004798:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800479e:	b2da      	uxtb	r2, r3
 80047a0:	8979      	ldrh	r1, [r7, #10]
 80047a2:	4b52      	ldr	r3, [pc, #328]	; (80048ec <HAL_I2C_Master_Receive+0x1e4>)
 80047a4:	9300      	str	r3, [sp, #0]
 80047a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f001 f81e 	bl	80057ec <I2C_TransferConfig>
 80047b0:	e06d      	b.n	800488e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c0:	b2da      	uxtb	r2, r3
 80047c2:	8979      	ldrh	r1, [r7, #10]
 80047c4:	4b49      	ldr	r3, [pc, #292]	; (80048ec <HAL_I2C_Master_Receive+0x1e4>)
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f001 f80d 	bl	80057ec <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80047d2:	e05c      	b.n	800488e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	6a39      	ldr	r1, [r7, #32]
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f000 fea5 	bl	8005528 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e07c      	b.n	80048e2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f2:	b2d2      	uxtb	r2, r2
 80047f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fa:	1c5a      	adds	r2, r3, #1
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004804:	3b01      	subs	r3, #1
 8004806:	b29a      	uxth	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004810:	b29b      	uxth	r3, r3
 8004812:	3b01      	subs	r3, #1
 8004814:	b29a      	uxth	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481e:	b29b      	uxth	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	d034      	beq.n	800488e <HAL_I2C_Master_Receive+0x186>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004828:	2b00      	cmp	r3, #0
 800482a:	d130      	bne.n	800488e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	6a3b      	ldr	r3, [r7, #32]
 8004832:	2200      	movs	r2, #0
 8004834:	2180      	movs	r1, #128	; 0x80
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 fd9d 	bl	8005376 <I2C_WaitOnFlagUntilTimeout>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e04d      	b.n	80048e2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484a:	b29b      	uxth	r3, r3
 800484c:	2bff      	cmp	r3, #255	; 0xff
 800484e:	d90e      	bls.n	800486e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	22ff      	movs	r2, #255	; 0xff
 8004854:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800485a:	b2da      	uxtb	r2, r3
 800485c:	8979      	ldrh	r1, [r7, #10]
 800485e:	2300      	movs	r3, #0
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f000 ffc0 	bl	80057ec <I2C_TransferConfig>
 800486c:	e00f      	b.n	800488e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004872:	b29a      	uxth	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800487c:	b2da      	uxtb	r2, r3
 800487e:	8979      	ldrh	r1, [r7, #10]
 8004880:	2300      	movs	r3, #0
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 ffaf 	bl	80057ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004892:	b29b      	uxth	r3, r3
 8004894:	2b00      	cmp	r3, #0
 8004896:	d19d      	bne.n	80047d4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	6a39      	ldr	r1, [r7, #32]
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 fe00 	bl	80054a2 <I2C_WaitOnSTOPFlagUntilTimeout>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e01a      	b.n	80048e2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2220      	movs	r2, #32
 80048b2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6859      	ldr	r1, [r3, #4]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	4b0c      	ldr	r3, [pc, #48]	; (80048f0 <HAL_I2C_Master_Receive+0x1e8>)
 80048c0:	400b      	ands	r3, r1
 80048c2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2220      	movs	r2, #32
 80048c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80048dc:	2300      	movs	r3, #0
 80048de:	e000      	b.n	80048e2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80048e0:	2302      	movs	r3, #2
  }
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3718      	adds	r7, #24
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	80002400 	.word	0x80002400
 80048f0:	fe00e800 	.word	0xfe00e800

080048f4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004910:	2b00      	cmp	r3, #0
 8004912:	d005      	beq.n	8004920 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004918:	68ba      	ldr	r2, [r7, #8]
 800491a:	68f9      	ldr	r1, [r7, #12]
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	4798      	blx	r3
  }
}
 8004920:	bf00      	nop
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00f      	beq.n	800496a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00a      	beq.n	800496a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004958:	f043 0201 	orr.w	r2, r3, #1
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004968:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00f      	beq.n	8004994 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00a      	beq.n	8004994 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004982:	f043 0208 	orr.w	r2, r3, #8
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004992:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00f      	beq.n	80049be <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00a      	beq.n	80049be <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ac:	f043 0202 	orr.w	r2, r3, #2
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049bc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f003 030b 	and.w	r3, r3, #11
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80049ce:	68f9      	ldr	r1, [r7, #12]
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 fb77 	bl	80050c4 <I2C_ITError>
  }
}
 80049d6:	bf00      	nop
 80049d8:	3718      	adds	r7, #24
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049de:	b480      	push	{r7}
 80049e0:	b083      	sub	sp, #12
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr

080049f2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b083      	sub	sp, #12
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80049fa:	bf00      	nop
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b083      	sub	sp, #12
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
 8004a0e:	460b      	mov	r3, r1
 8004a10:	70fb      	strb	r3, [r7, #3]
 8004a12:	4613      	mov	r3, r2
 8004a14:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004a16:	bf00      	nop
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a22:	b480      	push	{r7}
 8004a24:	b083      	sub	sp, #12
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004a2a:	bf00      	nop
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004a36:	b480      	push	{r7}
 8004a38:	b083      	sub	sp, #12
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004a3e:	bf00      	nop
 8004a40:	370c      	adds	r7, #12
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b083      	sub	sp, #12
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004a52:	bf00      	nop
 8004a54:	370c      	adds	r7, #12
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr

08004a5e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b086      	sub	sp, #24
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	60f8      	str	r0, [r7, #12]
 8004a66:	60b9      	str	r1, [r7, #8]
 8004a68:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d101      	bne.n	8004a82 <I2C_Slave_ISR_IT+0x24>
 8004a7e:	2302      	movs	r3, #2
 8004a80:	e0e1      	b.n	8004c46 <I2C_Slave_ISR_IT+0x1e8>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	f003 0320 	and.w	r3, r3, #32
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d008      	beq.n	8004aa6 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004a9e:	6939      	ldr	r1, [r7, #16]
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f000 f9b5 	bl	8004e10 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	f003 0310 	and.w	r3, r3, #16
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d04b      	beq.n	8004b48 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d046      	beq.n	8004b48 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d128      	bne.n	8004b16 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	2b28      	cmp	r3, #40	; 0x28
 8004ace:	d108      	bne.n	8004ae2 <I2C_Slave_ISR_IT+0x84>
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ad6:	d104      	bne.n	8004ae2 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004ad8:	6939      	ldr	r1, [r7, #16]
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f000 fa9e 	bl	800501c <I2C_ITListenCplt>
 8004ae0:	e031      	b.n	8004b46 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b29      	cmp	r3, #41	; 0x29
 8004aec:	d10e      	bne.n	8004b0c <I2C_Slave_ISR_IT+0xae>
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004af4:	d00a      	beq.n	8004b0c <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2210      	movs	r2, #16
 8004afc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f000 fbf7 	bl	80052f2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	f000 f926 	bl	8004d56 <I2C_ITSlaveSeqCplt>
 8004b0a:	e01c      	b.n	8004b46 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2210      	movs	r2, #16
 8004b12:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004b14:	e08f      	b.n	8004c36 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2210      	movs	r2, #16
 8004b1c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b22:	f043 0204 	orr.w	r2, r3, #4
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d003      	beq.n	8004b38 <I2C_Slave_ISR_IT+0xda>
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b36:	d17e      	bne.n	8004c36 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f000 fac0 	bl	80050c4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004b44:	e077      	b.n	8004c36 <I2C_Slave_ISR_IT+0x1d8>
 8004b46:	e076      	b.n	8004c36 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	f003 0304 	and.w	r3, r3, #4
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d02f      	beq.n	8004bb2 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d02a      	beq.n	8004bb2 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d018      	beq.n	8004b98 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b70:	b2d2      	uxtb	r2, r2
 8004b72:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b78:	1c5a      	adds	r2, r3, #1
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b82:	3b01      	subs	r3, #1
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	3b01      	subs	r3, #1
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d14b      	bne.n	8004c3a <I2C_Slave_ISR_IT+0x1dc>
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ba8:	d047      	beq.n	8004c3a <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f000 f8d3 	bl	8004d56 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004bb0:	e043      	b.n	8004c3a <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	f003 0308 	and.w	r3, r3, #8
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d009      	beq.n	8004bd0 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d004      	beq.n	8004bd0 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004bc6:	6939      	ldr	r1, [r7, #16]
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f000 f840 	bl	8004c4e <I2C_ITAddrCplt>
 8004bce:	e035      	b.n	8004c3c <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d030      	beq.n	8004c3c <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d02b      	beq.n	8004c3c <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d018      	beq.n	8004c20 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf2:	781a      	ldrb	r2, [r3, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfe:	1c5a      	adds	r2, r3, #1
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c16:	3b01      	subs	r3, #1
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	851a      	strh	r2, [r3, #40]	; 0x28
 8004c1e:	e00d      	b.n	8004c3c <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c26:	d002      	beq.n	8004c2e <I2C_Slave_ISR_IT+0x1d0>
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d106      	bne.n	8004c3c <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f000 f891 	bl	8004d56 <I2C_ITSlaveSeqCplt>
 8004c34:	e002      	b.n	8004c3c <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8004c36:	bf00      	nop
 8004c38:	e000      	b.n	8004c3c <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8004c3a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3718      	adds	r7, #24
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b084      	sub	sp, #16
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
 8004c56:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c64:	2b28      	cmp	r3, #40	; 0x28
 8004c66:	d16a      	bne.n	8004d3e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	0c1b      	lsrs	r3, r3, #16
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	0c1b      	lsrs	r3, r3, #16
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004c86:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c94:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004ca2:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d138      	bne.n	8004d1e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004cac:	897b      	ldrh	r3, [r7, #10]
 8004cae:	09db      	lsrs	r3, r3, #7
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	89bb      	ldrh	r3, [r7, #12]
 8004cb4:	4053      	eors	r3, r2
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	f003 0306 	and.w	r3, r3, #6
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d11c      	bne.n	8004cfa <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004cc0:	897b      	ldrh	r3, [r7, #10]
 8004cc2:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cc8:	1c5a      	adds	r2, r3, #1
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d13b      	bne.n	8004d4e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2208      	movs	r2, #8
 8004ce2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004cec:	89ba      	ldrh	r2, [r7, #12]
 8004cee:	7bfb      	ldrb	r3, [r7, #15]
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7ff fe87 	bl	8004a06 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004cf8:	e029      	b.n	8004d4e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004cfa:	893b      	ldrh	r3, [r7, #8]
 8004cfc:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004cfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 fda4 	bl	8005850 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004d10:	89ba      	ldrh	r2, [r7, #12]
 8004d12:	7bfb      	ldrb	r3, [r7, #15]
 8004d14:	4619      	mov	r1, r3
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7ff fe75 	bl	8004a06 <HAL_I2C_AddrCallback>
}
 8004d1c:	e017      	b.n	8004d4e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004d1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 fd94 	bl	8005850 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004d30:	89ba      	ldrh	r2, [r7, #12]
 8004d32:	7bfb      	ldrb	r3, [r7, #15]
 8004d34:	4619      	mov	r1, r3
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f7ff fe65 	bl	8004a06 <HAL_I2C_AddrCallback>
}
 8004d3c:	e007      	b.n	8004d4e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2208      	movs	r2, #8
 8004d44:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004d4e:	bf00      	nop
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b084      	sub	sp, #16
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d008      	beq.n	8004d8a <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d86:	601a      	str	r2, [r3, #0]
 8004d88:	e00c      	b.n	8004da4 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d007      	beq.n	8004da4 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004da2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	2b29      	cmp	r3, #41	; 0x29
 8004dae:	d112      	bne.n	8004dd6 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2228      	movs	r2, #40	; 0x28
 8004db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2221      	movs	r2, #33	; 0x21
 8004dbc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 fd45 	bl	8005850 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7ff fe05 	bl	80049de <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004dd4:	e017      	b.n	8004e06 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b2a      	cmp	r3, #42	; 0x2a
 8004de0:	d111      	bne.n	8004e06 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2228      	movs	r2, #40	; 0x28
 8004de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2222      	movs	r2, #34	; 0x22
 8004dee:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004df0:	2102      	movs	r1, #2
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 fd2c 	bl	8005850 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f7ff fdf6 	bl	80049f2 <HAL_I2C_SlaveRxCpltCallback>
}
 8004e06:	bf00      	nop
 8004e08:	3710      	adds	r7, #16
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
	...

08004e10 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b086      	sub	sp, #24
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e2c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2220      	movs	r2, #32
 8004e34:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004e36:	7bfb      	ldrb	r3, [r7, #15]
 8004e38:	2b21      	cmp	r3, #33	; 0x21
 8004e3a:	d002      	beq.n	8004e42 <I2C_ITSlaveCplt+0x32>
 8004e3c:	7bfb      	ldrb	r3, [r7, #15]
 8004e3e:	2b29      	cmp	r3, #41	; 0x29
 8004e40:	d108      	bne.n	8004e54 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004e42:	f248 0101 	movw	r1, #32769	; 0x8001
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 fd02 	bl	8005850 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2221      	movs	r2, #33	; 0x21
 8004e50:	631a      	str	r2, [r3, #48]	; 0x30
 8004e52:	e00d      	b.n	8004e70 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004e54:	7bfb      	ldrb	r3, [r7, #15]
 8004e56:	2b22      	cmp	r3, #34	; 0x22
 8004e58:	d002      	beq.n	8004e60 <I2C_ITSlaveCplt+0x50>
 8004e5a:	7bfb      	ldrb	r3, [r7, #15]
 8004e5c:	2b2a      	cmp	r3, #42	; 0x2a
 8004e5e:	d107      	bne.n	8004e70 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004e60:	f248 0102 	movw	r1, #32770	; 0x8002
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 fcf3 	bl	8005850 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2222      	movs	r2, #34	; 0x22
 8004e6e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e7e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6859      	ldr	r1, [r3, #4]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	4b62      	ldr	r3, [pc, #392]	; (8005014 <I2C_ITSlaveCplt+0x204>)
 8004e8c:	400b      	ands	r3, r1
 8004e8e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 fa2e 	bl	80052f2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d013      	beq.n	8004ec8 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004eae:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d01f      	beq.n	8004ef8 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ec6:	e017      	b.n	8004ef8 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d012      	beq.n	8004ef8 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ee0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d006      	beq.n	8004ef8 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f003 0304 	and.w	r3, r3, #4
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d020      	beq.n	8004f44 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f023 0304 	bic.w	r3, r3, #4
 8004f08:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	b2d2      	uxtb	r2, r2
 8004f16:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1c:	1c5a      	adds	r2, r3, #1
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00c      	beq.n	8004f44 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d005      	beq.n	8004f5a <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f52:	f043 0204 	orr.w	r2, r3, #4
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d010      	beq.n	8004f92 <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f74:	4619      	mov	r1, r3
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f8a4 	bl	80050c4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b28      	cmp	r3, #40	; 0x28
 8004f86:	d141      	bne.n	800500c <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004f88:	6979      	ldr	r1, [r7, #20]
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f846 	bl	800501c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004f90:	e03c      	b.n	800500c <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f96:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f9a:	d014      	beq.n	8004fc6 <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f7ff feda 	bl	8004d56 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a1c      	ldr	r2, [pc, #112]	; (8005018 <I2C_ITSlaveCplt+0x208>)
 8004fa6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2220      	movs	r2, #32
 8004fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f7ff fd2f 	bl	8004a22 <HAL_I2C_ListenCpltCallback>
}
 8004fc4:	e022      	b.n	800500c <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b22      	cmp	r3, #34	; 0x22
 8004fd0:	d10e      	bne.n	8004ff0 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2220      	movs	r2, #32
 8004fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f7ff fd02 	bl	80049f2 <HAL_I2C_SlaveRxCpltCallback>
}
 8004fee:	e00d      	b.n	800500c <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2220      	movs	r2, #32
 8004ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7ff fce9 	bl	80049de <HAL_I2C_SlaveTxCpltCallback>
}
 800500c:	bf00      	nop
 800500e:	3718      	adds	r7, #24
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	fe00e800 	.word	0xfe00e800
 8005018:	ffff0000 	.word	0xffff0000

0800501c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a25      	ldr	r2, [pc, #148]	; (80050c0 <I2C_ITListenCplt+0xa4>)
 800502a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2220      	movs	r2, #32
 8005036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	f003 0304 	and.w	r3, r3, #4
 800504e:	2b00      	cmp	r3, #0
 8005050:	d022      	beq.n	8005098 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505c:	b2d2      	uxtb	r2, r2
 800505e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005064:	1c5a      	adds	r2, r3, #1
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800506e:	2b00      	cmp	r3, #0
 8005070:	d012      	beq.n	8005098 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005076:	3b01      	subs	r3, #1
 8005078:	b29a      	uxth	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005082:	b29b      	uxth	r3, r3
 8005084:	3b01      	subs	r3, #1
 8005086:	b29a      	uxth	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005090:	f043 0204 	orr.w	r2, r3, #4
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005098:	f248 0103 	movw	r1, #32771	; 0x8003
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 fbd7 	bl	8005850 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2210      	movs	r2, #16
 80050a8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7ff fcb5 	bl	8004a22 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80050b8:	bf00      	nop
 80050ba:	3708      	adds	r7, #8
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	ffff0000 	.word	0xffff0000

080050c4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050d4:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a6d      	ldr	r2, [pc, #436]	; (8005298 <I2C_ITError+0x1d4>)
 80050e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	431a      	orrs	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80050f6:	7bfb      	ldrb	r3, [r7, #15]
 80050f8:	2b28      	cmp	r3, #40	; 0x28
 80050fa:	d005      	beq.n	8005108 <I2C_ITError+0x44>
 80050fc:	7bfb      	ldrb	r3, [r7, #15]
 80050fe:	2b29      	cmp	r3, #41	; 0x29
 8005100:	d002      	beq.n	8005108 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005102:	7bfb      	ldrb	r3, [r7, #15]
 8005104:	2b2a      	cmp	r3, #42	; 0x2a
 8005106:	d10b      	bne.n	8005120 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005108:	2103      	movs	r1, #3
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 fba0 	bl	8005850 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2228      	movs	r2, #40	; 0x28
 8005114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a60      	ldr	r2, [pc, #384]	; (800529c <I2C_ITError+0x1d8>)
 800511c:	635a      	str	r2, [r3, #52]	; 0x34
 800511e:	e030      	b.n	8005182 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005120:	f248 0103 	movw	r1, #32771	; 0x8003
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 fb93 	bl	8005850 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f8e1 	bl	80052f2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005136:	b2db      	uxtb	r3, r3
 8005138:	2b60      	cmp	r3, #96	; 0x60
 800513a:	d01f      	beq.n	800517c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2220      	movs	r2, #32
 8005140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	f003 0320 	and.w	r3, r3, #32
 800514e:	2b20      	cmp	r3, #32
 8005150:	d114      	bne.n	800517c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	f003 0310 	and.w	r3, r3, #16
 800515c:	2b10      	cmp	r3, #16
 800515e:	d109      	bne.n	8005174 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2210      	movs	r2, #16
 8005166:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800516c:	f043 0204 	orr.w	r2, r3, #4
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2220      	movs	r2, #32
 800517a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005186:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518c:	2b00      	cmp	r3, #0
 800518e:	d039      	beq.n	8005204 <I2C_ITError+0x140>
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	2b11      	cmp	r3, #17
 8005194:	d002      	beq.n	800519c <I2C_ITError+0xd8>
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	2b21      	cmp	r3, #33	; 0x21
 800519a:	d133      	bne.n	8005204 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051aa:	d107      	bne.n	80051bc <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80051ba:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7fe fd88 	bl	8003cd6 <HAL_DMA_GetState>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d017      	beq.n	80051fc <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d0:	4a33      	ldr	r2, [pc, #204]	; (80052a0 <I2C_ITError+0x1dc>)
 80051d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7fe fd3a 	bl	8003c5a <HAL_DMA_Abort_IT>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d04d      	beq.n	8005288 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051f6:	4610      	mov	r0, r2
 80051f8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80051fa:	e045      	b.n	8005288 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 f851 	bl	80052a4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005202:	e041      	b.n	8005288 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005208:	2b00      	cmp	r3, #0
 800520a:	d039      	beq.n	8005280 <I2C_ITError+0x1bc>
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	2b12      	cmp	r3, #18
 8005210:	d002      	beq.n	8005218 <I2C_ITError+0x154>
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	2b22      	cmp	r3, #34	; 0x22
 8005216:	d133      	bne.n	8005280 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005222:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005226:	d107      	bne.n	8005238 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005236:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800523c:	4618      	mov	r0, r3
 800523e:	f7fe fd4a 	bl	8003cd6 <HAL_DMA_GetState>
 8005242:	4603      	mov	r3, r0
 8005244:	2b01      	cmp	r3, #1
 8005246:	d017      	beq.n	8005278 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800524c:	4a14      	ldr	r2, [pc, #80]	; (80052a0 <I2C_ITError+0x1dc>)
 800524e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525c:	4618      	mov	r0, r3
 800525e:	f7fe fcfc 	bl	8003c5a <HAL_DMA_Abort_IT>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d011      	beq.n	800528c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800526c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005272:	4610      	mov	r0, r2
 8005274:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005276:	e009      	b.n	800528c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 f813 	bl	80052a4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800527e:	e005      	b.n	800528c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 f80f 	bl	80052a4 <I2C_TreatErrorCallback>
  }
}
 8005286:	e002      	b.n	800528e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005288:	bf00      	nop
 800528a:	e000      	b.n	800528e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800528c:	bf00      	nop
}
 800528e:	bf00      	nop
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	ffff0000 	.word	0xffff0000
 800529c:	08004a5f 	.word	0x08004a5f
 80052a0:	0800533b 	.word	0x0800533b

080052a4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b60      	cmp	r3, #96	; 0x60
 80052b6:	d10e      	bne.n	80052d6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2220      	movs	r2, #32
 80052bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f7ff fbbb 	bl	8004a4a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80052d4:	e009      	b.n	80052ea <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f7ff fba6 	bl	8004a36 <HAL_I2C_ErrorCallback>
}
 80052ea:	bf00      	nop
 80052ec:	3708      	adds	r7, #8
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80052f2:	b480      	push	{r7}
 80052f4:	b083      	sub	sp, #12
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	2b02      	cmp	r3, #2
 8005306:	d103      	bne.n	8005310 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2200      	movs	r2, #0
 800530e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b01      	cmp	r3, #1
 800531c:	d007      	beq.n	800532e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	699a      	ldr	r2, [r3, #24]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f042 0201 	orr.w	r2, r2, #1
 800532c:	619a      	str	r2, [r3, #24]
  }
}
 800532e:	bf00      	nop
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b084      	sub	sp, #16
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534c:	2b00      	cmp	r3, #0
 800534e:	d003      	beq.n	8005358 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005354:	2200      	movs	r2, #0
 8005356:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800535c:	2b00      	cmp	r3, #0
 800535e:	d003      	beq.n	8005368 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005364:	2200      	movs	r2, #0
 8005366:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f7ff ff9b 	bl	80052a4 <I2C_TreatErrorCallback>
}
 800536e:	bf00      	nop
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b084      	sub	sp, #16
 800537a:	af00      	add	r7, sp, #0
 800537c:	60f8      	str	r0, [r7, #12]
 800537e:	60b9      	str	r1, [r7, #8]
 8005380:	603b      	str	r3, [r7, #0]
 8005382:	4613      	mov	r3, r2
 8005384:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005386:	e031      	b.n	80053ec <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800538e:	d02d      	beq.n	80053ec <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005390:	f7fd fd9a 	bl	8002ec8 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	429a      	cmp	r2, r3
 800539e:	d302      	bcc.n	80053a6 <I2C_WaitOnFlagUntilTimeout+0x30>
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d122      	bne.n	80053ec <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	699a      	ldr	r2, [r3, #24]
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	4013      	ands	r3, r2
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	bf0c      	ite	eq
 80053b6:	2301      	moveq	r3, #1
 80053b8:	2300      	movne	r3, #0
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	461a      	mov	r2, r3
 80053be:	79fb      	ldrb	r3, [r7, #7]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d113      	bne.n	80053ec <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c8:	f043 0220 	orr.w	r2, r3, #32
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2220      	movs	r2, #32
 80053d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e00f      	b.n	800540c <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	699a      	ldr	r2, [r3, #24]
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	4013      	ands	r3, r2
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	bf0c      	ite	eq
 80053fc:	2301      	moveq	r3, #1
 80053fe:	2300      	movne	r3, #0
 8005400:	b2db      	uxtb	r3, r3
 8005402:	461a      	mov	r2, r3
 8005404:	79fb      	ldrb	r3, [r7, #7]
 8005406:	429a      	cmp	r2, r3
 8005408:	d0be      	beq.n	8005388 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005420:	e033      	b.n	800548a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	68b9      	ldr	r1, [r7, #8]
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f000 f900 	bl	800562c <I2C_IsErrorOccurred>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e031      	b.n	800549a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800543c:	d025      	beq.n	800548a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800543e:	f7fd fd43 	bl	8002ec8 <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	68ba      	ldr	r2, [r7, #8]
 800544a:	429a      	cmp	r2, r3
 800544c:	d302      	bcc.n	8005454 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d11a      	bne.n	800548a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b02      	cmp	r3, #2
 8005460:	d013      	beq.n	800548a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005466:	f043 0220 	orr.w	r2, r3, #32
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2220      	movs	r2, #32
 8005472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e007      	b.n	800549a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b02      	cmp	r3, #2
 8005496:	d1c4      	bne.n	8005422 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b084      	sub	sp, #16
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	60f8      	str	r0, [r7, #12]
 80054aa:	60b9      	str	r1, [r7, #8]
 80054ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054ae:	e02f      	b.n	8005510 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	68b9      	ldr	r1, [r7, #8]
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f000 f8b9 	bl	800562c <I2C_IsErrorOccurred>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d001      	beq.n	80054c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e02d      	b.n	8005520 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054c4:	f7fd fd00 	bl	8002ec8 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d302      	bcc.n	80054da <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d11a      	bne.n	8005510 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	f003 0320 	and.w	r3, r3, #32
 80054e4:	2b20      	cmp	r3, #32
 80054e6:	d013      	beq.n	8005510 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ec:	f043 0220 	orr.w	r2, r3, #32
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2220      	movs	r2, #32
 80054f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e007      	b.n	8005520 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	f003 0320 	and.w	r3, r3, #32
 800551a:	2b20      	cmp	r3, #32
 800551c:	d1c8      	bne.n	80054b0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005534:	e06b      	b.n	800560e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	68b9      	ldr	r1, [r7, #8]
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f000 f876 	bl	800562c <I2C_IsErrorOccurred>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e069      	b.n	800561e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	f003 0320 	and.w	r3, r3, #32
 8005554:	2b20      	cmp	r3, #32
 8005556:	d138      	bne.n	80055ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	f003 0304 	and.w	r3, r3, #4
 8005562:	2b04      	cmp	r3, #4
 8005564:	d105      	bne.n	8005572 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800556a:	2b00      	cmp	r3, #0
 800556c:	d001      	beq.n	8005572 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800556e:	2300      	movs	r3, #0
 8005570:	e055      	b.n	800561e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	f003 0310 	and.w	r3, r3, #16
 800557c:	2b10      	cmp	r3, #16
 800557e:	d107      	bne.n	8005590 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2210      	movs	r2, #16
 8005586:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2204      	movs	r2, #4
 800558c:	645a      	str	r2, [r3, #68]	; 0x44
 800558e:	e002      	b.n	8005596 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2220      	movs	r2, #32
 800559c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	6859      	ldr	r1, [r3, #4]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	4b1f      	ldr	r3, [pc, #124]	; (8005628 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80055aa:	400b      	ands	r3, r1
 80055ac:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2220      	movs	r2, #32
 80055b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e029      	b.n	800561e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ca:	f7fd fc7d 	bl	8002ec8 <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d302      	bcc.n	80055e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d116      	bne.n	800560e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	f003 0304 	and.w	r3, r3, #4
 80055ea:	2b04      	cmp	r3, #4
 80055ec:	d00f      	beq.n	800560e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f2:	f043 0220 	orr.w	r2, r3, #32
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2220      	movs	r2, #32
 80055fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e007      	b.n	800561e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	f003 0304 	and.w	r3, r3, #4
 8005618:	2b04      	cmp	r3, #4
 800561a:	d18c      	bne.n	8005536 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	fe00e800 	.word	0xfe00e800

0800562c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b08a      	sub	sp, #40	; 0x28
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005638:	2300      	movs	r3, #0
 800563a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005646:	2300      	movs	r3, #0
 8005648:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	f003 0310 	and.w	r3, r3, #16
 8005654:	2b00      	cmp	r3, #0
 8005656:	d068      	beq.n	800572a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2210      	movs	r2, #16
 800565e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005660:	e049      	b.n	80056f6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005668:	d045      	beq.n	80056f6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800566a:	f7fd fc2d 	bl	8002ec8 <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	68ba      	ldr	r2, [r7, #8]
 8005676:	429a      	cmp	r2, r3
 8005678:	d302      	bcc.n	8005680 <I2C_IsErrorOccurred+0x54>
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d13a      	bne.n	80056f6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800568a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005692:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800569e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056a2:	d121      	bne.n	80056e8 <I2C_IsErrorOccurred+0xbc>
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056aa:	d01d      	beq.n	80056e8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80056ac:	7cfb      	ldrb	r3, [r7, #19]
 80056ae:	2b20      	cmp	r3, #32
 80056b0:	d01a      	beq.n	80056e8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056c0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80056c2:	f7fd fc01 	bl	8002ec8 <HAL_GetTick>
 80056c6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056c8:	e00e      	b.n	80056e8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80056ca:	f7fd fbfd 	bl	8002ec8 <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	2b19      	cmp	r3, #25
 80056d6:	d907      	bls.n	80056e8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80056d8:	6a3b      	ldr	r3, [r7, #32]
 80056da:	f043 0320 	orr.w	r3, r3, #32
 80056de:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80056e6:	e006      	b.n	80056f6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	f003 0320 	and.w	r3, r3, #32
 80056f2:	2b20      	cmp	r3, #32
 80056f4:	d1e9      	bne.n	80056ca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	f003 0320 	and.w	r3, r3, #32
 8005700:	2b20      	cmp	r3, #32
 8005702:	d003      	beq.n	800570c <I2C_IsErrorOccurred+0xe0>
 8005704:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005708:	2b00      	cmp	r3, #0
 800570a:	d0aa      	beq.n	8005662 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800570c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005710:	2b00      	cmp	r3, #0
 8005712:	d103      	bne.n	800571c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2220      	movs	r2, #32
 800571a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800571c:	6a3b      	ldr	r3, [r7, #32]
 800571e:	f043 0304 	orr.w	r3, r3, #4
 8005722:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00b      	beq.n	8005754 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800573c:	6a3b      	ldr	r3, [r7, #32]
 800573e:	f043 0301 	orr.w	r3, r3, #1
 8005742:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f44f 7280 	mov.w	r2, #256	; 0x100
 800574c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00b      	beq.n	8005776 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800575e:	6a3b      	ldr	r3, [r7, #32]
 8005760:	f043 0308 	orr.w	r3, r3, #8
 8005764:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800576e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00b      	beq.n	8005798 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005780:	6a3b      	ldr	r3, [r7, #32]
 8005782:	f043 0302 	orr.w	r3, r3, #2
 8005786:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005790:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005798:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800579c:	2b00      	cmp	r3, #0
 800579e:	d01c      	beq.n	80057da <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f7ff fda6 	bl	80052f2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6859      	ldr	r1, [r3, #4]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	4b0d      	ldr	r3, [pc, #52]	; (80057e8 <I2C_IsErrorOccurred+0x1bc>)
 80057b2:	400b      	ands	r3, r1
 80057b4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057ba:	6a3b      	ldr	r3, [r7, #32]
 80057bc:	431a      	orrs	r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2220      	movs	r2, #32
 80057c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80057da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3728      	adds	r7, #40	; 0x28
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	fe00e800 	.word	0xfe00e800

080057ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	607b      	str	r3, [r7, #4]
 80057f6:	460b      	mov	r3, r1
 80057f8:	817b      	strh	r3, [r7, #10]
 80057fa:	4613      	mov	r3, r2
 80057fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057fe:	897b      	ldrh	r3, [r7, #10]
 8005800:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005804:	7a7b      	ldrb	r3, [r7, #9]
 8005806:	041b      	lsls	r3, r3, #16
 8005808:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800580c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005812:	6a3b      	ldr	r3, [r7, #32]
 8005814:	4313      	orrs	r3, r2
 8005816:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800581a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	685a      	ldr	r2, [r3, #4]
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	0d5b      	lsrs	r3, r3, #21
 8005826:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800582a:	4b08      	ldr	r3, [pc, #32]	; (800584c <I2C_TransferConfig+0x60>)
 800582c:	430b      	orrs	r3, r1
 800582e:	43db      	mvns	r3, r3
 8005830:	ea02 0103 	and.w	r1, r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	430a      	orrs	r2, r1
 800583c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800583e:	bf00      	nop
 8005840:	371c      	adds	r7, #28
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	03ff63ff 	.word	0x03ff63ff

08005850 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	460b      	mov	r3, r1
 800585a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800585c:	2300      	movs	r3, #0
 800585e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005860:	887b      	ldrh	r3, [r7, #2]
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00f      	beq.n	800588a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005870:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005878:	b2db      	uxtb	r3, r3
 800587a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800587e:	2b28      	cmp	r3, #40	; 0x28
 8005880:	d003      	beq.n	800588a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005888:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800588a:	887b      	ldrh	r3, [r7, #2]
 800588c:	f003 0302 	and.w	r3, r3, #2
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00f      	beq.n	80058b4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800589a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80058a8:	2b28      	cmp	r3, #40	; 0x28
 80058aa:	d003      	beq.n	80058b4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80058b2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80058b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	da03      	bge.n	80058c4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80058c2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80058c4:	887b      	ldrh	r3, [r7, #2]
 80058c6:	2b10      	cmp	r3, #16
 80058c8:	d103      	bne.n	80058d2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80058d0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80058d2:	887b      	ldrh	r3, [r7, #2]
 80058d4:	2b20      	cmp	r3, #32
 80058d6:	d103      	bne.n	80058e0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f043 0320 	orr.w	r3, r3, #32
 80058de:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80058e0:	887b      	ldrh	r3, [r7, #2]
 80058e2:	2b40      	cmp	r3, #64	; 0x40
 80058e4:	d103      	bne.n	80058ee <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058ec:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	6819      	ldr	r1, [r3, #0]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	43da      	mvns	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	400a      	ands	r2, r1
 80058fe:	601a      	str	r2, [r3, #0]
}
 8005900:	bf00      	nop
 8005902:	3714      	adds	r7, #20
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <Custom_I2C_RequestMemoryRead>:


HAL_StatusTypeDef Custom_I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint8_t command, uint8_t startAddress, uint8_t addressStep, uint8_t nMemAddressRead,
											   uint32_t Timeout, uint32_t Tickstart)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af02      	add	r7, sp, #8
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	4608      	mov	r0, r1
 8005916:	4611      	mov	r1, r2
 8005918:	461a      	mov	r2, r3
 800591a:	4603      	mov	r3, r0
 800591c:	807b      	strh	r3, [r7, #2]
 800591e:	460b      	mov	r3, r1
 8005920:	707b      	strb	r3, [r7, #1]
 8005922:	4613      	mov	r3, r2
 8005924:	703b      	strb	r3, [r7, #0]

									//The_num_of_bytes
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)4, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005926:	8879      	ldrh	r1, [r7, #2]
 8005928:	4b28      	ldr	r3, [pc, #160]	; (80059cc <Custom_I2C_RequestMemoryRead+0xc0>)
 800592a:	9300      	str	r3, [sp, #0]
 800592c:	2300      	movs	r3, #0
 800592e:	2204      	movs	r2, #4
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f7ff ff5b 	bl	80057ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005936:	69fa      	ldr	r2, [r7, #28]
 8005938:	69b9      	ldr	r1, [r7, #24]
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7ff fd6a 	bl	8005414 <I2C_WaitOnTXISFlagUntilTimeout>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d001      	beq.n	800594a <Custom_I2C_RequestMemoryRead+0x3e>
  {
    return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e03b      	b.n	80059c2 <Custom_I2C_RequestMemoryRead+0xb6>
  }

// "mem_write"
  hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(command);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	787a      	ldrb	r2, [r7, #1]
 8005950:	629a      	str	r2, [r3, #40]	; 0x28


  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005952:	69fa      	ldr	r2, [r7, #28]
 8005954:	69b9      	ldr	r1, [r7, #24]
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f7ff fd5c 	bl	8005414 <I2C_WaitOnTXISFlagUntilTimeout>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d001      	beq.n	8005966 <Custom_I2C_RequestMemoryRead+0x5a>
  {
    return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e02d      	b.n	80059c2 <Custom_I2C_RequestMemoryRead+0xb6>
  }
  hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(startAddress);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	783a      	ldrb	r2, [r7, #0]
 800596c:	629a      	str	r2, [r3, #40]	; 0x28


  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800596e:	69fa      	ldr	r2, [r7, #28]
 8005970:	69b9      	ldr	r1, [r7, #24]
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f7ff fd4e 	bl	8005414 <I2C_WaitOnTXISFlagUntilTimeout>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d001      	beq.n	8005982 <Custom_I2C_RequestMemoryRead+0x76>
  {
    return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e01f      	b.n	80059c2 <Custom_I2C_RequestMemoryRead+0xb6>
  }
  hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(addressStep);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	7c3a      	ldrb	r2, [r7, #16]
 8005988:	629a      	str	r2, [r3, #40]	; 0x28


  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800598a:	69fa      	ldr	r2, [r7, #28]
 800598c:	69b9      	ldr	r1, [r7, #24]
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f7ff fd40 	bl	8005414 <I2C_WaitOnTXISFlagUntilTimeout>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d001      	beq.n	800599e <Custom_I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e011      	b.n	80059c2 <Custom_I2C_RequestMemoryRead+0xb6>
  }
  hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(nMemAddressRead);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	7d3a      	ldrb	r2, [r7, #20]
 80059a4:	629a      	str	r2, [r3, #40]	; 0x28
//

  /* Wait until [Transfer Complete] flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	9300      	str	r3, [sp, #0]
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	2200      	movs	r2, #0
 80059ae:	2140      	movs	r1, #64	; 0x40
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f7ff fce0 	bl	8005376 <I2C_WaitOnFlagUntilTimeout>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d001      	beq.n	80059c0 <Custom_I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e000      	b.n	80059c2 <Custom_I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	80002000 	.word	0x80002000

080059d0 <Custom_HAL_I2C_Mem_Read>:


HAL_StatusTypeDef Custom_HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
										  uint8_t command, uint8_t startAddress, uint8_t addressStep, uint8_t nMemAddressRead,
										  uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b088      	sub	sp, #32
 80059d4:	af04      	add	r7, sp, #16
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	4608      	mov	r0, r1
 80059da:	4611      	mov	r1, r2
 80059dc:	461a      	mov	r2, r3
 80059de:	4603      	mov	r3, r0
 80059e0:	807b      	strh	r3, [r7, #2]
 80059e2:	460b      	mov	r3, r1
 80059e4:	707b      	strb	r3, [r7, #1]
 80059e6:	4613      	mov	r3, r2
 80059e8:	703b      	strb	r3, [r7, #0]
  uint32_t tickstart;

  /* Check the parameters */
  //assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b20      	cmp	r3, #32
 80059f4:	f040 8101 	bne.w	8005bfa <Custom_HAL_I2C_Mem_Read+0x22a>
  {
    if ((pData == NULL) || (Size == 0U))
 80059f8:	6a3b      	ldr	r3, [r7, #32]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d002      	beq.n	8005a04 <Custom_HAL_I2C_Mem_Read+0x34>
 80059fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d105      	bne.n	8005a10 <Custom_HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a0a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e0f5      	b.n	8005bfc <Custom_HAL_I2C_Mem_Read+0x22c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d101      	bne.n	8005a1e <Custom_HAL_I2C_Mem_Read+0x4e>
 8005a1a:	2302      	movs	r3, #2
 8005a1c:	e0ee      	b.n	8005bfc <Custom_HAL_I2C_Mem_Read+0x22c>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a26:	f7fd fa4f 	bl	8002ec8 <HAL_GetTick>
 8005a2a:	60f8      	str	r0, [r7, #12]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	9300      	str	r3, [sp, #0]
 8005a30:	2319      	movs	r3, #25
 8005a32:	2201      	movs	r2, #1
 8005a34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f7ff fc9c 	bl	8005376 <I2C_WaitOnFlagUntilTimeout>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d001      	beq.n	8005a48 <Custom_HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e0d9      	b.n	8005bfc <Custom_HAL_I2C_Mem_Read+0x22c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2222      	movs	r2, #34	; 0x22
 8005a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2240      	movs	r2, #64	; 0x40
 8005a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a3a      	ldr	r2, [r7, #32]
 8005a62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005a68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if(Custom_I2C_RequestMemoryRead(hi2c, DevAddress,
 8005a70:	7838      	ldrb	r0, [r7, #0]
 8005a72:	787a      	ldrb	r2, [r7, #1]
 8005a74:	8879      	ldrh	r1, [r7, #2]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	9303      	str	r3, [sp, #12]
 8005a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7c:	9302      	str	r3, [sp, #8]
 8005a7e:	7f3b      	ldrb	r3, [r7, #28]
 8005a80:	9301      	str	r3, [sp, #4]
 8005a82:	7e3b      	ldrb	r3, [r7, #24]
 8005a84:	9300      	str	r3, [sp, #0]
 8005a86:	4603      	mov	r3, r0
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f7ff ff3f 	bl	800590c <Custom_I2C_RequestMemoryRead>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d005      	beq.n	8005aa0 <Custom_HAL_I2C_Mem_Read+0xd0>
									addressStep, nMemAddressRead,

									Timeout, tickstart) != HAL_OK)
    {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e0ad      	b.n	8005bfc <Custom_HAL_I2C_Mem_Read+0x22c>
    }


    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	2bff      	cmp	r3, #255	; 0xff
 8005aa8:	d90e      	bls.n	8005ac8 <Custom_HAL_I2C_Mem_Read+0xf8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	22ff      	movs	r2, #255	; 0xff
 8005aae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ab4:	b2da      	uxtb	r2, r3
 8005ab6:	8879      	ldrh	r1, [r7, #2]
 8005ab8:	4b52      	ldr	r3, [pc, #328]	; (8005c04 <Custom_HAL_I2C_Mem_Read+0x234>)
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f7ff fe93 	bl	80057ec <I2C_TransferConfig>
 8005ac6:	e00f      	b.n	8005ae8 <Custom_HAL_I2C_Mem_Read+0x118>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ad6:	b2da      	uxtb	r2, r3
 8005ad8:	8879      	ldrh	r1, [r7, #2]
 8005ada:	4b4a      	ldr	r3, [pc, #296]	; (8005c04 <Custom_HAL_I2C_Mem_Read+0x234>)
 8005adc:	9300      	str	r3, [sp, #0]
 8005ade:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f7ff fe82 	bl	80057ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aee:	2200      	movs	r2, #0
 8005af0:	2104      	movs	r1, #4
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f7ff fc3f 	bl	8005376 <I2C_WaitOnFlagUntilTimeout>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d001      	beq.n	8005b02 <Custom_HAL_I2C_Mem_Read+0x132>
      {
        return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e07c      	b.n	8005bfc <Custom_HAL_I2C_Mem_Read+0x22c>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0c:	b2d2      	uxtb	r2, r2
 8005b0e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b14:	1c5a      	adds	r2, r3, #1
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d034      	beq.n	8005ba8 <Custom_HAL_I2C_Mem_Read+0x1d8>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d130      	bne.n	8005ba8 <Custom_HAL_I2C_Mem_Read+0x1d8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	9300      	str	r3, [sp, #0]
 8005b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	2180      	movs	r1, #128	; 0x80
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f7ff fc10 	bl	8005376 <I2C_WaitOnFlagUntilTimeout>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d001      	beq.n	8005b60 <Custom_HAL_I2C_Mem_Read+0x190>
        {
          return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e04d      	b.n	8005bfc <Custom_HAL_I2C_Mem_Read+0x22c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	2bff      	cmp	r3, #255	; 0xff
 8005b68:	d90e      	bls.n	8005b88 <Custom_HAL_I2C_Mem_Read+0x1b8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	22ff      	movs	r2, #255	; 0xff
 8005b6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b74:	b2da      	uxtb	r2, r3
 8005b76:	8879      	ldrh	r1, [r7, #2]
 8005b78:	2300      	movs	r3, #0
 8005b7a:	9300      	str	r3, [sp, #0]
 8005b7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f7ff fe33 	bl	80057ec <I2C_TransferConfig>
 8005b86:	e00f      	b.n	8005ba8 <Custom_HAL_I2C_Mem_Read+0x1d8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b96:	b2da      	uxtb	r2, r3
 8005b98:	8879      	ldrh	r1, [r7, #2]
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f7ff fe22 	bl	80057ec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d19a      	bne.n	8005ae8 <Custom_HAL_I2C_Mem_Read+0x118>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f7ff fc73 	bl	80054a2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d001      	beq.n	8005bc6 <Custom_HAL_I2C_Mem_Read+0x1f6>
    {
      return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e01a      	b.n	8005bfc <Custom_HAL_I2C_Mem_Read+0x22c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2220      	movs	r2, #32
 8005bcc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	6859      	ldr	r1, [r3, #4]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	4b0b      	ldr	r3, [pc, #44]	; (8005c08 <Custom_HAL_I2C_Mem_Read+0x238>)
 8005bda:	400b      	ands	r3, r1
 8005bdc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2220      	movs	r2, #32
 8005be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	e000      	b.n	8005bfc <Custom_HAL_I2C_Mem_Read+0x22c>
  }
  else
  {
    return HAL_BUSY;
 8005bfa:	2302      	movs	r3, #2
  }
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	80002400 	.word	0x80002400
 8005c08:	fe00e800 	.word	0xfe00e800

08005c0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b20      	cmp	r3, #32
 8005c20:	d138      	bne.n	8005c94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d101      	bne.n	8005c30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005c2c:	2302      	movs	r3, #2
 8005c2e:	e032      	b.n	8005c96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2224      	movs	r2, #36	; 0x24
 8005c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 0201 	bic.w	r2, r2, #1
 8005c4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	6819      	ldr	r1, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	683a      	ldr	r2, [r7, #0]
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f042 0201 	orr.w	r2, r2, #1
 8005c7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2220      	movs	r2, #32
 8005c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c90:	2300      	movs	r3, #0
 8005c92:	e000      	b.n	8005c96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005c94:	2302      	movs	r3, #2
  }
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005ca2:	b480      	push	{r7}
 8005ca4:	b085      	sub	sp, #20
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
 8005caa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b20      	cmp	r3, #32
 8005cb6:	d139      	bne.n	8005d2c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d101      	bne.n	8005cc6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005cc2:	2302      	movs	r3, #2
 8005cc4:	e033      	b.n	8005d2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2224      	movs	r2, #36	; 0x24
 8005cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f022 0201 	bic.w	r2, r2, #1
 8005ce4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005cf4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	021b      	lsls	r3, r3, #8
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f042 0201 	orr.w	r2, r2, #1
 8005d16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	e000      	b.n	8005d2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005d2c:	2302      	movs	r3, #2
  }
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3714      	adds	r7, #20
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
	...

08005d3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d4c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d102      	bne.n	8005d62 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	f001 b823 	b.w	8006da8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	f000 817d 	beq.w	8006072 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005d78:	4bbc      	ldr	r3, [pc, #752]	; (800606c <HAL_RCC_OscConfig+0x330>)
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f003 030c 	and.w	r3, r3, #12
 8005d80:	2b04      	cmp	r3, #4
 8005d82:	d00c      	beq.n	8005d9e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005d84:	4bb9      	ldr	r3, [pc, #740]	; (800606c <HAL_RCC_OscConfig+0x330>)
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	f003 030c 	and.w	r3, r3, #12
 8005d8c:	2b08      	cmp	r3, #8
 8005d8e:	d15c      	bne.n	8005e4a <HAL_RCC_OscConfig+0x10e>
 8005d90:	4bb6      	ldr	r3, [pc, #728]	; (800606c <HAL_RCC_OscConfig+0x330>)
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d9c:	d155      	bne.n	8005e4a <HAL_RCC_OscConfig+0x10e>
 8005d9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005da2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005da6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8005daa:	fa93 f3a3 	rbit	r3, r3
 8005dae:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005db2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005db6:	fab3 f383 	clz	r3, r3
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	095b      	lsrs	r3, r3, #5
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	f043 0301 	orr.w	r3, r3, #1
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d102      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x94>
 8005dca:	4ba8      	ldr	r3, [pc, #672]	; (800606c <HAL_RCC_OscConfig+0x330>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	e015      	b.n	8005dfc <HAL_RCC_OscConfig+0xc0>
 8005dd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005dd4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dd8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8005ddc:	fa93 f3a3 	rbit	r3, r3
 8005de0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005de4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005de8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005dec:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8005df0:	fa93 f3a3 	rbit	r3, r3
 8005df4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8005df8:	4b9c      	ldr	r3, [pc, #624]	; (800606c <HAL_RCC_OscConfig+0x330>)
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005e00:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8005e04:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005e08:	fa92 f2a2 	rbit	r2, r2
 8005e0c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8005e10:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8005e14:	fab2 f282 	clz	r2, r2
 8005e18:	b2d2      	uxtb	r2, r2
 8005e1a:	f042 0220 	orr.w	r2, r2, #32
 8005e1e:	b2d2      	uxtb	r2, r2
 8005e20:	f002 021f 	and.w	r2, r2, #31
 8005e24:	2101      	movs	r1, #1
 8005e26:	fa01 f202 	lsl.w	r2, r1, r2
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 811f 	beq.w	8006070 <HAL_RCC_OscConfig+0x334>
 8005e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f040 8116 	bne.w	8006070 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	f000 bfaf 	b.w	8006da8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e5a:	d106      	bne.n	8005e6a <HAL_RCC_OscConfig+0x12e>
 8005e5c:	4b83      	ldr	r3, [pc, #524]	; (800606c <HAL_RCC_OscConfig+0x330>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a82      	ldr	r2, [pc, #520]	; (800606c <HAL_RCC_OscConfig+0x330>)
 8005e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e66:	6013      	str	r3, [r2, #0]
 8005e68:	e036      	b.n	8005ed8 <HAL_RCC_OscConfig+0x19c>
 8005e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10c      	bne.n	8005e94 <HAL_RCC_OscConfig+0x158>
 8005e7a:	4b7c      	ldr	r3, [pc, #496]	; (800606c <HAL_RCC_OscConfig+0x330>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a7b      	ldr	r2, [pc, #492]	; (800606c <HAL_RCC_OscConfig+0x330>)
 8005e80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e84:	6013      	str	r3, [r2, #0]
 8005e86:	4b79      	ldr	r3, [pc, #484]	; (800606c <HAL_RCC_OscConfig+0x330>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a78      	ldr	r2, [pc, #480]	; (800606c <HAL_RCC_OscConfig+0x330>)
 8005e8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e90:	6013      	str	r3, [r2, #0]
 8005e92:	e021      	b.n	8005ed8 <HAL_RCC_OscConfig+0x19c>
 8005e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ea4:	d10c      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x184>
 8005ea6:	4b71      	ldr	r3, [pc, #452]	; (800606c <HAL_RCC_OscConfig+0x330>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a70      	ldr	r2, [pc, #448]	; (800606c <HAL_RCC_OscConfig+0x330>)
 8005eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005eb0:	6013      	str	r3, [r2, #0]
 8005eb2:	4b6e      	ldr	r3, [pc, #440]	; (800606c <HAL_RCC_OscConfig+0x330>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a6d      	ldr	r2, [pc, #436]	; (800606c <HAL_RCC_OscConfig+0x330>)
 8005eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ebc:	6013      	str	r3, [r2, #0]
 8005ebe:	e00b      	b.n	8005ed8 <HAL_RCC_OscConfig+0x19c>
 8005ec0:	4b6a      	ldr	r3, [pc, #424]	; (800606c <HAL_RCC_OscConfig+0x330>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a69      	ldr	r2, [pc, #420]	; (800606c <HAL_RCC_OscConfig+0x330>)
 8005ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eca:	6013      	str	r3, [r2, #0]
 8005ecc:	4b67      	ldr	r3, [pc, #412]	; (800606c <HAL_RCC_OscConfig+0x330>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a66      	ldr	r2, [pc, #408]	; (800606c <HAL_RCC_OscConfig+0x330>)
 8005ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ed6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005ed8:	4b64      	ldr	r3, [pc, #400]	; (800606c <HAL_RCC_OscConfig+0x330>)
 8005eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005edc:	f023 020f 	bic.w	r2, r3, #15
 8005ee0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ee4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	495f      	ldr	r1, [pc, #380]	; (800606c <HAL_RCC_OscConfig+0x330>)
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ef6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d059      	beq.n	8005fb6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f02:	f7fc ffe1 	bl	8002ec8 <HAL_GetTick>
 8005f06:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f0a:	e00a      	b.n	8005f22 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f0c:	f7fc ffdc 	bl	8002ec8 <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	2b64      	cmp	r3, #100	; 0x64
 8005f1a:	d902      	bls.n	8005f22 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	f000 bf43 	b.w	8006da8 <HAL_RCC_OscConfig+0x106c>
 8005f22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f26:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f2a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8005f2e:	fa93 f3a3 	rbit	r3, r3
 8005f32:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8005f36:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f3a:	fab3 f383 	clz	r3, r3
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	095b      	lsrs	r3, r3, #5
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	f043 0301 	orr.w	r3, r3, #1
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d102      	bne.n	8005f54 <HAL_RCC_OscConfig+0x218>
 8005f4e:	4b47      	ldr	r3, [pc, #284]	; (800606c <HAL_RCC_OscConfig+0x330>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	e015      	b.n	8005f80 <HAL_RCC_OscConfig+0x244>
 8005f54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f58:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f5c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8005f60:	fa93 f3a3 	rbit	r3, r3
 8005f64:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005f68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f6c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005f70:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8005f74:	fa93 f3a3 	rbit	r3, r3
 8005f78:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8005f7c:	4b3b      	ldr	r3, [pc, #236]	; (800606c <HAL_RCC_OscConfig+0x330>)
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f80:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005f84:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8005f88:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005f8c:	fa92 f2a2 	rbit	r2, r2
 8005f90:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8005f94:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8005f98:	fab2 f282 	clz	r2, r2
 8005f9c:	b2d2      	uxtb	r2, r2
 8005f9e:	f042 0220 	orr.w	r2, r2, #32
 8005fa2:	b2d2      	uxtb	r2, r2
 8005fa4:	f002 021f 	and.w	r2, r2, #31
 8005fa8:	2101      	movs	r1, #1
 8005faa:	fa01 f202 	lsl.w	r2, r1, r2
 8005fae:	4013      	ands	r3, r2
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d0ab      	beq.n	8005f0c <HAL_RCC_OscConfig+0x1d0>
 8005fb4:	e05d      	b.n	8006072 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fb6:	f7fc ff87 	bl	8002ec8 <HAL_GetTick>
 8005fba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fbe:	e00a      	b.n	8005fd6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fc0:	f7fc ff82 	bl	8002ec8 <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	2b64      	cmp	r3, #100	; 0x64
 8005fce:	d902      	bls.n	8005fd6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	f000 bee9 	b.w	8006da8 <HAL_RCC_OscConfig+0x106c>
 8005fd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005fda:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fde:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8005fe2:	fa93 f3a3 	rbit	r3, r3
 8005fe6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8005fea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fee:	fab3 f383 	clz	r3, r3
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	095b      	lsrs	r3, r3, #5
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	f043 0301 	orr.w	r3, r3, #1
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d102      	bne.n	8006008 <HAL_RCC_OscConfig+0x2cc>
 8006002:	4b1a      	ldr	r3, [pc, #104]	; (800606c <HAL_RCC_OscConfig+0x330>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	e015      	b.n	8006034 <HAL_RCC_OscConfig+0x2f8>
 8006008:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800600c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006010:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8006014:	fa93 f3a3 	rbit	r3, r3
 8006018:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800601c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006020:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8006024:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8006028:	fa93 f3a3 	rbit	r3, r3
 800602c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8006030:	4b0e      	ldr	r3, [pc, #56]	; (800606c <HAL_RCC_OscConfig+0x330>)
 8006032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006034:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006038:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800603c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8006040:	fa92 f2a2 	rbit	r2, r2
 8006044:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8006048:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800604c:	fab2 f282 	clz	r2, r2
 8006050:	b2d2      	uxtb	r2, r2
 8006052:	f042 0220 	orr.w	r2, r2, #32
 8006056:	b2d2      	uxtb	r2, r2
 8006058:	f002 021f 	and.w	r2, r2, #31
 800605c:	2101      	movs	r1, #1
 800605e:	fa01 f202 	lsl.w	r2, r1, r2
 8006062:	4013      	ands	r3, r2
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1ab      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x284>
 8006068:	e003      	b.n	8006072 <HAL_RCC_OscConfig+0x336>
 800606a:	bf00      	nop
 800606c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006076:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0302 	and.w	r3, r3, #2
 8006082:	2b00      	cmp	r3, #0
 8006084:	f000 817d 	beq.w	8006382 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006088:	4ba6      	ldr	r3, [pc, #664]	; (8006324 <HAL_RCC_OscConfig+0x5e8>)
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f003 030c 	and.w	r3, r3, #12
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00b      	beq.n	80060ac <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006094:	4ba3      	ldr	r3, [pc, #652]	; (8006324 <HAL_RCC_OscConfig+0x5e8>)
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	f003 030c 	and.w	r3, r3, #12
 800609c:	2b08      	cmp	r3, #8
 800609e:	d172      	bne.n	8006186 <HAL_RCC_OscConfig+0x44a>
 80060a0:	4ba0      	ldr	r3, [pc, #640]	; (8006324 <HAL_RCC_OscConfig+0x5e8>)
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d16c      	bne.n	8006186 <HAL_RCC_OscConfig+0x44a>
 80060ac:	2302      	movs	r3, #2
 80060ae:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060b2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80060b6:	fa93 f3a3 	rbit	r3, r3
 80060ba:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80060be:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060c2:	fab3 f383 	clz	r3, r3
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	095b      	lsrs	r3, r3, #5
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	f043 0301 	orr.w	r3, r3, #1
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d102      	bne.n	80060dc <HAL_RCC_OscConfig+0x3a0>
 80060d6:	4b93      	ldr	r3, [pc, #588]	; (8006324 <HAL_RCC_OscConfig+0x5e8>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	e013      	b.n	8006104 <HAL_RCC_OscConfig+0x3c8>
 80060dc:	2302      	movs	r3, #2
 80060de:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060e2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80060e6:	fa93 f3a3 	rbit	r3, r3
 80060ea:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80060ee:	2302      	movs	r3, #2
 80060f0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80060f4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80060f8:	fa93 f3a3 	rbit	r3, r3
 80060fc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8006100:	4b88      	ldr	r3, [pc, #544]	; (8006324 <HAL_RCC_OscConfig+0x5e8>)
 8006102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006104:	2202      	movs	r2, #2
 8006106:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800610a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800610e:	fa92 f2a2 	rbit	r2, r2
 8006112:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8006116:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800611a:	fab2 f282 	clz	r2, r2
 800611e:	b2d2      	uxtb	r2, r2
 8006120:	f042 0220 	orr.w	r2, r2, #32
 8006124:	b2d2      	uxtb	r2, r2
 8006126:	f002 021f 	and.w	r2, r2, #31
 800612a:	2101      	movs	r1, #1
 800612c:	fa01 f202 	lsl.w	r2, r1, r2
 8006130:	4013      	ands	r3, r2
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00a      	beq.n	800614c <HAL_RCC_OscConfig+0x410>
 8006136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800613a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	2b01      	cmp	r3, #1
 8006144:	d002      	beq.n	800614c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	f000 be2e 	b.w	8006da8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800614c:	4b75      	ldr	r3, [pc, #468]	; (8006324 <HAL_RCC_OscConfig+0x5e8>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006158:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	21f8      	movs	r1, #248	; 0xf8
 8006162:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006166:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800616a:	fa91 f1a1 	rbit	r1, r1
 800616e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8006172:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8006176:	fab1 f181 	clz	r1, r1
 800617a:	b2c9      	uxtb	r1, r1
 800617c:	408b      	lsls	r3, r1
 800617e:	4969      	ldr	r1, [pc, #420]	; (8006324 <HAL_RCC_OscConfig+0x5e8>)
 8006180:	4313      	orrs	r3, r2
 8006182:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006184:	e0fd      	b.n	8006382 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800618a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	2b00      	cmp	r3, #0
 8006194:	f000 8088 	beq.w	80062a8 <HAL_RCC_OscConfig+0x56c>
 8006198:	2301      	movs	r3, #1
 800619a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800619e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80061a2:	fa93 f3a3 	rbit	r3, r3
 80061a6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80061aa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061ae:	fab3 f383 	clz	r3, r3
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80061b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	461a      	mov	r2, r3
 80061c0:	2301      	movs	r3, #1
 80061c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061c4:	f7fc fe80 	bl	8002ec8 <HAL_GetTick>
 80061c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061cc:	e00a      	b.n	80061e4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061ce:	f7fc fe7b 	bl	8002ec8 <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d902      	bls.n	80061e4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80061de:	2303      	movs	r3, #3
 80061e0:	f000 bde2 	b.w	8006da8 <HAL_RCC_OscConfig+0x106c>
 80061e4:	2302      	movs	r3, #2
 80061e6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061ea:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80061ee:	fa93 f3a3 	rbit	r3, r3
 80061f2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80061f6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061fa:	fab3 f383 	clz	r3, r3
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	095b      	lsrs	r3, r3, #5
 8006202:	b2db      	uxtb	r3, r3
 8006204:	f043 0301 	orr.w	r3, r3, #1
 8006208:	b2db      	uxtb	r3, r3
 800620a:	2b01      	cmp	r3, #1
 800620c:	d102      	bne.n	8006214 <HAL_RCC_OscConfig+0x4d8>
 800620e:	4b45      	ldr	r3, [pc, #276]	; (8006324 <HAL_RCC_OscConfig+0x5e8>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	e013      	b.n	800623c <HAL_RCC_OscConfig+0x500>
 8006214:	2302      	movs	r3, #2
 8006216:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800621a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800621e:	fa93 f3a3 	rbit	r3, r3
 8006222:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8006226:	2302      	movs	r3, #2
 8006228:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800622c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006230:	fa93 f3a3 	rbit	r3, r3
 8006234:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8006238:	4b3a      	ldr	r3, [pc, #232]	; (8006324 <HAL_RCC_OscConfig+0x5e8>)
 800623a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623c:	2202      	movs	r2, #2
 800623e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8006242:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006246:	fa92 f2a2 	rbit	r2, r2
 800624a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800624e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8006252:	fab2 f282 	clz	r2, r2
 8006256:	b2d2      	uxtb	r2, r2
 8006258:	f042 0220 	orr.w	r2, r2, #32
 800625c:	b2d2      	uxtb	r2, r2
 800625e:	f002 021f 	and.w	r2, r2, #31
 8006262:	2101      	movs	r1, #1
 8006264:	fa01 f202 	lsl.w	r2, r1, r2
 8006268:	4013      	ands	r3, r2
 800626a:	2b00      	cmp	r3, #0
 800626c:	d0af      	beq.n	80061ce <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800626e:	4b2d      	ldr	r3, [pc, #180]	; (8006324 <HAL_RCC_OscConfig+0x5e8>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800627a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	695b      	ldr	r3, [r3, #20]
 8006282:	21f8      	movs	r1, #248	; 0xf8
 8006284:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006288:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800628c:	fa91 f1a1 	rbit	r1, r1
 8006290:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8006294:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8006298:	fab1 f181 	clz	r1, r1
 800629c:	b2c9      	uxtb	r1, r1
 800629e:	408b      	lsls	r3, r1
 80062a0:	4920      	ldr	r1, [pc, #128]	; (8006324 <HAL_RCC_OscConfig+0x5e8>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	600b      	str	r3, [r1, #0]
 80062a6:	e06c      	b.n	8006382 <HAL_RCC_OscConfig+0x646>
 80062a8:	2301      	movs	r3, #1
 80062aa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062ae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80062b2:	fa93 f3a3 	rbit	r3, r3
 80062b6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80062ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062be:	fab3 f383 	clz	r3, r3
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80062c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	461a      	mov	r2, r3
 80062d0:	2300      	movs	r3, #0
 80062d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062d4:	f7fc fdf8 	bl	8002ec8 <HAL_GetTick>
 80062d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062dc:	e00a      	b.n	80062f4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062de:	f7fc fdf3 	bl	8002ec8 <HAL_GetTick>
 80062e2:	4602      	mov	r2, r0
 80062e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d902      	bls.n	80062f4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80062ee:	2303      	movs	r3, #3
 80062f0:	f000 bd5a 	b.w	8006da8 <HAL_RCC_OscConfig+0x106c>
 80062f4:	2302      	movs	r3, #2
 80062f6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80062fe:	fa93 f3a3 	rbit	r3, r3
 8006302:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8006306:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800630a:	fab3 f383 	clz	r3, r3
 800630e:	b2db      	uxtb	r3, r3
 8006310:	095b      	lsrs	r3, r3, #5
 8006312:	b2db      	uxtb	r3, r3
 8006314:	f043 0301 	orr.w	r3, r3, #1
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b01      	cmp	r3, #1
 800631c:	d104      	bne.n	8006328 <HAL_RCC_OscConfig+0x5ec>
 800631e:	4b01      	ldr	r3, [pc, #4]	; (8006324 <HAL_RCC_OscConfig+0x5e8>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	e015      	b.n	8006350 <HAL_RCC_OscConfig+0x614>
 8006324:	40021000 	.word	0x40021000
 8006328:	2302      	movs	r3, #2
 800632a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800632e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006332:	fa93 f3a3 	rbit	r3, r3
 8006336:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800633a:	2302      	movs	r3, #2
 800633c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006340:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006344:	fa93 f3a3 	rbit	r3, r3
 8006348:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800634c:	4bc8      	ldr	r3, [pc, #800]	; (8006670 <HAL_RCC_OscConfig+0x934>)
 800634e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006350:	2202      	movs	r2, #2
 8006352:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8006356:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800635a:	fa92 f2a2 	rbit	r2, r2
 800635e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8006362:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8006366:	fab2 f282 	clz	r2, r2
 800636a:	b2d2      	uxtb	r2, r2
 800636c:	f042 0220 	orr.w	r2, r2, #32
 8006370:	b2d2      	uxtb	r2, r2
 8006372:	f002 021f 	and.w	r2, r2, #31
 8006376:	2101      	movs	r1, #1
 8006378:	fa01 f202 	lsl.w	r2, r1, r2
 800637c:	4013      	ands	r3, r2
 800637e:	2b00      	cmp	r3, #0
 8006380:	d1ad      	bne.n	80062de <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006386:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0308 	and.w	r3, r3, #8
 8006392:	2b00      	cmp	r3, #0
 8006394:	f000 8110 	beq.w	80065b8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800639c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d079      	beq.n	800649c <HAL_RCC_OscConfig+0x760>
 80063a8:	2301      	movs	r3, #1
 80063aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80063b2:	fa93 f3a3 	rbit	r3, r3
 80063b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80063ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063be:	fab3 f383 	clz	r3, r3
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	461a      	mov	r2, r3
 80063c6:	4bab      	ldr	r3, [pc, #684]	; (8006674 <HAL_RCC_OscConfig+0x938>)
 80063c8:	4413      	add	r3, r2
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	461a      	mov	r2, r3
 80063ce:	2301      	movs	r3, #1
 80063d0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063d2:	f7fc fd79 	bl	8002ec8 <HAL_GetTick>
 80063d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063da:	e00a      	b.n	80063f2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063dc:	f7fc fd74 	bl	8002ec8 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d902      	bls.n	80063f2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	f000 bcdb 	b.w	8006da8 <HAL_RCC_OscConfig+0x106c>
 80063f2:	2302      	movs	r3, #2
 80063f4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80063fc:	fa93 f3a3 	rbit	r3, r3
 8006400:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006408:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800640c:	2202      	movs	r2, #2
 800640e:	601a      	str	r2, [r3, #0]
 8006410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006414:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	fa93 f2a3 	rbit	r2, r3
 800641e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006422:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006426:	601a      	str	r2, [r3, #0]
 8006428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800642c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006430:	2202      	movs	r2, #2
 8006432:	601a      	str	r2, [r3, #0]
 8006434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006438:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	fa93 f2a3 	rbit	r2, r3
 8006442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006446:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800644a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800644c:	4b88      	ldr	r3, [pc, #544]	; (8006670 <HAL_RCC_OscConfig+0x934>)
 800644e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006454:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006458:	2102      	movs	r1, #2
 800645a:	6019      	str	r1, [r3, #0]
 800645c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006460:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	fa93 f1a3 	rbit	r1, r3
 800646a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800646e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006472:	6019      	str	r1, [r3, #0]
  return result;
 8006474:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006478:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	fab3 f383 	clz	r3, r3
 8006482:	b2db      	uxtb	r3, r3
 8006484:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006488:	b2db      	uxtb	r3, r3
 800648a:	f003 031f 	and.w	r3, r3, #31
 800648e:	2101      	movs	r1, #1
 8006490:	fa01 f303 	lsl.w	r3, r1, r3
 8006494:	4013      	ands	r3, r2
 8006496:	2b00      	cmp	r3, #0
 8006498:	d0a0      	beq.n	80063dc <HAL_RCC_OscConfig+0x6a0>
 800649a:	e08d      	b.n	80065b8 <HAL_RCC_OscConfig+0x87c>
 800649c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064a0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80064a4:	2201      	movs	r2, #1
 80064a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064ac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	fa93 f2a3 	rbit	r2, r3
 80064b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064ba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80064be:	601a      	str	r2, [r3, #0]
  return result;
 80064c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064c4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80064c8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064ca:	fab3 f383 	clz	r3, r3
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	461a      	mov	r2, r3
 80064d2:	4b68      	ldr	r3, [pc, #416]	; (8006674 <HAL_RCC_OscConfig+0x938>)
 80064d4:	4413      	add	r3, r2
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	461a      	mov	r2, r3
 80064da:	2300      	movs	r3, #0
 80064dc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064de:	f7fc fcf3 	bl	8002ec8 <HAL_GetTick>
 80064e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064e6:	e00a      	b.n	80064fe <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064e8:	f7fc fcee 	bl	8002ec8 <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d902      	bls.n	80064fe <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	f000 bc55 	b.w	8006da8 <HAL_RCC_OscConfig+0x106c>
 80064fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006502:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006506:	2202      	movs	r2, #2
 8006508:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800650a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800650e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	fa93 f2a3 	rbit	r2, r3
 8006518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800651c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006520:	601a      	str	r2, [r3, #0]
 8006522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006526:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800652a:	2202      	movs	r2, #2
 800652c:	601a      	str	r2, [r3, #0]
 800652e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006532:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	fa93 f2a3 	rbit	r2, r3
 800653c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006540:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006544:	601a      	str	r2, [r3, #0]
 8006546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800654a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800654e:	2202      	movs	r2, #2
 8006550:	601a      	str	r2, [r3, #0]
 8006552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006556:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	fa93 f2a3 	rbit	r2, r3
 8006560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006564:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006568:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800656a:	4b41      	ldr	r3, [pc, #260]	; (8006670 <HAL_RCC_OscConfig+0x934>)
 800656c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800656e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006572:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006576:	2102      	movs	r1, #2
 8006578:	6019      	str	r1, [r3, #0]
 800657a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800657e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	fa93 f1a3 	rbit	r1, r3
 8006588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800658c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006590:	6019      	str	r1, [r3, #0]
  return result;
 8006592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006596:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	fab3 f383 	clz	r3, r3
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	f003 031f 	and.w	r3, r3, #31
 80065ac:	2101      	movs	r1, #1
 80065ae:	fa01 f303 	lsl.w	r3, r1, r3
 80065b2:	4013      	ands	r3, r2
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d197      	bne.n	80064e8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 0304 	and.w	r3, r3, #4
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f000 81a1 	beq.w	8006910 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065ce:	2300      	movs	r3, #0
 80065d0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065d4:	4b26      	ldr	r3, [pc, #152]	; (8006670 <HAL_RCC_OscConfig+0x934>)
 80065d6:	69db      	ldr	r3, [r3, #28]
 80065d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d116      	bne.n	800660e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065e0:	4b23      	ldr	r3, [pc, #140]	; (8006670 <HAL_RCC_OscConfig+0x934>)
 80065e2:	69db      	ldr	r3, [r3, #28]
 80065e4:	4a22      	ldr	r2, [pc, #136]	; (8006670 <HAL_RCC_OscConfig+0x934>)
 80065e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065ea:	61d3      	str	r3, [r2, #28]
 80065ec:	4b20      	ldr	r3, [pc, #128]	; (8006670 <HAL_RCC_OscConfig+0x934>)
 80065ee:	69db      	ldr	r3, [r3, #28]
 80065f0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80065f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065f8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80065fc:	601a      	str	r2, [r3, #0]
 80065fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006602:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8006606:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8006608:	2301      	movs	r3, #1
 800660a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800660e:	4b1a      	ldr	r3, [pc, #104]	; (8006678 <HAL_RCC_OscConfig+0x93c>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006616:	2b00      	cmp	r3, #0
 8006618:	d11a      	bne.n	8006650 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800661a:	4b17      	ldr	r3, [pc, #92]	; (8006678 <HAL_RCC_OscConfig+0x93c>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a16      	ldr	r2, [pc, #88]	; (8006678 <HAL_RCC_OscConfig+0x93c>)
 8006620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006624:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006626:	f7fc fc4f 	bl	8002ec8 <HAL_GetTick>
 800662a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800662e:	e009      	b.n	8006644 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006630:	f7fc fc4a 	bl	8002ec8 <HAL_GetTick>
 8006634:	4602      	mov	r2, r0
 8006636:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	2b64      	cmp	r3, #100	; 0x64
 800663e:	d901      	bls.n	8006644 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	e3b1      	b.n	8006da8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006644:	4b0c      	ldr	r3, [pc, #48]	; (8006678 <HAL_RCC_OscConfig+0x93c>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800664c:	2b00      	cmp	r3, #0
 800664e:	d0ef      	beq.n	8006630 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006654:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d10d      	bne.n	800667c <HAL_RCC_OscConfig+0x940>
 8006660:	4b03      	ldr	r3, [pc, #12]	; (8006670 <HAL_RCC_OscConfig+0x934>)
 8006662:	6a1b      	ldr	r3, [r3, #32]
 8006664:	4a02      	ldr	r2, [pc, #8]	; (8006670 <HAL_RCC_OscConfig+0x934>)
 8006666:	f043 0301 	orr.w	r3, r3, #1
 800666a:	6213      	str	r3, [r2, #32]
 800666c:	e03c      	b.n	80066e8 <HAL_RCC_OscConfig+0x9ac>
 800666e:	bf00      	nop
 8006670:	40021000 	.word	0x40021000
 8006674:	10908120 	.word	0x10908120
 8006678:	40007000 	.word	0x40007000
 800667c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006680:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d10c      	bne.n	80066a6 <HAL_RCC_OscConfig+0x96a>
 800668c:	4bc1      	ldr	r3, [pc, #772]	; (8006994 <HAL_RCC_OscConfig+0xc58>)
 800668e:	6a1b      	ldr	r3, [r3, #32]
 8006690:	4ac0      	ldr	r2, [pc, #768]	; (8006994 <HAL_RCC_OscConfig+0xc58>)
 8006692:	f023 0301 	bic.w	r3, r3, #1
 8006696:	6213      	str	r3, [r2, #32]
 8006698:	4bbe      	ldr	r3, [pc, #760]	; (8006994 <HAL_RCC_OscConfig+0xc58>)
 800669a:	6a1b      	ldr	r3, [r3, #32]
 800669c:	4abd      	ldr	r2, [pc, #756]	; (8006994 <HAL_RCC_OscConfig+0xc58>)
 800669e:	f023 0304 	bic.w	r3, r3, #4
 80066a2:	6213      	str	r3, [r2, #32]
 80066a4:	e020      	b.n	80066e8 <HAL_RCC_OscConfig+0x9ac>
 80066a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	2b05      	cmp	r3, #5
 80066b4:	d10c      	bne.n	80066d0 <HAL_RCC_OscConfig+0x994>
 80066b6:	4bb7      	ldr	r3, [pc, #732]	; (8006994 <HAL_RCC_OscConfig+0xc58>)
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	4ab6      	ldr	r2, [pc, #728]	; (8006994 <HAL_RCC_OscConfig+0xc58>)
 80066bc:	f043 0304 	orr.w	r3, r3, #4
 80066c0:	6213      	str	r3, [r2, #32]
 80066c2:	4bb4      	ldr	r3, [pc, #720]	; (8006994 <HAL_RCC_OscConfig+0xc58>)
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	4ab3      	ldr	r2, [pc, #716]	; (8006994 <HAL_RCC_OscConfig+0xc58>)
 80066c8:	f043 0301 	orr.w	r3, r3, #1
 80066cc:	6213      	str	r3, [r2, #32]
 80066ce:	e00b      	b.n	80066e8 <HAL_RCC_OscConfig+0x9ac>
 80066d0:	4bb0      	ldr	r3, [pc, #704]	; (8006994 <HAL_RCC_OscConfig+0xc58>)
 80066d2:	6a1b      	ldr	r3, [r3, #32]
 80066d4:	4aaf      	ldr	r2, [pc, #700]	; (8006994 <HAL_RCC_OscConfig+0xc58>)
 80066d6:	f023 0301 	bic.w	r3, r3, #1
 80066da:	6213      	str	r3, [r2, #32]
 80066dc:	4bad      	ldr	r3, [pc, #692]	; (8006994 <HAL_RCC_OscConfig+0xc58>)
 80066de:	6a1b      	ldr	r3, [r3, #32]
 80066e0:	4aac      	ldr	r2, [pc, #688]	; (8006994 <HAL_RCC_OscConfig+0xc58>)
 80066e2:	f023 0304 	bic.w	r3, r3, #4
 80066e6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80066e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f000 8081 	beq.w	80067fc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066fa:	f7fc fbe5 	bl	8002ec8 <HAL_GetTick>
 80066fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006702:	e00b      	b.n	800671c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006704:	f7fc fbe0 	bl	8002ec8 <HAL_GetTick>
 8006708:	4602      	mov	r2, r0
 800670a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800670e:	1ad3      	subs	r3, r2, r3
 8006710:	f241 3288 	movw	r2, #5000	; 0x1388
 8006714:	4293      	cmp	r3, r2
 8006716:	d901      	bls.n	800671c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e345      	b.n	8006da8 <HAL_RCC_OscConfig+0x106c>
 800671c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006720:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006724:	2202      	movs	r2, #2
 8006726:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006728:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800672c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	fa93 f2a3 	rbit	r2, r3
 8006736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800673a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800673e:	601a      	str	r2, [r3, #0]
 8006740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006744:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006748:	2202      	movs	r2, #2
 800674a:	601a      	str	r2, [r3, #0]
 800674c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006750:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	fa93 f2a3 	rbit	r2, r3
 800675a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800675e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8006762:	601a      	str	r2, [r3, #0]
  return result;
 8006764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006768:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800676c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800676e:	fab3 f383 	clz	r3, r3
 8006772:	b2db      	uxtb	r3, r3
 8006774:	095b      	lsrs	r3, r3, #5
 8006776:	b2db      	uxtb	r3, r3
 8006778:	f043 0302 	orr.w	r3, r3, #2
 800677c:	b2db      	uxtb	r3, r3
 800677e:	2b02      	cmp	r3, #2
 8006780:	d102      	bne.n	8006788 <HAL_RCC_OscConfig+0xa4c>
 8006782:	4b84      	ldr	r3, [pc, #528]	; (8006994 <HAL_RCC_OscConfig+0xc58>)
 8006784:	6a1b      	ldr	r3, [r3, #32]
 8006786:	e013      	b.n	80067b0 <HAL_RCC_OscConfig+0xa74>
 8006788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800678c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8006790:	2202      	movs	r2, #2
 8006792:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006794:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006798:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	fa93 f2a3 	rbit	r2, r3
 80067a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067a6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80067aa:	601a      	str	r2, [r3, #0]
 80067ac:	4b79      	ldr	r3, [pc, #484]	; (8006994 <HAL_RCC_OscConfig+0xc58>)
 80067ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80067b4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80067b8:	2102      	movs	r1, #2
 80067ba:	6011      	str	r1, [r2, #0]
 80067bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80067c0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80067c4:	6812      	ldr	r2, [r2, #0]
 80067c6:	fa92 f1a2 	rbit	r1, r2
 80067ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80067ce:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80067d2:	6011      	str	r1, [r2, #0]
  return result;
 80067d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80067d8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80067dc:	6812      	ldr	r2, [r2, #0]
 80067de:	fab2 f282 	clz	r2, r2
 80067e2:	b2d2      	uxtb	r2, r2
 80067e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067e8:	b2d2      	uxtb	r2, r2
 80067ea:	f002 021f 	and.w	r2, r2, #31
 80067ee:	2101      	movs	r1, #1
 80067f0:	fa01 f202 	lsl.w	r2, r1, r2
 80067f4:	4013      	ands	r3, r2
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d084      	beq.n	8006704 <HAL_RCC_OscConfig+0x9c8>
 80067fa:	e07f      	b.n	80068fc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067fc:	f7fc fb64 	bl	8002ec8 <HAL_GetTick>
 8006800:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006804:	e00b      	b.n	800681e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006806:	f7fc fb5f 	bl	8002ec8 <HAL_GetTick>
 800680a:	4602      	mov	r2, r0
 800680c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	f241 3288 	movw	r2, #5000	; 0x1388
 8006816:	4293      	cmp	r3, r2
 8006818:	d901      	bls.n	800681e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e2c4      	b.n	8006da8 <HAL_RCC_OscConfig+0x106c>
 800681e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006822:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8006826:	2202      	movs	r2, #2
 8006828:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800682a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800682e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	fa93 f2a3 	rbit	r2, r3
 8006838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800683c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8006840:	601a      	str	r2, [r3, #0]
 8006842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006846:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800684a:	2202      	movs	r2, #2
 800684c:	601a      	str	r2, [r3, #0]
 800684e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006852:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	fa93 f2a3 	rbit	r2, r3
 800685c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006860:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8006864:	601a      	str	r2, [r3, #0]
  return result;
 8006866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800686a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800686e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006870:	fab3 f383 	clz	r3, r3
 8006874:	b2db      	uxtb	r3, r3
 8006876:	095b      	lsrs	r3, r3, #5
 8006878:	b2db      	uxtb	r3, r3
 800687a:	f043 0302 	orr.w	r3, r3, #2
 800687e:	b2db      	uxtb	r3, r3
 8006880:	2b02      	cmp	r3, #2
 8006882:	d102      	bne.n	800688a <HAL_RCC_OscConfig+0xb4e>
 8006884:	4b43      	ldr	r3, [pc, #268]	; (8006994 <HAL_RCC_OscConfig+0xc58>)
 8006886:	6a1b      	ldr	r3, [r3, #32]
 8006888:	e013      	b.n	80068b2 <HAL_RCC_OscConfig+0xb76>
 800688a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800688e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8006892:	2202      	movs	r2, #2
 8006894:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800689a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	fa93 f2a3 	rbit	r2, r3
 80068a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068a8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80068ac:	601a      	str	r2, [r3, #0]
 80068ae:	4b39      	ldr	r3, [pc, #228]	; (8006994 <HAL_RCC_OscConfig+0xc58>)
 80068b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80068b6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80068ba:	2102      	movs	r1, #2
 80068bc:	6011      	str	r1, [r2, #0]
 80068be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80068c2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80068c6:	6812      	ldr	r2, [r2, #0]
 80068c8:	fa92 f1a2 	rbit	r1, r2
 80068cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80068d0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80068d4:	6011      	str	r1, [r2, #0]
  return result;
 80068d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80068da:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80068de:	6812      	ldr	r2, [r2, #0]
 80068e0:	fab2 f282 	clz	r2, r2
 80068e4:	b2d2      	uxtb	r2, r2
 80068e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068ea:	b2d2      	uxtb	r2, r2
 80068ec:	f002 021f 	and.w	r2, r2, #31
 80068f0:	2101      	movs	r1, #1
 80068f2:	fa01 f202 	lsl.w	r2, r1, r2
 80068f6:	4013      	ands	r3, r2
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d184      	bne.n	8006806 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80068fc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8006900:	2b01      	cmp	r3, #1
 8006902:	d105      	bne.n	8006910 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006904:	4b23      	ldr	r3, [pc, #140]	; (8006994 <HAL_RCC_OscConfig+0xc58>)
 8006906:	69db      	ldr	r3, [r3, #28]
 8006908:	4a22      	ldr	r2, [pc, #136]	; (8006994 <HAL_RCC_OscConfig+0xc58>)
 800690a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800690e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006914:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	69db      	ldr	r3, [r3, #28]
 800691c:	2b00      	cmp	r3, #0
 800691e:	f000 8242 	beq.w	8006da6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006922:	4b1c      	ldr	r3, [pc, #112]	; (8006994 <HAL_RCC_OscConfig+0xc58>)
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	f003 030c 	and.w	r3, r3, #12
 800692a:	2b08      	cmp	r3, #8
 800692c:	f000 8213 	beq.w	8006d56 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006930:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006934:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	69db      	ldr	r3, [r3, #28]
 800693c:	2b02      	cmp	r3, #2
 800693e:	f040 8162 	bne.w	8006c06 <HAL_RCC_OscConfig+0xeca>
 8006942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006946:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800694a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800694e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006950:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006954:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	fa93 f2a3 	rbit	r2, r3
 800695e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006962:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006966:	601a      	str	r2, [r3, #0]
  return result;
 8006968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800696c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006970:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006972:	fab3 f383 	clz	r3, r3
 8006976:	b2db      	uxtb	r3, r3
 8006978:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800697c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	461a      	mov	r2, r3
 8006984:	2300      	movs	r3, #0
 8006986:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006988:	f7fc fa9e 	bl	8002ec8 <HAL_GetTick>
 800698c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006990:	e00c      	b.n	80069ac <HAL_RCC_OscConfig+0xc70>
 8006992:	bf00      	nop
 8006994:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006998:	f7fc fa96 	bl	8002ec8 <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d901      	bls.n	80069ac <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	e1fd      	b.n	8006da8 <HAL_RCC_OscConfig+0x106c>
 80069ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80069b0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80069b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80069b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80069be:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	fa93 f2a3 	rbit	r2, r3
 80069c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80069cc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80069d0:	601a      	str	r2, [r3, #0]
  return result;
 80069d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80069d6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80069da:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069dc:	fab3 f383 	clz	r3, r3
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	095b      	lsrs	r3, r3, #5
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	f043 0301 	orr.w	r3, r3, #1
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d102      	bne.n	80069f6 <HAL_RCC_OscConfig+0xcba>
 80069f0:	4bb0      	ldr	r3, [pc, #704]	; (8006cb4 <HAL_RCC_OscConfig+0xf78>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	e027      	b.n	8006a46 <HAL_RCC_OscConfig+0xd0a>
 80069f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80069fa:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80069fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006a02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a08:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	fa93 f2a3 	rbit	r2, r3
 8006a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a16:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8006a1a:	601a      	str	r2, [r3, #0]
 8006a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a20:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8006a24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006a28:	601a      	str	r2, [r3, #0]
 8006a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a2e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	fa93 f2a3 	rbit	r2, r3
 8006a38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a3c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006a40:	601a      	str	r2, [r3, #0]
 8006a42:	4b9c      	ldr	r3, [pc, #624]	; (8006cb4 <HAL_RCC_OscConfig+0xf78>)
 8006a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006a4a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8006a4e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006a52:	6011      	str	r1, [r2, #0]
 8006a54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006a58:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8006a5c:	6812      	ldr	r2, [r2, #0]
 8006a5e:	fa92 f1a2 	rbit	r1, r2
 8006a62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006a66:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006a6a:	6011      	str	r1, [r2, #0]
  return result;
 8006a6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006a70:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006a74:	6812      	ldr	r2, [r2, #0]
 8006a76:	fab2 f282 	clz	r2, r2
 8006a7a:	b2d2      	uxtb	r2, r2
 8006a7c:	f042 0220 	orr.w	r2, r2, #32
 8006a80:	b2d2      	uxtb	r2, r2
 8006a82:	f002 021f 	and.w	r2, r2, #31
 8006a86:	2101      	movs	r1, #1
 8006a88:	fa01 f202 	lsl.w	r2, r1, r2
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d182      	bne.n	8006998 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a92:	4b88      	ldr	r3, [pc, #544]	; (8006cb4 <HAL_RCC_OscConfig+0xf78>)
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006aaa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	430b      	orrs	r3, r1
 8006ab4:	497f      	ldr	r1, [pc, #508]	; (8006cb4 <HAL_RCC_OscConfig+0xf78>)
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	604b      	str	r3, [r1, #4]
 8006aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006abe:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8006ac2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006ac6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006acc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	fa93 f2a3 	rbit	r2, r3
 8006ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ada:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006ade:	601a      	str	r2, [r3, #0]
  return result;
 8006ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ae4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006ae8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006aea:	fab3 f383 	clz	r3, r3
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006af4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	461a      	mov	r2, r3
 8006afc:	2301      	movs	r3, #1
 8006afe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b00:	f7fc f9e2 	bl	8002ec8 <HAL_GetTick>
 8006b04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006b08:	e009      	b.n	8006b1e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b0a:	f7fc f9dd 	bl	8002ec8 <HAL_GetTick>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d901      	bls.n	8006b1e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e144      	b.n	8006da8 <HAL_RCC_OscConfig+0x106c>
 8006b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b22:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006b26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b30:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	fa93 f2a3 	rbit	r2, r3
 8006b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b3e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006b42:	601a      	str	r2, [r3, #0]
  return result;
 8006b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b48:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006b4c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006b4e:	fab3 f383 	clz	r3, r3
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	095b      	lsrs	r3, r3, #5
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	f043 0301 	orr.w	r3, r3, #1
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d102      	bne.n	8006b68 <HAL_RCC_OscConfig+0xe2c>
 8006b62:	4b54      	ldr	r3, [pc, #336]	; (8006cb4 <HAL_RCC_OscConfig+0xf78>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	e027      	b.n	8006bb8 <HAL_RCC_OscConfig+0xe7c>
 8006b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b6c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006b70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b7a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	fa93 f2a3 	rbit	r2, r3
 8006b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b88:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8006b8c:	601a      	str	r2, [r3, #0]
 8006b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b92:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006b96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b9a:	601a      	str	r2, [r3, #0]
 8006b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ba0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	fa93 f2a3 	rbit	r2, r3
 8006baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006bae:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8006bb2:	601a      	str	r2, [r3, #0]
 8006bb4:	4b3f      	ldr	r3, [pc, #252]	; (8006cb4 <HAL_RCC_OscConfig+0xf78>)
 8006bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006bbc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8006bc0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006bc4:	6011      	str	r1, [r2, #0]
 8006bc6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006bca:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8006bce:	6812      	ldr	r2, [r2, #0]
 8006bd0:	fa92 f1a2 	rbit	r1, r2
 8006bd4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006bd8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006bdc:	6011      	str	r1, [r2, #0]
  return result;
 8006bde:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006be2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006be6:	6812      	ldr	r2, [r2, #0]
 8006be8:	fab2 f282 	clz	r2, r2
 8006bec:	b2d2      	uxtb	r2, r2
 8006bee:	f042 0220 	orr.w	r2, r2, #32
 8006bf2:	b2d2      	uxtb	r2, r2
 8006bf4:	f002 021f 	and.w	r2, r2, #31
 8006bf8:	2101      	movs	r1, #1
 8006bfa:	fa01 f202 	lsl.w	r2, r1, r2
 8006bfe:	4013      	ands	r3, r2
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d082      	beq.n	8006b0a <HAL_RCC_OscConfig+0xdce>
 8006c04:	e0cf      	b.n	8006da6 <HAL_RCC_OscConfig+0x106a>
 8006c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c0a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8006c0e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006c12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c18:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	fa93 f2a3 	rbit	r2, r3
 8006c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c26:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006c2a:	601a      	str	r2, [r3, #0]
  return result;
 8006c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c30:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006c34:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c36:	fab3 f383 	clz	r3, r3
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006c40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	461a      	mov	r2, r3
 8006c48:	2300      	movs	r3, #0
 8006c4a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c4c:	f7fc f93c 	bl	8002ec8 <HAL_GetTick>
 8006c50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c54:	e009      	b.n	8006c6a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c56:	f7fc f937 	bl	8002ec8 <HAL_GetTick>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d901      	bls.n	8006c6a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8006c66:	2303      	movs	r3, #3
 8006c68:	e09e      	b.n	8006da8 <HAL_RCC_OscConfig+0x106c>
 8006c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c6e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006c72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006c76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c7c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	fa93 f2a3 	rbit	r2, r3
 8006c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c8a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006c8e:	601a      	str	r2, [r3, #0]
  return result;
 8006c90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c94:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006c98:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c9a:	fab3 f383 	clz	r3, r3
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	095b      	lsrs	r3, r3, #5
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	f043 0301 	orr.w	r3, r3, #1
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d104      	bne.n	8006cb8 <HAL_RCC_OscConfig+0xf7c>
 8006cae:	4b01      	ldr	r3, [pc, #4]	; (8006cb4 <HAL_RCC_OscConfig+0xf78>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	e029      	b.n	8006d08 <HAL_RCC_OscConfig+0xfcc>
 8006cb4:	40021000 	.word	0x40021000
 8006cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006cbc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8006cc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006cc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006cca:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	fa93 f2a3 	rbit	r2, r3
 8006cd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006cd8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8006cdc:	601a      	str	r2, [r3, #0]
 8006cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ce2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8006ce6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006cea:	601a      	str	r2, [r3, #0]
 8006cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006cf0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	fa93 f2a3 	rbit	r2, r3
 8006cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006cfe:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006d02:	601a      	str	r2, [r3, #0]
 8006d04:	4b2b      	ldr	r3, [pc, #172]	; (8006db4 <HAL_RCC_OscConfig+0x1078>)
 8006d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006d0c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8006d10:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006d14:	6011      	str	r1, [r2, #0]
 8006d16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006d1a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8006d1e:	6812      	ldr	r2, [r2, #0]
 8006d20:	fa92 f1a2 	rbit	r1, r2
 8006d24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006d28:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006d2c:	6011      	str	r1, [r2, #0]
  return result;
 8006d2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006d32:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006d36:	6812      	ldr	r2, [r2, #0]
 8006d38:	fab2 f282 	clz	r2, r2
 8006d3c:	b2d2      	uxtb	r2, r2
 8006d3e:	f042 0220 	orr.w	r2, r2, #32
 8006d42:	b2d2      	uxtb	r2, r2
 8006d44:	f002 021f 	and.w	r2, r2, #31
 8006d48:	2101      	movs	r1, #1
 8006d4a:	fa01 f202 	lsl.w	r2, r1, r2
 8006d4e:	4013      	ands	r3, r2
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d180      	bne.n	8006c56 <HAL_RCC_OscConfig+0xf1a>
 8006d54:	e027      	b.n	8006da6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	69db      	ldr	r3, [r3, #28]
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d101      	bne.n	8006d6a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e01e      	b.n	8006da8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006d6a:	4b12      	ldr	r3, [pc, #72]	; (8006db4 <HAL_RCC_OscConfig+0x1078>)
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006d72:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006d76:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	6a1b      	ldr	r3, [r3, #32]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d10b      	bne.n	8006da2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006d8a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006d8e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d001      	beq.n	8006da6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e000      	b.n	8006da8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	40021000 	.word	0x40021000

08006db8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b09e      	sub	sp, #120	; 0x78
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d101      	bne.n	8006dd0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e162      	b.n	8007096 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006dd0:	4b90      	ldr	r3, [pc, #576]	; (8007014 <HAL_RCC_ClockConfig+0x25c>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0307 	and.w	r3, r3, #7
 8006dd8:	683a      	ldr	r2, [r7, #0]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d910      	bls.n	8006e00 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dde:	4b8d      	ldr	r3, [pc, #564]	; (8007014 <HAL_RCC_ClockConfig+0x25c>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f023 0207 	bic.w	r2, r3, #7
 8006de6:	498b      	ldr	r1, [pc, #556]	; (8007014 <HAL_RCC_ClockConfig+0x25c>)
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dee:	4b89      	ldr	r3, [pc, #548]	; (8007014 <HAL_RCC_ClockConfig+0x25c>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 0307 	and.w	r3, r3, #7
 8006df6:	683a      	ldr	r2, [r7, #0]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d001      	beq.n	8006e00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e14a      	b.n	8007096 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0302 	and.w	r3, r3, #2
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d008      	beq.n	8006e1e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e0c:	4b82      	ldr	r3, [pc, #520]	; (8007018 <HAL_RCC_ClockConfig+0x260>)
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	497f      	ldr	r1, [pc, #508]	; (8007018 <HAL_RCC_ClockConfig+0x260>)
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 0301 	and.w	r3, r3, #1
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	f000 80dc 	beq.w	8006fe4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d13c      	bne.n	8006eae <HAL_RCC_ClockConfig+0xf6>
 8006e34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006e38:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e3c:	fa93 f3a3 	rbit	r3, r3
 8006e40:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e44:	fab3 f383 	clz	r3, r3
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	095b      	lsrs	r3, r3, #5
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	f043 0301 	orr.w	r3, r3, #1
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d102      	bne.n	8006e5e <HAL_RCC_ClockConfig+0xa6>
 8006e58:	4b6f      	ldr	r3, [pc, #444]	; (8007018 <HAL_RCC_ClockConfig+0x260>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	e00f      	b.n	8006e7e <HAL_RCC_ClockConfig+0xc6>
 8006e5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006e62:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e66:	fa93 f3a3 	rbit	r3, r3
 8006e6a:	667b      	str	r3, [r7, #100]	; 0x64
 8006e6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006e70:	663b      	str	r3, [r7, #96]	; 0x60
 8006e72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e74:	fa93 f3a3 	rbit	r3, r3
 8006e78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e7a:	4b67      	ldr	r3, [pc, #412]	; (8007018 <HAL_RCC_ClockConfig+0x260>)
 8006e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006e82:	65ba      	str	r2, [r7, #88]	; 0x58
 8006e84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e86:	fa92 f2a2 	rbit	r2, r2
 8006e8a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006e8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006e8e:	fab2 f282 	clz	r2, r2
 8006e92:	b2d2      	uxtb	r2, r2
 8006e94:	f042 0220 	orr.w	r2, r2, #32
 8006e98:	b2d2      	uxtb	r2, r2
 8006e9a:	f002 021f 	and.w	r2, r2, #31
 8006e9e:	2101      	movs	r1, #1
 8006ea0:	fa01 f202 	lsl.w	r2, r1, r2
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d17b      	bne.n	8006fa2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e0f3      	b.n	8007096 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	d13c      	bne.n	8006f30 <HAL_RCC_ClockConfig+0x178>
 8006eb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006eba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ebc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ebe:	fa93 f3a3 	rbit	r3, r3
 8006ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ec6:	fab3 f383 	clz	r3, r3
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	095b      	lsrs	r3, r3, #5
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	f043 0301 	orr.w	r3, r3, #1
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d102      	bne.n	8006ee0 <HAL_RCC_ClockConfig+0x128>
 8006eda:	4b4f      	ldr	r3, [pc, #316]	; (8007018 <HAL_RCC_ClockConfig+0x260>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	e00f      	b.n	8006f00 <HAL_RCC_ClockConfig+0x148>
 8006ee0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ee4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ee8:	fa93 f3a3 	rbit	r3, r3
 8006eec:	647b      	str	r3, [r7, #68]	; 0x44
 8006eee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ef2:	643b      	str	r3, [r7, #64]	; 0x40
 8006ef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ef6:	fa93 f3a3 	rbit	r3, r3
 8006efa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006efc:	4b46      	ldr	r3, [pc, #280]	; (8007018 <HAL_RCC_ClockConfig+0x260>)
 8006efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006f04:	63ba      	str	r2, [r7, #56]	; 0x38
 8006f06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f08:	fa92 f2a2 	rbit	r2, r2
 8006f0c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8006f0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f10:	fab2 f282 	clz	r2, r2
 8006f14:	b2d2      	uxtb	r2, r2
 8006f16:	f042 0220 	orr.w	r2, r2, #32
 8006f1a:	b2d2      	uxtb	r2, r2
 8006f1c:	f002 021f 	and.w	r2, r2, #31
 8006f20:	2101      	movs	r1, #1
 8006f22:	fa01 f202 	lsl.w	r2, r1, r2
 8006f26:	4013      	ands	r3, r2
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d13a      	bne.n	8006fa2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e0b2      	b.n	8007096 <HAL_RCC_ClockConfig+0x2de>
 8006f30:	2302      	movs	r3, #2
 8006f32:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f36:	fa93 f3a3 	rbit	r3, r3
 8006f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f3e:	fab3 f383 	clz	r3, r3
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	095b      	lsrs	r3, r3, #5
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	f043 0301 	orr.w	r3, r3, #1
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d102      	bne.n	8006f58 <HAL_RCC_ClockConfig+0x1a0>
 8006f52:	4b31      	ldr	r3, [pc, #196]	; (8007018 <HAL_RCC_ClockConfig+0x260>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	e00d      	b.n	8006f74 <HAL_RCC_ClockConfig+0x1bc>
 8006f58:	2302      	movs	r3, #2
 8006f5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5e:	fa93 f3a3 	rbit	r3, r3
 8006f62:	627b      	str	r3, [r7, #36]	; 0x24
 8006f64:	2302      	movs	r3, #2
 8006f66:	623b      	str	r3, [r7, #32]
 8006f68:	6a3b      	ldr	r3, [r7, #32]
 8006f6a:	fa93 f3a3 	rbit	r3, r3
 8006f6e:	61fb      	str	r3, [r7, #28]
 8006f70:	4b29      	ldr	r3, [pc, #164]	; (8007018 <HAL_RCC_ClockConfig+0x260>)
 8006f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f74:	2202      	movs	r2, #2
 8006f76:	61ba      	str	r2, [r7, #24]
 8006f78:	69ba      	ldr	r2, [r7, #24]
 8006f7a:	fa92 f2a2 	rbit	r2, r2
 8006f7e:	617a      	str	r2, [r7, #20]
  return result;
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	fab2 f282 	clz	r2, r2
 8006f86:	b2d2      	uxtb	r2, r2
 8006f88:	f042 0220 	orr.w	r2, r2, #32
 8006f8c:	b2d2      	uxtb	r2, r2
 8006f8e:	f002 021f 	and.w	r2, r2, #31
 8006f92:	2101      	movs	r1, #1
 8006f94:	fa01 f202 	lsl.w	r2, r1, r2
 8006f98:	4013      	ands	r3, r2
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d101      	bne.n	8006fa2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e079      	b.n	8007096 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006fa2:	4b1d      	ldr	r3, [pc, #116]	; (8007018 <HAL_RCC_ClockConfig+0x260>)
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	f023 0203 	bic.w	r2, r3, #3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	491a      	ldr	r1, [pc, #104]	; (8007018 <HAL_RCC_ClockConfig+0x260>)
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006fb4:	f7fb ff88 	bl	8002ec8 <HAL_GetTick>
 8006fb8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fba:	e00a      	b.n	8006fd2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fbc:	f7fb ff84 	bl	8002ec8 <HAL_GetTick>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d901      	bls.n	8006fd2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e061      	b.n	8007096 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fd2:	4b11      	ldr	r3, [pc, #68]	; (8007018 <HAL_RCC_ClockConfig+0x260>)
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	f003 020c 	and.w	r2, r3, #12
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d1eb      	bne.n	8006fbc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006fe4:	4b0b      	ldr	r3, [pc, #44]	; (8007014 <HAL_RCC_ClockConfig+0x25c>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 0307 	and.w	r3, r3, #7
 8006fec:	683a      	ldr	r2, [r7, #0]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d214      	bcs.n	800701c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ff2:	4b08      	ldr	r3, [pc, #32]	; (8007014 <HAL_RCC_ClockConfig+0x25c>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f023 0207 	bic.w	r2, r3, #7
 8006ffa:	4906      	ldr	r1, [pc, #24]	; (8007014 <HAL_RCC_ClockConfig+0x25c>)
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007002:	4b04      	ldr	r3, [pc, #16]	; (8007014 <HAL_RCC_ClockConfig+0x25c>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 0307 	and.w	r3, r3, #7
 800700a:	683a      	ldr	r2, [r7, #0]
 800700c:	429a      	cmp	r2, r3
 800700e:	d005      	beq.n	800701c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e040      	b.n	8007096 <HAL_RCC_ClockConfig+0x2de>
 8007014:	40022000 	.word	0x40022000
 8007018:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 0304 	and.w	r3, r3, #4
 8007024:	2b00      	cmp	r3, #0
 8007026:	d008      	beq.n	800703a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007028:	4b1d      	ldr	r3, [pc, #116]	; (80070a0 <HAL_RCC_ClockConfig+0x2e8>)
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	491a      	ldr	r1, [pc, #104]	; (80070a0 <HAL_RCC_ClockConfig+0x2e8>)
 8007036:	4313      	orrs	r3, r2
 8007038:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 0308 	and.w	r3, r3, #8
 8007042:	2b00      	cmp	r3, #0
 8007044:	d009      	beq.n	800705a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007046:	4b16      	ldr	r3, [pc, #88]	; (80070a0 <HAL_RCC_ClockConfig+0x2e8>)
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	00db      	lsls	r3, r3, #3
 8007054:	4912      	ldr	r1, [pc, #72]	; (80070a0 <HAL_RCC_ClockConfig+0x2e8>)
 8007056:	4313      	orrs	r3, r2
 8007058:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800705a:	f000 f829 	bl	80070b0 <HAL_RCC_GetSysClockFreq>
 800705e:	4601      	mov	r1, r0
 8007060:	4b0f      	ldr	r3, [pc, #60]	; (80070a0 <HAL_RCC_ClockConfig+0x2e8>)
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007068:	22f0      	movs	r2, #240	; 0xf0
 800706a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	fa92 f2a2 	rbit	r2, r2
 8007072:	60fa      	str	r2, [r7, #12]
  return result;
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	fab2 f282 	clz	r2, r2
 800707a:	b2d2      	uxtb	r2, r2
 800707c:	40d3      	lsrs	r3, r2
 800707e:	4a09      	ldr	r2, [pc, #36]	; (80070a4 <HAL_RCC_ClockConfig+0x2ec>)
 8007080:	5cd3      	ldrb	r3, [r2, r3]
 8007082:	fa21 f303 	lsr.w	r3, r1, r3
 8007086:	4a08      	ldr	r2, [pc, #32]	; (80070a8 <HAL_RCC_ClockConfig+0x2f0>)
 8007088:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800708a:	4b08      	ldr	r3, [pc, #32]	; (80070ac <HAL_RCC_ClockConfig+0x2f4>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4618      	mov	r0, r3
 8007090:	f7fb fed6 	bl	8002e40 <HAL_InitTick>
  
  return HAL_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3778      	adds	r7, #120	; 0x78
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	40021000 	.word	0x40021000
 80070a4:	08008418 	.word	0x08008418
 80070a8:	20000000 	.word	0x20000000
 80070ac:	20000004 	.word	0x20000004

080070b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b08b      	sub	sp, #44	; 0x2c
 80070b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80070b6:	2300      	movs	r3, #0
 80070b8:	61fb      	str	r3, [r7, #28]
 80070ba:	2300      	movs	r3, #0
 80070bc:	61bb      	str	r3, [r7, #24]
 80070be:	2300      	movs	r3, #0
 80070c0:	627b      	str	r3, [r7, #36]	; 0x24
 80070c2:	2300      	movs	r3, #0
 80070c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80070c6:	2300      	movs	r3, #0
 80070c8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80070ca:	4b29      	ldr	r3, [pc, #164]	; (8007170 <HAL_RCC_GetSysClockFreq+0xc0>)
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	f003 030c 	and.w	r3, r3, #12
 80070d6:	2b04      	cmp	r3, #4
 80070d8:	d002      	beq.n	80070e0 <HAL_RCC_GetSysClockFreq+0x30>
 80070da:	2b08      	cmp	r3, #8
 80070dc:	d003      	beq.n	80070e6 <HAL_RCC_GetSysClockFreq+0x36>
 80070de:	e03c      	b.n	800715a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80070e0:	4b24      	ldr	r3, [pc, #144]	; (8007174 <HAL_RCC_GetSysClockFreq+0xc4>)
 80070e2:	623b      	str	r3, [r7, #32]
      break;
 80070e4:	e03c      	b.n	8007160 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80070ec:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80070f0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	fa92 f2a2 	rbit	r2, r2
 80070f8:	607a      	str	r2, [r7, #4]
  return result;
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	fab2 f282 	clz	r2, r2
 8007100:	b2d2      	uxtb	r2, r2
 8007102:	40d3      	lsrs	r3, r2
 8007104:	4a1c      	ldr	r2, [pc, #112]	; (8007178 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007106:	5cd3      	ldrb	r3, [r2, r3]
 8007108:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800710a:	4b19      	ldr	r3, [pc, #100]	; (8007170 <HAL_RCC_GetSysClockFreq+0xc0>)
 800710c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710e:	f003 030f 	and.w	r3, r3, #15
 8007112:	220f      	movs	r2, #15
 8007114:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007116:	693a      	ldr	r2, [r7, #16]
 8007118:	fa92 f2a2 	rbit	r2, r2
 800711c:	60fa      	str	r2, [r7, #12]
  return result;
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	fab2 f282 	clz	r2, r2
 8007124:	b2d2      	uxtb	r2, r2
 8007126:	40d3      	lsrs	r3, r2
 8007128:	4a14      	ldr	r2, [pc, #80]	; (800717c <HAL_RCC_GetSysClockFreq+0xcc>)
 800712a:	5cd3      	ldrb	r3, [r2, r3]
 800712c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007134:	2b00      	cmp	r3, #0
 8007136:	d008      	beq.n	800714a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007138:	4a0e      	ldr	r2, [pc, #56]	; (8007174 <HAL_RCC_GetSysClockFreq+0xc4>)
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	fb02 f303 	mul.w	r3, r2, r3
 8007146:	627b      	str	r3, [r7, #36]	; 0x24
 8007148:	e004      	b.n	8007154 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	4a0c      	ldr	r2, [pc, #48]	; (8007180 <HAL_RCC_GetSysClockFreq+0xd0>)
 800714e:	fb02 f303 	mul.w	r3, r2, r3
 8007152:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8007154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007156:	623b      	str	r3, [r7, #32]
      break;
 8007158:	e002      	b.n	8007160 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800715a:	4b0a      	ldr	r3, [pc, #40]	; (8007184 <HAL_RCC_GetSysClockFreq+0xd4>)
 800715c:	623b      	str	r3, [r7, #32]
      break;
 800715e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007160:	6a3b      	ldr	r3, [r7, #32]
}
 8007162:	4618      	mov	r0, r3
 8007164:	372c      	adds	r7, #44	; 0x2c
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	40021000 	.word	0x40021000
 8007174:	00f42400 	.word	0x00f42400
 8007178:	08008428 	.word	0x08008428
 800717c:	08008438 	.word	0x08008438
 8007180:	003d0900 	.word	0x003d0900
 8007184:	007a1200 	.word	0x007a1200

08007188 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b092      	sub	sp, #72	; 0x48
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007190:	2300      	movs	r3, #0
 8007192:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8007194:	2300      	movs	r3, #0
 8007196:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007198:	2300      	movs	r3, #0
 800719a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	f000 80d4 	beq.w	8007354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071ac:	4b4e      	ldr	r3, [pc, #312]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071ae:	69db      	ldr	r3, [r3, #28]
 80071b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10e      	bne.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071b8:	4b4b      	ldr	r3, [pc, #300]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071ba:	69db      	ldr	r3, [r3, #28]
 80071bc:	4a4a      	ldr	r2, [pc, #296]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071c2:	61d3      	str	r3, [r2, #28]
 80071c4:	4b48      	ldr	r3, [pc, #288]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071c6:	69db      	ldr	r3, [r3, #28]
 80071c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071cc:	60bb      	str	r3, [r7, #8]
 80071ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071d0:	2301      	movs	r3, #1
 80071d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071d6:	4b45      	ldr	r3, [pc, #276]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d118      	bne.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071e2:	4b42      	ldr	r3, [pc, #264]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a41      	ldr	r2, [pc, #260]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80071e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071ec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071ee:	f7fb fe6b 	bl	8002ec8 <HAL_GetTick>
 80071f2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071f4:	e008      	b.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071f6:	f7fb fe67 	bl	8002ec8 <HAL_GetTick>
 80071fa:	4602      	mov	r2, r0
 80071fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	2b64      	cmp	r3, #100	; 0x64
 8007202:	d901      	bls.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007204:	2303      	movs	r3, #3
 8007206:	e14b      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007208:	4b38      	ldr	r3, [pc, #224]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007210:	2b00      	cmp	r3, #0
 8007212:	d0f0      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007214:	4b34      	ldr	r3, [pc, #208]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007216:	6a1b      	ldr	r3, [r3, #32]
 8007218:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800721c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800721e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007220:	2b00      	cmp	r3, #0
 8007222:	f000 8084 	beq.w	800732e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800722e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007230:	429a      	cmp	r2, r3
 8007232:	d07c      	beq.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007234:	4b2c      	ldr	r3, [pc, #176]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007236:	6a1b      	ldr	r3, [r3, #32]
 8007238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800723c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800723e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007242:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007246:	fa93 f3a3 	rbit	r3, r3
 800724a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800724c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800724e:	fab3 f383 	clz	r3, r3
 8007252:	b2db      	uxtb	r3, r3
 8007254:	461a      	mov	r2, r3
 8007256:	4b26      	ldr	r3, [pc, #152]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007258:	4413      	add	r3, r2
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	461a      	mov	r2, r3
 800725e:	2301      	movs	r3, #1
 8007260:	6013      	str	r3, [r2, #0]
 8007262:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007266:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726a:	fa93 f3a3 	rbit	r3, r3
 800726e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007272:	fab3 f383 	clz	r3, r3
 8007276:	b2db      	uxtb	r3, r3
 8007278:	461a      	mov	r2, r3
 800727a:	4b1d      	ldr	r3, [pc, #116]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800727c:	4413      	add	r3, r2
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	461a      	mov	r2, r3
 8007282:	2300      	movs	r3, #0
 8007284:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007286:	4a18      	ldr	r2, [pc, #96]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800728a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800728c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800728e:	f003 0301 	and.w	r3, r3, #1
 8007292:	2b00      	cmp	r3, #0
 8007294:	d04b      	beq.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007296:	f7fb fe17 	bl	8002ec8 <HAL_GetTick>
 800729a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800729c:	e00a      	b.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800729e:	f7fb fe13 	bl	8002ec8 <HAL_GetTick>
 80072a2:	4602      	mov	r2, r0
 80072a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072a6:	1ad3      	subs	r3, r2, r3
 80072a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d901      	bls.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80072b0:	2303      	movs	r3, #3
 80072b2:	e0f5      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80072b4:	2302      	movs	r3, #2
 80072b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ba:	fa93 f3a3 	rbit	r3, r3
 80072be:	627b      	str	r3, [r7, #36]	; 0x24
 80072c0:	2302      	movs	r3, #2
 80072c2:	623b      	str	r3, [r7, #32]
 80072c4:	6a3b      	ldr	r3, [r7, #32]
 80072c6:	fa93 f3a3 	rbit	r3, r3
 80072ca:	61fb      	str	r3, [r7, #28]
  return result;
 80072cc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072ce:	fab3 f383 	clz	r3, r3
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	095b      	lsrs	r3, r3, #5
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	f043 0302 	orr.w	r3, r3, #2
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	2b02      	cmp	r3, #2
 80072e0:	d108      	bne.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80072e2:	4b01      	ldr	r3, [pc, #4]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072e4:	6a1b      	ldr	r3, [r3, #32]
 80072e6:	e00d      	b.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80072e8:	40021000 	.word	0x40021000
 80072ec:	40007000 	.word	0x40007000
 80072f0:	10908100 	.word	0x10908100
 80072f4:	2302      	movs	r3, #2
 80072f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	fa93 f3a3 	rbit	r3, r3
 80072fe:	617b      	str	r3, [r7, #20]
 8007300:	4b69      	ldr	r3, [pc, #420]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007304:	2202      	movs	r2, #2
 8007306:	613a      	str	r2, [r7, #16]
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	fa92 f2a2 	rbit	r2, r2
 800730e:	60fa      	str	r2, [r7, #12]
  return result;
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	fab2 f282 	clz	r2, r2
 8007316:	b2d2      	uxtb	r2, r2
 8007318:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800731c:	b2d2      	uxtb	r2, r2
 800731e:	f002 021f 	and.w	r2, r2, #31
 8007322:	2101      	movs	r1, #1
 8007324:	fa01 f202 	lsl.w	r2, r1, r2
 8007328:	4013      	ands	r3, r2
 800732a:	2b00      	cmp	r3, #0
 800732c:	d0b7      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800732e:	4b5e      	ldr	r3, [pc, #376]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007330:	6a1b      	ldr	r3, [r3, #32]
 8007332:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	495b      	ldr	r1, [pc, #364]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800733c:	4313      	orrs	r3, r2
 800733e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007340:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007344:	2b01      	cmp	r3, #1
 8007346:	d105      	bne.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007348:	4b57      	ldr	r3, [pc, #348]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800734a:	69db      	ldr	r3, [r3, #28]
 800734c:	4a56      	ldr	r2, [pc, #344]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800734e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007352:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0301 	and.w	r3, r3, #1
 800735c:	2b00      	cmp	r3, #0
 800735e:	d008      	beq.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007360:	4b51      	ldr	r3, [pc, #324]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007364:	f023 0203 	bic.w	r2, r3, #3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	494e      	ldr	r1, [pc, #312]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800736e:	4313      	orrs	r3, r2
 8007370:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 0320 	and.w	r3, r3, #32
 800737a:	2b00      	cmp	r3, #0
 800737c:	d008      	beq.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800737e:	4b4a      	ldr	r3, [pc, #296]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007382:	f023 0210 	bic.w	r2, r3, #16
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	4947      	ldr	r1, [pc, #284]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800738c:	4313      	orrs	r3, r2
 800738e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007398:	2b00      	cmp	r3, #0
 800739a:	d008      	beq.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800739c:	4b42      	ldr	r3, [pc, #264]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a8:	493f      	ldr	r1, [pc, #252]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80073aa:	4313      	orrs	r3, r2
 80073ac:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d008      	beq.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80073ba:	4b3b      	ldr	r3, [pc, #236]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80073bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073be:	f023 0220 	bic.w	r2, r3, #32
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	4938      	ldr	r1, [pc, #224]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80073c8:	4313      	orrs	r3, r2
 80073ca:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d008      	beq.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80073d8:	4b33      	ldr	r3, [pc, #204]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80073da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073dc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	695b      	ldr	r3, [r3, #20]
 80073e4:	4930      	ldr	r1, [pc, #192]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80073e6:	4313      	orrs	r3, r2
 80073e8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d008      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80073f6:	4b2c      	ldr	r3, [pc, #176]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	69db      	ldr	r3, [r3, #28]
 8007402:	4929      	ldr	r1, [pc, #164]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007404:	4313      	orrs	r3, r2
 8007406:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007410:	2b00      	cmp	r3, #0
 8007412:	d008      	beq.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8007414:	4b24      	ldr	r3, [pc, #144]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007418:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	4921      	ldr	r1, [pc, #132]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007422:	4313      	orrs	r3, r2
 8007424:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800742e:	2b00      	cmp	r3, #0
 8007430:	d008      	beq.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007432:	4b1d      	ldr	r3, [pc, #116]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007436:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a1b      	ldr	r3, [r3, #32]
 800743e:	491a      	ldr	r1, [pc, #104]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007440:	4313      	orrs	r3, r2
 8007442:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800744c:	2b00      	cmp	r3, #0
 800744e:	d008      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8007450:	4b15      	ldr	r3, [pc, #84]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007454:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745c:	4912      	ldr	r1, [pc, #72]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800745e:	4313      	orrs	r3, r2
 8007460:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800746a:	2b00      	cmp	r3, #0
 800746c:	d008      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800746e:	4b0e      	ldr	r3, [pc, #56]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007472:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747a:	490b      	ldr	r1, [pc, #44]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800747c:	4313      	orrs	r3, r2
 800747e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007488:	2b00      	cmp	r3, #0
 800748a:	d008      	beq.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800748c:	4b06      	ldr	r3, [pc, #24]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800748e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007490:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007498:	4903      	ldr	r1, [pc, #12]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800749a:	4313      	orrs	r3, r2
 800749c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3748      	adds	r7, #72	; 0x48
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	40021000 	.word	0x40021000

080074ac <memset>:
 80074ac:	4402      	add	r2, r0
 80074ae:	4603      	mov	r3, r0
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d100      	bne.n	80074b6 <memset+0xa>
 80074b4:	4770      	bx	lr
 80074b6:	f803 1b01 	strb.w	r1, [r3], #1
 80074ba:	e7f9      	b.n	80074b0 <memset+0x4>

080074bc <__errno>:
 80074bc:	4b01      	ldr	r3, [pc, #4]	; (80074c4 <__errno+0x8>)
 80074be:	6818      	ldr	r0, [r3, #0]
 80074c0:	4770      	bx	lr
 80074c2:	bf00      	nop
 80074c4:	20000058 	.word	0x20000058

080074c8 <__libc_init_array>:
 80074c8:	b570      	push	{r4, r5, r6, lr}
 80074ca:	4d0d      	ldr	r5, [pc, #52]	; (8007500 <__libc_init_array+0x38>)
 80074cc:	4c0d      	ldr	r4, [pc, #52]	; (8007504 <__libc_init_array+0x3c>)
 80074ce:	1b64      	subs	r4, r4, r5
 80074d0:	10a4      	asrs	r4, r4, #2
 80074d2:	2600      	movs	r6, #0
 80074d4:	42a6      	cmp	r6, r4
 80074d6:	d109      	bne.n	80074ec <__libc_init_array+0x24>
 80074d8:	4d0b      	ldr	r5, [pc, #44]	; (8007508 <__libc_init_array+0x40>)
 80074da:	4c0c      	ldr	r4, [pc, #48]	; (800750c <__libc_init_array+0x44>)
 80074dc:	f000 ff8a 	bl	80083f4 <_init>
 80074e0:	1b64      	subs	r4, r4, r5
 80074e2:	10a4      	asrs	r4, r4, #2
 80074e4:	2600      	movs	r6, #0
 80074e6:	42a6      	cmp	r6, r4
 80074e8:	d105      	bne.n	80074f6 <__libc_init_array+0x2e>
 80074ea:	bd70      	pop	{r4, r5, r6, pc}
 80074ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80074f0:	4798      	blx	r3
 80074f2:	3601      	adds	r6, #1
 80074f4:	e7ee      	b.n	80074d4 <__libc_init_array+0xc>
 80074f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80074fa:	4798      	blx	r3
 80074fc:	3601      	adds	r6, #1
 80074fe:	e7f2      	b.n	80074e6 <__libc_init_array+0x1e>
 8007500:	08008478 	.word	0x08008478
 8007504:	08008478 	.word	0x08008478
 8007508:	08008478 	.word	0x08008478
 800750c:	0800847c 	.word	0x0800847c

08007510 <memcpy>:
 8007510:	440a      	add	r2, r1
 8007512:	4291      	cmp	r1, r2
 8007514:	f100 33ff 	add.w	r3, r0, #4294967295
 8007518:	d100      	bne.n	800751c <memcpy+0xc>
 800751a:	4770      	bx	lr
 800751c:	b510      	push	{r4, lr}
 800751e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007522:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007526:	4291      	cmp	r1, r2
 8007528:	d1f9      	bne.n	800751e <memcpy+0xe>
 800752a:	bd10      	pop	{r4, pc}

0800752c <pow>:
 800752c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800752e:	ed2d 8b02 	vpush	{d8}
 8007532:	eeb0 8a40 	vmov.f32	s16, s0
 8007536:	eef0 8a60 	vmov.f32	s17, s1
 800753a:	ec55 4b11 	vmov	r4, r5, d1
 800753e:	f000 f977 	bl	8007830 <__ieee754_pow>
 8007542:	4622      	mov	r2, r4
 8007544:	462b      	mov	r3, r5
 8007546:	4620      	mov	r0, r4
 8007548:	4629      	mov	r1, r5
 800754a:	ec57 6b10 	vmov	r6, r7, d0
 800754e:	f7f9 fa91 	bl	8000a74 <__aeabi_dcmpun>
 8007552:	2800      	cmp	r0, #0
 8007554:	d13b      	bne.n	80075ce <pow+0xa2>
 8007556:	ec51 0b18 	vmov	r0, r1, d8
 800755a:	2200      	movs	r2, #0
 800755c:	2300      	movs	r3, #0
 800755e:	f7f9 fa57 	bl	8000a10 <__aeabi_dcmpeq>
 8007562:	b1b8      	cbz	r0, 8007594 <pow+0x68>
 8007564:	2200      	movs	r2, #0
 8007566:	2300      	movs	r3, #0
 8007568:	4620      	mov	r0, r4
 800756a:	4629      	mov	r1, r5
 800756c:	f7f9 fa50 	bl	8000a10 <__aeabi_dcmpeq>
 8007570:	2800      	cmp	r0, #0
 8007572:	d146      	bne.n	8007602 <pow+0xd6>
 8007574:	ec45 4b10 	vmov	d0, r4, r5
 8007578:	f000 f874 	bl	8007664 <finite>
 800757c:	b338      	cbz	r0, 80075ce <pow+0xa2>
 800757e:	2200      	movs	r2, #0
 8007580:	2300      	movs	r3, #0
 8007582:	4620      	mov	r0, r4
 8007584:	4629      	mov	r1, r5
 8007586:	f7f9 fa4d 	bl	8000a24 <__aeabi_dcmplt>
 800758a:	b300      	cbz	r0, 80075ce <pow+0xa2>
 800758c:	f7ff ff96 	bl	80074bc <__errno>
 8007590:	2322      	movs	r3, #34	; 0x22
 8007592:	e01b      	b.n	80075cc <pow+0xa0>
 8007594:	ec47 6b10 	vmov	d0, r6, r7
 8007598:	f000 f864 	bl	8007664 <finite>
 800759c:	b9e0      	cbnz	r0, 80075d8 <pow+0xac>
 800759e:	eeb0 0a48 	vmov.f32	s0, s16
 80075a2:	eef0 0a68 	vmov.f32	s1, s17
 80075a6:	f000 f85d 	bl	8007664 <finite>
 80075aa:	b1a8      	cbz	r0, 80075d8 <pow+0xac>
 80075ac:	ec45 4b10 	vmov	d0, r4, r5
 80075b0:	f000 f858 	bl	8007664 <finite>
 80075b4:	b180      	cbz	r0, 80075d8 <pow+0xac>
 80075b6:	4632      	mov	r2, r6
 80075b8:	463b      	mov	r3, r7
 80075ba:	4630      	mov	r0, r6
 80075bc:	4639      	mov	r1, r7
 80075be:	f7f9 fa59 	bl	8000a74 <__aeabi_dcmpun>
 80075c2:	2800      	cmp	r0, #0
 80075c4:	d0e2      	beq.n	800758c <pow+0x60>
 80075c6:	f7ff ff79 	bl	80074bc <__errno>
 80075ca:	2321      	movs	r3, #33	; 0x21
 80075cc:	6003      	str	r3, [r0, #0]
 80075ce:	ecbd 8b02 	vpop	{d8}
 80075d2:	ec47 6b10 	vmov	d0, r6, r7
 80075d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075d8:	2200      	movs	r2, #0
 80075da:	2300      	movs	r3, #0
 80075dc:	4630      	mov	r0, r6
 80075de:	4639      	mov	r1, r7
 80075e0:	f7f9 fa16 	bl	8000a10 <__aeabi_dcmpeq>
 80075e4:	2800      	cmp	r0, #0
 80075e6:	d0f2      	beq.n	80075ce <pow+0xa2>
 80075e8:	eeb0 0a48 	vmov.f32	s0, s16
 80075ec:	eef0 0a68 	vmov.f32	s1, s17
 80075f0:	f000 f838 	bl	8007664 <finite>
 80075f4:	2800      	cmp	r0, #0
 80075f6:	d0ea      	beq.n	80075ce <pow+0xa2>
 80075f8:	ec45 4b10 	vmov	d0, r4, r5
 80075fc:	f000 f832 	bl	8007664 <finite>
 8007600:	e7c3      	b.n	800758a <pow+0x5e>
 8007602:	4f01      	ldr	r7, [pc, #4]	; (8007608 <pow+0xdc>)
 8007604:	2600      	movs	r6, #0
 8007606:	e7e2      	b.n	80075ce <pow+0xa2>
 8007608:	3ff00000 	.word	0x3ff00000

0800760c <sqrt>:
 800760c:	b538      	push	{r3, r4, r5, lr}
 800760e:	ed2d 8b02 	vpush	{d8}
 8007612:	ec55 4b10 	vmov	r4, r5, d0
 8007616:	f000 f831 	bl	800767c <__ieee754_sqrt>
 800761a:	4622      	mov	r2, r4
 800761c:	462b      	mov	r3, r5
 800761e:	4620      	mov	r0, r4
 8007620:	4629      	mov	r1, r5
 8007622:	eeb0 8a40 	vmov.f32	s16, s0
 8007626:	eef0 8a60 	vmov.f32	s17, s1
 800762a:	f7f9 fa23 	bl	8000a74 <__aeabi_dcmpun>
 800762e:	b990      	cbnz	r0, 8007656 <sqrt+0x4a>
 8007630:	2200      	movs	r2, #0
 8007632:	2300      	movs	r3, #0
 8007634:	4620      	mov	r0, r4
 8007636:	4629      	mov	r1, r5
 8007638:	f7f9 f9f4 	bl	8000a24 <__aeabi_dcmplt>
 800763c:	b158      	cbz	r0, 8007656 <sqrt+0x4a>
 800763e:	f7ff ff3d 	bl	80074bc <__errno>
 8007642:	2321      	movs	r3, #33	; 0x21
 8007644:	6003      	str	r3, [r0, #0]
 8007646:	2200      	movs	r2, #0
 8007648:	2300      	movs	r3, #0
 800764a:	4610      	mov	r0, r2
 800764c:	4619      	mov	r1, r3
 800764e:	f7f9 f8a1 	bl	8000794 <__aeabi_ddiv>
 8007652:	ec41 0b18 	vmov	d8, r0, r1
 8007656:	eeb0 0a48 	vmov.f32	s0, s16
 800765a:	eef0 0a68 	vmov.f32	s1, s17
 800765e:	ecbd 8b02 	vpop	{d8}
 8007662:	bd38      	pop	{r3, r4, r5, pc}

08007664 <finite>:
 8007664:	b082      	sub	sp, #8
 8007666:	ed8d 0b00 	vstr	d0, [sp]
 800766a:	9801      	ldr	r0, [sp, #4]
 800766c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007670:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007674:	0fc0      	lsrs	r0, r0, #31
 8007676:	b002      	add	sp, #8
 8007678:	4770      	bx	lr
	...

0800767c <__ieee754_sqrt>:
 800767c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007680:	ec55 4b10 	vmov	r4, r5, d0
 8007684:	4e67      	ldr	r6, [pc, #412]	; (8007824 <__ieee754_sqrt+0x1a8>)
 8007686:	43ae      	bics	r6, r5
 8007688:	ee10 0a10 	vmov	r0, s0
 800768c:	ee10 2a10 	vmov	r2, s0
 8007690:	4629      	mov	r1, r5
 8007692:	462b      	mov	r3, r5
 8007694:	d10d      	bne.n	80076b2 <__ieee754_sqrt+0x36>
 8007696:	f7f8 ff53 	bl	8000540 <__aeabi_dmul>
 800769a:	4602      	mov	r2, r0
 800769c:	460b      	mov	r3, r1
 800769e:	4620      	mov	r0, r4
 80076a0:	4629      	mov	r1, r5
 80076a2:	f7f8 fd97 	bl	80001d4 <__adddf3>
 80076a6:	4604      	mov	r4, r0
 80076a8:	460d      	mov	r5, r1
 80076aa:	ec45 4b10 	vmov	d0, r4, r5
 80076ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076b2:	2d00      	cmp	r5, #0
 80076b4:	dc0b      	bgt.n	80076ce <__ieee754_sqrt+0x52>
 80076b6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80076ba:	4326      	orrs	r6, r4
 80076bc:	d0f5      	beq.n	80076aa <__ieee754_sqrt+0x2e>
 80076be:	b135      	cbz	r5, 80076ce <__ieee754_sqrt+0x52>
 80076c0:	f7f8 fd86 	bl	80001d0 <__aeabi_dsub>
 80076c4:	4602      	mov	r2, r0
 80076c6:	460b      	mov	r3, r1
 80076c8:	f7f9 f864 	bl	8000794 <__aeabi_ddiv>
 80076cc:	e7eb      	b.n	80076a6 <__ieee754_sqrt+0x2a>
 80076ce:	1509      	asrs	r1, r1, #20
 80076d0:	f000 808d 	beq.w	80077ee <__ieee754_sqrt+0x172>
 80076d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076d8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80076dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076e0:	07c9      	lsls	r1, r1, #31
 80076e2:	bf5c      	itt	pl
 80076e4:	005b      	lslpl	r3, r3, #1
 80076e6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80076ea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80076ee:	bf58      	it	pl
 80076f0:	0052      	lslpl	r2, r2, #1
 80076f2:	2500      	movs	r5, #0
 80076f4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80076f8:	1076      	asrs	r6, r6, #1
 80076fa:	0052      	lsls	r2, r2, #1
 80076fc:	f04f 0e16 	mov.w	lr, #22
 8007700:	46ac      	mov	ip, r5
 8007702:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007706:	eb0c 0001 	add.w	r0, ip, r1
 800770a:	4298      	cmp	r0, r3
 800770c:	bfde      	ittt	le
 800770e:	1a1b      	suble	r3, r3, r0
 8007710:	eb00 0c01 	addle.w	ip, r0, r1
 8007714:	186d      	addle	r5, r5, r1
 8007716:	005b      	lsls	r3, r3, #1
 8007718:	f1be 0e01 	subs.w	lr, lr, #1
 800771c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007720:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007724:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007728:	d1ed      	bne.n	8007706 <__ieee754_sqrt+0x8a>
 800772a:	4674      	mov	r4, lr
 800772c:	2720      	movs	r7, #32
 800772e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007732:	4563      	cmp	r3, ip
 8007734:	eb01 000e 	add.w	r0, r1, lr
 8007738:	dc02      	bgt.n	8007740 <__ieee754_sqrt+0xc4>
 800773a:	d113      	bne.n	8007764 <__ieee754_sqrt+0xe8>
 800773c:	4290      	cmp	r0, r2
 800773e:	d811      	bhi.n	8007764 <__ieee754_sqrt+0xe8>
 8007740:	2800      	cmp	r0, #0
 8007742:	eb00 0e01 	add.w	lr, r0, r1
 8007746:	da57      	bge.n	80077f8 <__ieee754_sqrt+0x17c>
 8007748:	f1be 0f00 	cmp.w	lr, #0
 800774c:	db54      	blt.n	80077f8 <__ieee754_sqrt+0x17c>
 800774e:	f10c 0801 	add.w	r8, ip, #1
 8007752:	eba3 030c 	sub.w	r3, r3, ip
 8007756:	4290      	cmp	r0, r2
 8007758:	bf88      	it	hi
 800775a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800775e:	1a12      	subs	r2, r2, r0
 8007760:	440c      	add	r4, r1
 8007762:	46c4      	mov	ip, r8
 8007764:	005b      	lsls	r3, r3, #1
 8007766:	3f01      	subs	r7, #1
 8007768:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800776c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007770:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007774:	d1dd      	bne.n	8007732 <__ieee754_sqrt+0xb6>
 8007776:	4313      	orrs	r3, r2
 8007778:	d01b      	beq.n	80077b2 <__ieee754_sqrt+0x136>
 800777a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8007828 <__ieee754_sqrt+0x1ac>
 800777e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800782c <__ieee754_sqrt+0x1b0>
 8007782:	e9da 0100 	ldrd	r0, r1, [sl]
 8007786:	e9db 2300 	ldrd	r2, r3, [fp]
 800778a:	f7f8 fd21 	bl	80001d0 <__aeabi_dsub>
 800778e:	e9da 8900 	ldrd	r8, r9, [sl]
 8007792:	4602      	mov	r2, r0
 8007794:	460b      	mov	r3, r1
 8007796:	4640      	mov	r0, r8
 8007798:	4649      	mov	r1, r9
 800779a:	f7f9 f94d 	bl	8000a38 <__aeabi_dcmple>
 800779e:	b140      	cbz	r0, 80077b2 <__ieee754_sqrt+0x136>
 80077a0:	f1b4 3fff 	cmp.w	r4, #4294967295
 80077a4:	e9da 0100 	ldrd	r0, r1, [sl]
 80077a8:	e9db 2300 	ldrd	r2, r3, [fp]
 80077ac:	d126      	bne.n	80077fc <__ieee754_sqrt+0x180>
 80077ae:	3501      	adds	r5, #1
 80077b0:	463c      	mov	r4, r7
 80077b2:	106a      	asrs	r2, r5, #1
 80077b4:	0863      	lsrs	r3, r4, #1
 80077b6:	07e9      	lsls	r1, r5, #31
 80077b8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80077bc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80077c0:	bf48      	it	mi
 80077c2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80077c6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80077ca:	461c      	mov	r4, r3
 80077cc:	e76d      	b.n	80076aa <__ieee754_sqrt+0x2e>
 80077ce:	0ad3      	lsrs	r3, r2, #11
 80077d0:	3815      	subs	r0, #21
 80077d2:	0552      	lsls	r2, r2, #21
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d0fa      	beq.n	80077ce <__ieee754_sqrt+0x152>
 80077d8:	02dc      	lsls	r4, r3, #11
 80077da:	d50a      	bpl.n	80077f2 <__ieee754_sqrt+0x176>
 80077dc:	f1c1 0420 	rsb	r4, r1, #32
 80077e0:	fa22 f404 	lsr.w	r4, r2, r4
 80077e4:	1e4d      	subs	r5, r1, #1
 80077e6:	408a      	lsls	r2, r1
 80077e8:	4323      	orrs	r3, r4
 80077ea:	1b41      	subs	r1, r0, r5
 80077ec:	e772      	b.n	80076d4 <__ieee754_sqrt+0x58>
 80077ee:	4608      	mov	r0, r1
 80077f0:	e7f0      	b.n	80077d4 <__ieee754_sqrt+0x158>
 80077f2:	005b      	lsls	r3, r3, #1
 80077f4:	3101      	adds	r1, #1
 80077f6:	e7ef      	b.n	80077d8 <__ieee754_sqrt+0x15c>
 80077f8:	46e0      	mov	r8, ip
 80077fa:	e7aa      	b.n	8007752 <__ieee754_sqrt+0xd6>
 80077fc:	f7f8 fcea 	bl	80001d4 <__adddf3>
 8007800:	e9da 8900 	ldrd	r8, r9, [sl]
 8007804:	4602      	mov	r2, r0
 8007806:	460b      	mov	r3, r1
 8007808:	4640      	mov	r0, r8
 800780a:	4649      	mov	r1, r9
 800780c:	f7f9 f90a 	bl	8000a24 <__aeabi_dcmplt>
 8007810:	b120      	cbz	r0, 800781c <__ieee754_sqrt+0x1a0>
 8007812:	1ca0      	adds	r0, r4, #2
 8007814:	bf08      	it	eq
 8007816:	3501      	addeq	r5, #1
 8007818:	3402      	adds	r4, #2
 800781a:	e7ca      	b.n	80077b2 <__ieee754_sqrt+0x136>
 800781c:	3401      	adds	r4, #1
 800781e:	f024 0401 	bic.w	r4, r4, #1
 8007822:	e7c6      	b.n	80077b2 <__ieee754_sqrt+0x136>
 8007824:	7ff00000 	.word	0x7ff00000
 8007828:	20000060 	.word	0x20000060
 800782c:	20000068 	.word	0x20000068

08007830 <__ieee754_pow>:
 8007830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007834:	ed2d 8b06 	vpush	{d8-d10}
 8007838:	b089      	sub	sp, #36	; 0x24
 800783a:	ed8d 1b00 	vstr	d1, [sp]
 800783e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8007842:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8007846:	ea58 0102 	orrs.w	r1, r8, r2
 800784a:	ec57 6b10 	vmov	r6, r7, d0
 800784e:	d115      	bne.n	800787c <__ieee754_pow+0x4c>
 8007850:	19b3      	adds	r3, r6, r6
 8007852:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8007856:	4152      	adcs	r2, r2
 8007858:	4299      	cmp	r1, r3
 800785a:	4b89      	ldr	r3, [pc, #548]	; (8007a80 <__ieee754_pow+0x250>)
 800785c:	4193      	sbcs	r3, r2
 800785e:	f080 84d1 	bcs.w	8008204 <__ieee754_pow+0x9d4>
 8007862:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007866:	4630      	mov	r0, r6
 8007868:	4639      	mov	r1, r7
 800786a:	f7f8 fcb3 	bl	80001d4 <__adddf3>
 800786e:	ec41 0b10 	vmov	d0, r0, r1
 8007872:	b009      	add	sp, #36	; 0x24
 8007874:	ecbd 8b06 	vpop	{d8-d10}
 8007878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800787c:	4b81      	ldr	r3, [pc, #516]	; (8007a84 <__ieee754_pow+0x254>)
 800787e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8007882:	429c      	cmp	r4, r3
 8007884:	ee10 aa10 	vmov	sl, s0
 8007888:	463d      	mov	r5, r7
 800788a:	dc06      	bgt.n	800789a <__ieee754_pow+0x6a>
 800788c:	d101      	bne.n	8007892 <__ieee754_pow+0x62>
 800788e:	2e00      	cmp	r6, #0
 8007890:	d1e7      	bne.n	8007862 <__ieee754_pow+0x32>
 8007892:	4598      	cmp	r8, r3
 8007894:	dc01      	bgt.n	800789a <__ieee754_pow+0x6a>
 8007896:	d10f      	bne.n	80078b8 <__ieee754_pow+0x88>
 8007898:	b172      	cbz	r2, 80078b8 <__ieee754_pow+0x88>
 800789a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800789e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80078a2:	ea55 050a 	orrs.w	r5, r5, sl
 80078a6:	d1dc      	bne.n	8007862 <__ieee754_pow+0x32>
 80078a8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80078ac:	18db      	adds	r3, r3, r3
 80078ae:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80078b2:	4152      	adcs	r2, r2
 80078b4:	429d      	cmp	r5, r3
 80078b6:	e7d0      	b.n	800785a <__ieee754_pow+0x2a>
 80078b8:	2d00      	cmp	r5, #0
 80078ba:	da3b      	bge.n	8007934 <__ieee754_pow+0x104>
 80078bc:	4b72      	ldr	r3, [pc, #456]	; (8007a88 <__ieee754_pow+0x258>)
 80078be:	4598      	cmp	r8, r3
 80078c0:	dc51      	bgt.n	8007966 <__ieee754_pow+0x136>
 80078c2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80078c6:	4598      	cmp	r8, r3
 80078c8:	f340 84ab 	ble.w	8008222 <__ieee754_pow+0x9f2>
 80078cc:	ea4f 5328 	mov.w	r3, r8, asr #20
 80078d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80078d4:	2b14      	cmp	r3, #20
 80078d6:	dd0f      	ble.n	80078f8 <__ieee754_pow+0xc8>
 80078d8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80078dc:	fa22 f103 	lsr.w	r1, r2, r3
 80078e0:	fa01 f303 	lsl.w	r3, r1, r3
 80078e4:	4293      	cmp	r3, r2
 80078e6:	f040 849c 	bne.w	8008222 <__ieee754_pow+0x9f2>
 80078ea:	f001 0101 	and.w	r1, r1, #1
 80078ee:	f1c1 0302 	rsb	r3, r1, #2
 80078f2:	9304      	str	r3, [sp, #16]
 80078f4:	b182      	cbz	r2, 8007918 <__ieee754_pow+0xe8>
 80078f6:	e05f      	b.n	80079b8 <__ieee754_pow+0x188>
 80078f8:	2a00      	cmp	r2, #0
 80078fa:	d15b      	bne.n	80079b4 <__ieee754_pow+0x184>
 80078fc:	f1c3 0314 	rsb	r3, r3, #20
 8007900:	fa48 f103 	asr.w	r1, r8, r3
 8007904:	fa01 f303 	lsl.w	r3, r1, r3
 8007908:	4543      	cmp	r3, r8
 800790a:	f040 8487 	bne.w	800821c <__ieee754_pow+0x9ec>
 800790e:	f001 0101 	and.w	r1, r1, #1
 8007912:	f1c1 0302 	rsb	r3, r1, #2
 8007916:	9304      	str	r3, [sp, #16]
 8007918:	4b5c      	ldr	r3, [pc, #368]	; (8007a8c <__ieee754_pow+0x25c>)
 800791a:	4598      	cmp	r8, r3
 800791c:	d132      	bne.n	8007984 <__ieee754_pow+0x154>
 800791e:	f1b9 0f00 	cmp.w	r9, #0
 8007922:	f280 8477 	bge.w	8008214 <__ieee754_pow+0x9e4>
 8007926:	4959      	ldr	r1, [pc, #356]	; (8007a8c <__ieee754_pow+0x25c>)
 8007928:	4632      	mov	r2, r6
 800792a:	463b      	mov	r3, r7
 800792c:	2000      	movs	r0, #0
 800792e:	f7f8 ff31 	bl	8000794 <__aeabi_ddiv>
 8007932:	e79c      	b.n	800786e <__ieee754_pow+0x3e>
 8007934:	2300      	movs	r3, #0
 8007936:	9304      	str	r3, [sp, #16]
 8007938:	2a00      	cmp	r2, #0
 800793a:	d13d      	bne.n	80079b8 <__ieee754_pow+0x188>
 800793c:	4b51      	ldr	r3, [pc, #324]	; (8007a84 <__ieee754_pow+0x254>)
 800793e:	4598      	cmp	r8, r3
 8007940:	d1ea      	bne.n	8007918 <__ieee754_pow+0xe8>
 8007942:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007946:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800794a:	ea53 030a 	orrs.w	r3, r3, sl
 800794e:	f000 8459 	beq.w	8008204 <__ieee754_pow+0x9d4>
 8007952:	4b4f      	ldr	r3, [pc, #316]	; (8007a90 <__ieee754_pow+0x260>)
 8007954:	429c      	cmp	r4, r3
 8007956:	dd08      	ble.n	800796a <__ieee754_pow+0x13a>
 8007958:	f1b9 0f00 	cmp.w	r9, #0
 800795c:	f2c0 8456 	blt.w	800820c <__ieee754_pow+0x9dc>
 8007960:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007964:	e783      	b.n	800786e <__ieee754_pow+0x3e>
 8007966:	2302      	movs	r3, #2
 8007968:	e7e5      	b.n	8007936 <__ieee754_pow+0x106>
 800796a:	f1b9 0f00 	cmp.w	r9, #0
 800796e:	f04f 0000 	mov.w	r0, #0
 8007972:	f04f 0100 	mov.w	r1, #0
 8007976:	f6bf af7a 	bge.w	800786e <__ieee754_pow+0x3e>
 800797a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800797e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007982:	e774      	b.n	800786e <__ieee754_pow+0x3e>
 8007984:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007988:	d106      	bne.n	8007998 <__ieee754_pow+0x168>
 800798a:	4632      	mov	r2, r6
 800798c:	463b      	mov	r3, r7
 800798e:	4630      	mov	r0, r6
 8007990:	4639      	mov	r1, r7
 8007992:	f7f8 fdd5 	bl	8000540 <__aeabi_dmul>
 8007996:	e76a      	b.n	800786e <__ieee754_pow+0x3e>
 8007998:	4b3e      	ldr	r3, [pc, #248]	; (8007a94 <__ieee754_pow+0x264>)
 800799a:	4599      	cmp	r9, r3
 800799c:	d10c      	bne.n	80079b8 <__ieee754_pow+0x188>
 800799e:	2d00      	cmp	r5, #0
 80079a0:	db0a      	blt.n	80079b8 <__ieee754_pow+0x188>
 80079a2:	ec47 6b10 	vmov	d0, r6, r7
 80079a6:	b009      	add	sp, #36	; 0x24
 80079a8:	ecbd 8b06 	vpop	{d8-d10}
 80079ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079b0:	f7ff be64 	b.w	800767c <__ieee754_sqrt>
 80079b4:	2300      	movs	r3, #0
 80079b6:	9304      	str	r3, [sp, #16]
 80079b8:	ec47 6b10 	vmov	d0, r6, r7
 80079bc:	f000 fc62 	bl	8008284 <fabs>
 80079c0:	ec51 0b10 	vmov	r0, r1, d0
 80079c4:	f1ba 0f00 	cmp.w	sl, #0
 80079c8:	d129      	bne.n	8007a1e <__ieee754_pow+0x1ee>
 80079ca:	b124      	cbz	r4, 80079d6 <__ieee754_pow+0x1a6>
 80079cc:	4b2f      	ldr	r3, [pc, #188]	; (8007a8c <__ieee754_pow+0x25c>)
 80079ce:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d123      	bne.n	8007a1e <__ieee754_pow+0x1ee>
 80079d6:	f1b9 0f00 	cmp.w	r9, #0
 80079da:	da05      	bge.n	80079e8 <__ieee754_pow+0x1b8>
 80079dc:	4602      	mov	r2, r0
 80079de:	460b      	mov	r3, r1
 80079e0:	2000      	movs	r0, #0
 80079e2:	492a      	ldr	r1, [pc, #168]	; (8007a8c <__ieee754_pow+0x25c>)
 80079e4:	f7f8 fed6 	bl	8000794 <__aeabi_ddiv>
 80079e8:	2d00      	cmp	r5, #0
 80079ea:	f6bf af40 	bge.w	800786e <__ieee754_pow+0x3e>
 80079ee:	9b04      	ldr	r3, [sp, #16]
 80079f0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80079f4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80079f8:	431c      	orrs	r4, r3
 80079fa:	d108      	bne.n	8007a0e <__ieee754_pow+0x1de>
 80079fc:	4602      	mov	r2, r0
 80079fe:	460b      	mov	r3, r1
 8007a00:	4610      	mov	r0, r2
 8007a02:	4619      	mov	r1, r3
 8007a04:	f7f8 fbe4 	bl	80001d0 <__aeabi_dsub>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	e78f      	b.n	800792e <__ieee754_pow+0xfe>
 8007a0e:	9b04      	ldr	r3, [sp, #16]
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	f47f af2c 	bne.w	800786e <__ieee754_pow+0x3e>
 8007a16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	e727      	b.n	800786e <__ieee754_pow+0x3e>
 8007a1e:	0feb      	lsrs	r3, r5, #31
 8007a20:	3b01      	subs	r3, #1
 8007a22:	9306      	str	r3, [sp, #24]
 8007a24:	9a06      	ldr	r2, [sp, #24]
 8007a26:	9b04      	ldr	r3, [sp, #16]
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	d102      	bne.n	8007a32 <__ieee754_pow+0x202>
 8007a2c:	4632      	mov	r2, r6
 8007a2e:	463b      	mov	r3, r7
 8007a30:	e7e6      	b.n	8007a00 <__ieee754_pow+0x1d0>
 8007a32:	4b19      	ldr	r3, [pc, #100]	; (8007a98 <__ieee754_pow+0x268>)
 8007a34:	4598      	cmp	r8, r3
 8007a36:	f340 80fb 	ble.w	8007c30 <__ieee754_pow+0x400>
 8007a3a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007a3e:	4598      	cmp	r8, r3
 8007a40:	4b13      	ldr	r3, [pc, #76]	; (8007a90 <__ieee754_pow+0x260>)
 8007a42:	dd0c      	ble.n	8007a5e <__ieee754_pow+0x22e>
 8007a44:	429c      	cmp	r4, r3
 8007a46:	dc0f      	bgt.n	8007a68 <__ieee754_pow+0x238>
 8007a48:	f1b9 0f00 	cmp.w	r9, #0
 8007a4c:	da0f      	bge.n	8007a6e <__ieee754_pow+0x23e>
 8007a4e:	2000      	movs	r0, #0
 8007a50:	b009      	add	sp, #36	; 0x24
 8007a52:	ecbd 8b06 	vpop	{d8-d10}
 8007a56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a5a:	f000 bcc2 	b.w	80083e2 <__math_oflow>
 8007a5e:	429c      	cmp	r4, r3
 8007a60:	dbf2      	blt.n	8007a48 <__ieee754_pow+0x218>
 8007a62:	4b0a      	ldr	r3, [pc, #40]	; (8007a8c <__ieee754_pow+0x25c>)
 8007a64:	429c      	cmp	r4, r3
 8007a66:	dd19      	ble.n	8007a9c <__ieee754_pow+0x26c>
 8007a68:	f1b9 0f00 	cmp.w	r9, #0
 8007a6c:	dcef      	bgt.n	8007a4e <__ieee754_pow+0x21e>
 8007a6e:	2000      	movs	r0, #0
 8007a70:	b009      	add	sp, #36	; 0x24
 8007a72:	ecbd 8b06 	vpop	{d8-d10}
 8007a76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a7a:	f000 bca9 	b.w	80083d0 <__math_uflow>
 8007a7e:	bf00      	nop
 8007a80:	fff00000 	.word	0xfff00000
 8007a84:	7ff00000 	.word	0x7ff00000
 8007a88:	433fffff 	.word	0x433fffff
 8007a8c:	3ff00000 	.word	0x3ff00000
 8007a90:	3fefffff 	.word	0x3fefffff
 8007a94:	3fe00000 	.word	0x3fe00000
 8007a98:	41e00000 	.word	0x41e00000
 8007a9c:	4b60      	ldr	r3, [pc, #384]	; (8007c20 <__ieee754_pow+0x3f0>)
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f7f8 fb96 	bl	80001d0 <__aeabi_dsub>
 8007aa4:	a354      	add	r3, pc, #336	; (adr r3, 8007bf8 <__ieee754_pow+0x3c8>)
 8007aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aaa:	4604      	mov	r4, r0
 8007aac:	460d      	mov	r5, r1
 8007aae:	f7f8 fd47 	bl	8000540 <__aeabi_dmul>
 8007ab2:	a353      	add	r3, pc, #332	; (adr r3, 8007c00 <__ieee754_pow+0x3d0>)
 8007ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab8:	4606      	mov	r6, r0
 8007aba:	460f      	mov	r7, r1
 8007abc:	4620      	mov	r0, r4
 8007abe:	4629      	mov	r1, r5
 8007ac0:	f7f8 fd3e 	bl	8000540 <__aeabi_dmul>
 8007ac4:	4b57      	ldr	r3, [pc, #348]	; (8007c24 <__ieee754_pow+0x3f4>)
 8007ac6:	4682      	mov	sl, r0
 8007ac8:	468b      	mov	fp, r1
 8007aca:	2200      	movs	r2, #0
 8007acc:	4620      	mov	r0, r4
 8007ace:	4629      	mov	r1, r5
 8007ad0:	f7f8 fd36 	bl	8000540 <__aeabi_dmul>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	a14b      	add	r1, pc, #300	; (adr r1, 8007c08 <__ieee754_pow+0x3d8>)
 8007ada:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ade:	f7f8 fb77 	bl	80001d0 <__aeabi_dsub>
 8007ae2:	4622      	mov	r2, r4
 8007ae4:	462b      	mov	r3, r5
 8007ae6:	f7f8 fd2b 	bl	8000540 <__aeabi_dmul>
 8007aea:	4602      	mov	r2, r0
 8007aec:	460b      	mov	r3, r1
 8007aee:	2000      	movs	r0, #0
 8007af0:	494d      	ldr	r1, [pc, #308]	; (8007c28 <__ieee754_pow+0x3f8>)
 8007af2:	f7f8 fb6d 	bl	80001d0 <__aeabi_dsub>
 8007af6:	4622      	mov	r2, r4
 8007af8:	4680      	mov	r8, r0
 8007afa:	4689      	mov	r9, r1
 8007afc:	462b      	mov	r3, r5
 8007afe:	4620      	mov	r0, r4
 8007b00:	4629      	mov	r1, r5
 8007b02:	f7f8 fd1d 	bl	8000540 <__aeabi_dmul>
 8007b06:	4602      	mov	r2, r0
 8007b08:	460b      	mov	r3, r1
 8007b0a:	4640      	mov	r0, r8
 8007b0c:	4649      	mov	r1, r9
 8007b0e:	f7f8 fd17 	bl	8000540 <__aeabi_dmul>
 8007b12:	a33f      	add	r3, pc, #252	; (adr r3, 8007c10 <__ieee754_pow+0x3e0>)
 8007b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b18:	f7f8 fd12 	bl	8000540 <__aeabi_dmul>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	460b      	mov	r3, r1
 8007b20:	4650      	mov	r0, sl
 8007b22:	4659      	mov	r1, fp
 8007b24:	f7f8 fb54 	bl	80001d0 <__aeabi_dsub>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	460b      	mov	r3, r1
 8007b2c:	4680      	mov	r8, r0
 8007b2e:	4689      	mov	r9, r1
 8007b30:	4630      	mov	r0, r6
 8007b32:	4639      	mov	r1, r7
 8007b34:	f7f8 fb4e 	bl	80001d4 <__adddf3>
 8007b38:	2000      	movs	r0, #0
 8007b3a:	4632      	mov	r2, r6
 8007b3c:	463b      	mov	r3, r7
 8007b3e:	4604      	mov	r4, r0
 8007b40:	460d      	mov	r5, r1
 8007b42:	f7f8 fb45 	bl	80001d0 <__aeabi_dsub>
 8007b46:	4602      	mov	r2, r0
 8007b48:	460b      	mov	r3, r1
 8007b4a:	4640      	mov	r0, r8
 8007b4c:	4649      	mov	r1, r9
 8007b4e:	f7f8 fb3f 	bl	80001d0 <__aeabi_dsub>
 8007b52:	9b04      	ldr	r3, [sp, #16]
 8007b54:	9a06      	ldr	r2, [sp, #24]
 8007b56:	3b01      	subs	r3, #1
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	4682      	mov	sl, r0
 8007b5c:	468b      	mov	fp, r1
 8007b5e:	f040 81e7 	bne.w	8007f30 <__ieee754_pow+0x700>
 8007b62:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8007c18 <__ieee754_pow+0x3e8>
 8007b66:	eeb0 8a47 	vmov.f32	s16, s14
 8007b6a:	eef0 8a67 	vmov.f32	s17, s15
 8007b6e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007b72:	2600      	movs	r6, #0
 8007b74:	4632      	mov	r2, r6
 8007b76:	463b      	mov	r3, r7
 8007b78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b7c:	f7f8 fb28 	bl	80001d0 <__aeabi_dsub>
 8007b80:	4622      	mov	r2, r4
 8007b82:	462b      	mov	r3, r5
 8007b84:	f7f8 fcdc 	bl	8000540 <__aeabi_dmul>
 8007b88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b8c:	4680      	mov	r8, r0
 8007b8e:	4689      	mov	r9, r1
 8007b90:	4650      	mov	r0, sl
 8007b92:	4659      	mov	r1, fp
 8007b94:	f7f8 fcd4 	bl	8000540 <__aeabi_dmul>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	4640      	mov	r0, r8
 8007b9e:	4649      	mov	r1, r9
 8007ba0:	f7f8 fb18 	bl	80001d4 <__adddf3>
 8007ba4:	4632      	mov	r2, r6
 8007ba6:	463b      	mov	r3, r7
 8007ba8:	4680      	mov	r8, r0
 8007baa:	4689      	mov	r9, r1
 8007bac:	4620      	mov	r0, r4
 8007bae:	4629      	mov	r1, r5
 8007bb0:	f7f8 fcc6 	bl	8000540 <__aeabi_dmul>
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	4604      	mov	r4, r0
 8007bb8:	460d      	mov	r5, r1
 8007bba:	4602      	mov	r2, r0
 8007bbc:	4649      	mov	r1, r9
 8007bbe:	4640      	mov	r0, r8
 8007bc0:	f7f8 fb08 	bl	80001d4 <__adddf3>
 8007bc4:	4b19      	ldr	r3, [pc, #100]	; (8007c2c <__ieee754_pow+0x3fc>)
 8007bc6:	4299      	cmp	r1, r3
 8007bc8:	ec45 4b19 	vmov	d9, r4, r5
 8007bcc:	4606      	mov	r6, r0
 8007bce:	460f      	mov	r7, r1
 8007bd0:	468b      	mov	fp, r1
 8007bd2:	f340 82f0 	ble.w	80081b6 <__ieee754_pow+0x986>
 8007bd6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007bda:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007bde:	4303      	orrs	r3, r0
 8007be0:	f000 81e4 	beq.w	8007fac <__ieee754_pow+0x77c>
 8007be4:	ec51 0b18 	vmov	r0, r1, d8
 8007be8:	2200      	movs	r2, #0
 8007bea:	2300      	movs	r3, #0
 8007bec:	f7f8 ff1a 	bl	8000a24 <__aeabi_dcmplt>
 8007bf0:	3800      	subs	r0, #0
 8007bf2:	bf18      	it	ne
 8007bf4:	2001      	movne	r0, #1
 8007bf6:	e72b      	b.n	8007a50 <__ieee754_pow+0x220>
 8007bf8:	60000000 	.word	0x60000000
 8007bfc:	3ff71547 	.word	0x3ff71547
 8007c00:	f85ddf44 	.word	0xf85ddf44
 8007c04:	3e54ae0b 	.word	0x3e54ae0b
 8007c08:	55555555 	.word	0x55555555
 8007c0c:	3fd55555 	.word	0x3fd55555
 8007c10:	652b82fe 	.word	0x652b82fe
 8007c14:	3ff71547 	.word	0x3ff71547
 8007c18:	00000000 	.word	0x00000000
 8007c1c:	bff00000 	.word	0xbff00000
 8007c20:	3ff00000 	.word	0x3ff00000
 8007c24:	3fd00000 	.word	0x3fd00000
 8007c28:	3fe00000 	.word	0x3fe00000
 8007c2c:	408fffff 	.word	0x408fffff
 8007c30:	4bd5      	ldr	r3, [pc, #852]	; (8007f88 <__ieee754_pow+0x758>)
 8007c32:	402b      	ands	r3, r5
 8007c34:	2200      	movs	r2, #0
 8007c36:	b92b      	cbnz	r3, 8007c44 <__ieee754_pow+0x414>
 8007c38:	4bd4      	ldr	r3, [pc, #848]	; (8007f8c <__ieee754_pow+0x75c>)
 8007c3a:	f7f8 fc81 	bl	8000540 <__aeabi_dmul>
 8007c3e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007c42:	460c      	mov	r4, r1
 8007c44:	1523      	asrs	r3, r4, #20
 8007c46:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007c4a:	4413      	add	r3, r2
 8007c4c:	9305      	str	r3, [sp, #20]
 8007c4e:	4bd0      	ldr	r3, [pc, #832]	; (8007f90 <__ieee754_pow+0x760>)
 8007c50:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007c54:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007c58:	429c      	cmp	r4, r3
 8007c5a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007c5e:	dd08      	ble.n	8007c72 <__ieee754_pow+0x442>
 8007c60:	4bcc      	ldr	r3, [pc, #816]	; (8007f94 <__ieee754_pow+0x764>)
 8007c62:	429c      	cmp	r4, r3
 8007c64:	f340 8162 	ble.w	8007f2c <__ieee754_pow+0x6fc>
 8007c68:	9b05      	ldr	r3, [sp, #20]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	9305      	str	r3, [sp, #20]
 8007c6e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007c72:	2400      	movs	r4, #0
 8007c74:	00e3      	lsls	r3, r4, #3
 8007c76:	9307      	str	r3, [sp, #28]
 8007c78:	4bc7      	ldr	r3, [pc, #796]	; (8007f98 <__ieee754_pow+0x768>)
 8007c7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007c7e:	ed93 7b00 	vldr	d7, [r3]
 8007c82:	4629      	mov	r1, r5
 8007c84:	ec53 2b17 	vmov	r2, r3, d7
 8007c88:	eeb0 9a47 	vmov.f32	s18, s14
 8007c8c:	eef0 9a67 	vmov.f32	s19, s15
 8007c90:	4682      	mov	sl, r0
 8007c92:	f7f8 fa9d 	bl	80001d0 <__aeabi_dsub>
 8007c96:	4652      	mov	r2, sl
 8007c98:	4606      	mov	r6, r0
 8007c9a:	460f      	mov	r7, r1
 8007c9c:	462b      	mov	r3, r5
 8007c9e:	ec51 0b19 	vmov	r0, r1, d9
 8007ca2:	f7f8 fa97 	bl	80001d4 <__adddf3>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	460b      	mov	r3, r1
 8007caa:	2000      	movs	r0, #0
 8007cac:	49bb      	ldr	r1, [pc, #748]	; (8007f9c <__ieee754_pow+0x76c>)
 8007cae:	f7f8 fd71 	bl	8000794 <__aeabi_ddiv>
 8007cb2:	ec41 0b1a 	vmov	d10, r0, r1
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	460b      	mov	r3, r1
 8007cba:	4630      	mov	r0, r6
 8007cbc:	4639      	mov	r1, r7
 8007cbe:	f7f8 fc3f 	bl	8000540 <__aeabi_dmul>
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cc8:	9302      	str	r3, [sp, #8]
 8007cca:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007cce:	46ab      	mov	fp, r5
 8007cd0:	106d      	asrs	r5, r5, #1
 8007cd2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007cd6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007cda:	ec41 0b18 	vmov	d8, r0, r1
 8007cde:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	4640      	mov	r0, r8
 8007ce6:	4649      	mov	r1, r9
 8007ce8:	4614      	mov	r4, r2
 8007cea:	461d      	mov	r5, r3
 8007cec:	f7f8 fc28 	bl	8000540 <__aeabi_dmul>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	4630      	mov	r0, r6
 8007cf6:	4639      	mov	r1, r7
 8007cf8:	f7f8 fa6a 	bl	80001d0 <__aeabi_dsub>
 8007cfc:	ec53 2b19 	vmov	r2, r3, d9
 8007d00:	4606      	mov	r6, r0
 8007d02:	460f      	mov	r7, r1
 8007d04:	4620      	mov	r0, r4
 8007d06:	4629      	mov	r1, r5
 8007d08:	f7f8 fa62 	bl	80001d0 <__aeabi_dsub>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	460b      	mov	r3, r1
 8007d10:	4650      	mov	r0, sl
 8007d12:	4659      	mov	r1, fp
 8007d14:	f7f8 fa5c 	bl	80001d0 <__aeabi_dsub>
 8007d18:	4642      	mov	r2, r8
 8007d1a:	464b      	mov	r3, r9
 8007d1c:	f7f8 fc10 	bl	8000540 <__aeabi_dmul>
 8007d20:	4602      	mov	r2, r0
 8007d22:	460b      	mov	r3, r1
 8007d24:	4630      	mov	r0, r6
 8007d26:	4639      	mov	r1, r7
 8007d28:	f7f8 fa52 	bl	80001d0 <__aeabi_dsub>
 8007d2c:	ec53 2b1a 	vmov	r2, r3, d10
 8007d30:	f7f8 fc06 	bl	8000540 <__aeabi_dmul>
 8007d34:	ec53 2b18 	vmov	r2, r3, d8
 8007d38:	ec41 0b19 	vmov	d9, r0, r1
 8007d3c:	ec51 0b18 	vmov	r0, r1, d8
 8007d40:	f7f8 fbfe 	bl	8000540 <__aeabi_dmul>
 8007d44:	a37c      	add	r3, pc, #496	; (adr r3, 8007f38 <__ieee754_pow+0x708>)
 8007d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4a:	4604      	mov	r4, r0
 8007d4c:	460d      	mov	r5, r1
 8007d4e:	f7f8 fbf7 	bl	8000540 <__aeabi_dmul>
 8007d52:	a37b      	add	r3, pc, #492	; (adr r3, 8007f40 <__ieee754_pow+0x710>)
 8007d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d58:	f7f8 fa3c 	bl	80001d4 <__adddf3>
 8007d5c:	4622      	mov	r2, r4
 8007d5e:	462b      	mov	r3, r5
 8007d60:	f7f8 fbee 	bl	8000540 <__aeabi_dmul>
 8007d64:	a378      	add	r3, pc, #480	; (adr r3, 8007f48 <__ieee754_pow+0x718>)
 8007d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6a:	f7f8 fa33 	bl	80001d4 <__adddf3>
 8007d6e:	4622      	mov	r2, r4
 8007d70:	462b      	mov	r3, r5
 8007d72:	f7f8 fbe5 	bl	8000540 <__aeabi_dmul>
 8007d76:	a376      	add	r3, pc, #472	; (adr r3, 8007f50 <__ieee754_pow+0x720>)
 8007d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7c:	f7f8 fa2a 	bl	80001d4 <__adddf3>
 8007d80:	4622      	mov	r2, r4
 8007d82:	462b      	mov	r3, r5
 8007d84:	f7f8 fbdc 	bl	8000540 <__aeabi_dmul>
 8007d88:	a373      	add	r3, pc, #460	; (adr r3, 8007f58 <__ieee754_pow+0x728>)
 8007d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d8e:	f7f8 fa21 	bl	80001d4 <__adddf3>
 8007d92:	4622      	mov	r2, r4
 8007d94:	462b      	mov	r3, r5
 8007d96:	f7f8 fbd3 	bl	8000540 <__aeabi_dmul>
 8007d9a:	a371      	add	r3, pc, #452	; (adr r3, 8007f60 <__ieee754_pow+0x730>)
 8007d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da0:	f7f8 fa18 	bl	80001d4 <__adddf3>
 8007da4:	4622      	mov	r2, r4
 8007da6:	4606      	mov	r6, r0
 8007da8:	460f      	mov	r7, r1
 8007daa:	462b      	mov	r3, r5
 8007dac:	4620      	mov	r0, r4
 8007dae:	4629      	mov	r1, r5
 8007db0:	f7f8 fbc6 	bl	8000540 <__aeabi_dmul>
 8007db4:	4602      	mov	r2, r0
 8007db6:	460b      	mov	r3, r1
 8007db8:	4630      	mov	r0, r6
 8007dba:	4639      	mov	r1, r7
 8007dbc:	f7f8 fbc0 	bl	8000540 <__aeabi_dmul>
 8007dc0:	4642      	mov	r2, r8
 8007dc2:	4604      	mov	r4, r0
 8007dc4:	460d      	mov	r5, r1
 8007dc6:	464b      	mov	r3, r9
 8007dc8:	ec51 0b18 	vmov	r0, r1, d8
 8007dcc:	f7f8 fa02 	bl	80001d4 <__adddf3>
 8007dd0:	ec53 2b19 	vmov	r2, r3, d9
 8007dd4:	f7f8 fbb4 	bl	8000540 <__aeabi_dmul>
 8007dd8:	4622      	mov	r2, r4
 8007dda:	462b      	mov	r3, r5
 8007ddc:	f7f8 f9fa 	bl	80001d4 <__adddf3>
 8007de0:	4642      	mov	r2, r8
 8007de2:	4682      	mov	sl, r0
 8007de4:	468b      	mov	fp, r1
 8007de6:	464b      	mov	r3, r9
 8007de8:	4640      	mov	r0, r8
 8007dea:	4649      	mov	r1, r9
 8007dec:	f7f8 fba8 	bl	8000540 <__aeabi_dmul>
 8007df0:	4b6b      	ldr	r3, [pc, #428]	; (8007fa0 <__ieee754_pow+0x770>)
 8007df2:	2200      	movs	r2, #0
 8007df4:	4606      	mov	r6, r0
 8007df6:	460f      	mov	r7, r1
 8007df8:	f7f8 f9ec 	bl	80001d4 <__adddf3>
 8007dfc:	4652      	mov	r2, sl
 8007dfe:	465b      	mov	r3, fp
 8007e00:	f7f8 f9e8 	bl	80001d4 <__adddf3>
 8007e04:	2000      	movs	r0, #0
 8007e06:	4604      	mov	r4, r0
 8007e08:	460d      	mov	r5, r1
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	4640      	mov	r0, r8
 8007e10:	4649      	mov	r1, r9
 8007e12:	f7f8 fb95 	bl	8000540 <__aeabi_dmul>
 8007e16:	4b62      	ldr	r3, [pc, #392]	; (8007fa0 <__ieee754_pow+0x770>)
 8007e18:	4680      	mov	r8, r0
 8007e1a:	4689      	mov	r9, r1
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	4620      	mov	r0, r4
 8007e20:	4629      	mov	r1, r5
 8007e22:	f7f8 f9d5 	bl	80001d0 <__aeabi_dsub>
 8007e26:	4632      	mov	r2, r6
 8007e28:	463b      	mov	r3, r7
 8007e2a:	f7f8 f9d1 	bl	80001d0 <__aeabi_dsub>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	460b      	mov	r3, r1
 8007e32:	4650      	mov	r0, sl
 8007e34:	4659      	mov	r1, fp
 8007e36:	f7f8 f9cb 	bl	80001d0 <__aeabi_dsub>
 8007e3a:	ec53 2b18 	vmov	r2, r3, d8
 8007e3e:	f7f8 fb7f 	bl	8000540 <__aeabi_dmul>
 8007e42:	4622      	mov	r2, r4
 8007e44:	4606      	mov	r6, r0
 8007e46:	460f      	mov	r7, r1
 8007e48:	462b      	mov	r3, r5
 8007e4a:	ec51 0b19 	vmov	r0, r1, d9
 8007e4e:	f7f8 fb77 	bl	8000540 <__aeabi_dmul>
 8007e52:	4602      	mov	r2, r0
 8007e54:	460b      	mov	r3, r1
 8007e56:	4630      	mov	r0, r6
 8007e58:	4639      	mov	r1, r7
 8007e5a:	f7f8 f9bb 	bl	80001d4 <__adddf3>
 8007e5e:	4606      	mov	r6, r0
 8007e60:	460f      	mov	r7, r1
 8007e62:	4602      	mov	r2, r0
 8007e64:	460b      	mov	r3, r1
 8007e66:	4640      	mov	r0, r8
 8007e68:	4649      	mov	r1, r9
 8007e6a:	f7f8 f9b3 	bl	80001d4 <__adddf3>
 8007e6e:	a33e      	add	r3, pc, #248	; (adr r3, 8007f68 <__ieee754_pow+0x738>)
 8007e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e74:	2000      	movs	r0, #0
 8007e76:	4604      	mov	r4, r0
 8007e78:	460d      	mov	r5, r1
 8007e7a:	f7f8 fb61 	bl	8000540 <__aeabi_dmul>
 8007e7e:	4642      	mov	r2, r8
 8007e80:	ec41 0b18 	vmov	d8, r0, r1
 8007e84:	464b      	mov	r3, r9
 8007e86:	4620      	mov	r0, r4
 8007e88:	4629      	mov	r1, r5
 8007e8a:	f7f8 f9a1 	bl	80001d0 <__aeabi_dsub>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	460b      	mov	r3, r1
 8007e92:	4630      	mov	r0, r6
 8007e94:	4639      	mov	r1, r7
 8007e96:	f7f8 f99b 	bl	80001d0 <__aeabi_dsub>
 8007e9a:	a335      	add	r3, pc, #212	; (adr r3, 8007f70 <__ieee754_pow+0x740>)
 8007e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea0:	f7f8 fb4e 	bl	8000540 <__aeabi_dmul>
 8007ea4:	a334      	add	r3, pc, #208	; (adr r3, 8007f78 <__ieee754_pow+0x748>)
 8007ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eaa:	4606      	mov	r6, r0
 8007eac:	460f      	mov	r7, r1
 8007eae:	4620      	mov	r0, r4
 8007eb0:	4629      	mov	r1, r5
 8007eb2:	f7f8 fb45 	bl	8000540 <__aeabi_dmul>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	460b      	mov	r3, r1
 8007eba:	4630      	mov	r0, r6
 8007ebc:	4639      	mov	r1, r7
 8007ebe:	f7f8 f989 	bl	80001d4 <__adddf3>
 8007ec2:	9a07      	ldr	r2, [sp, #28]
 8007ec4:	4b37      	ldr	r3, [pc, #220]	; (8007fa4 <__ieee754_pow+0x774>)
 8007ec6:	4413      	add	r3, r2
 8007ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ecc:	f7f8 f982 	bl	80001d4 <__adddf3>
 8007ed0:	4682      	mov	sl, r0
 8007ed2:	9805      	ldr	r0, [sp, #20]
 8007ed4:	468b      	mov	fp, r1
 8007ed6:	f7f8 fac9 	bl	800046c <__aeabi_i2d>
 8007eda:	9a07      	ldr	r2, [sp, #28]
 8007edc:	4b32      	ldr	r3, [pc, #200]	; (8007fa8 <__ieee754_pow+0x778>)
 8007ede:	4413      	add	r3, r2
 8007ee0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ee4:	4606      	mov	r6, r0
 8007ee6:	460f      	mov	r7, r1
 8007ee8:	4652      	mov	r2, sl
 8007eea:	465b      	mov	r3, fp
 8007eec:	ec51 0b18 	vmov	r0, r1, d8
 8007ef0:	f7f8 f970 	bl	80001d4 <__adddf3>
 8007ef4:	4642      	mov	r2, r8
 8007ef6:	464b      	mov	r3, r9
 8007ef8:	f7f8 f96c 	bl	80001d4 <__adddf3>
 8007efc:	4632      	mov	r2, r6
 8007efe:	463b      	mov	r3, r7
 8007f00:	f7f8 f968 	bl	80001d4 <__adddf3>
 8007f04:	2000      	movs	r0, #0
 8007f06:	4632      	mov	r2, r6
 8007f08:	463b      	mov	r3, r7
 8007f0a:	4604      	mov	r4, r0
 8007f0c:	460d      	mov	r5, r1
 8007f0e:	f7f8 f95f 	bl	80001d0 <__aeabi_dsub>
 8007f12:	4642      	mov	r2, r8
 8007f14:	464b      	mov	r3, r9
 8007f16:	f7f8 f95b 	bl	80001d0 <__aeabi_dsub>
 8007f1a:	ec53 2b18 	vmov	r2, r3, d8
 8007f1e:	f7f8 f957 	bl	80001d0 <__aeabi_dsub>
 8007f22:	4602      	mov	r2, r0
 8007f24:	460b      	mov	r3, r1
 8007f26:	4650      	mov	r0, sl
 8007f28:	4659      	mov	r1, fp
 8007f2a:	e610      	b.n	8007b4e <__ieee754_pow+0x31e>
 8007f2c:	2401      	movs	r4, #1
 8007f2e:	e6a1      	b.n	8007c74 <__ieee754_pow+0x444>
 8007f30:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8007f80 <__ieee754_pow+0x750>
 8007f34:	e617      	b.n	8007b66 <__ieee754_pow+0x336>
 8007f36:	bf00      	nop
 8007f38:	4a454eef 	.word	0x4a454eef
 8007f3c:	3fca7e28 	.word	0x3fca7e28
 8007f40:	93c9db65 	.word	0x93c9db65
 8007f44:	3fcd864a 	.word	0x3fcd864a
 8007f48:	a91d4101 	.word	0xa91d4101
 8007f4c:	3fd17460 	.word	0x3fd17460
 8007f50:	518f264d 	.word	0x518f264d
 8007f54:	3fd55555 	.word	0x3fd55555
 8007f58:	db6fabff 	.word	0xdb6fabff
 8007f5c:	3fdb6db6 	.word	0x3fdb6db6
 8007f60:	33333303 	.word	0x33333303
 8007f64:	3fe33333 	.word	0x3fe33333
 8007f68:	e0000000 	.word	0xe0000000
 8007f6c:	3feec709 	.word	0x3feec709
 8007f70:	dc3a03fd 	.word	0xdc3a03fd
 8007f74:	3feec709 	.word	0x3feec709
 8007f78:	145b01f5 	.word	0x145b01f5
 8007f7c:	be3e2fe0 	.word	0xbe3e2fe0
 8007f80:	00000000 	.word	0x00000000
 8007f84:	3ff00000 	.word	0x3ff00000
 8007f88:	7ff00000 	.word	0x7ff00000
 8007f8c:	43400000 	.word	0x43400000
 8007f90:	0003988e 	.word	0x0003988e
 8007f94:	000bb679 	.word	0x000bb679
 8007f98:	08008448 	.word	0x08008448
 8007f9c:	3ff00000 	.word	0x3ff00000
 8007fa0:	40080000 	.word	0x40080000
 8007fa4:	08008468 	.word	0x08008468
 8007fa8:	08008458 	.word	0x08008458
 8007fac:	a3b3      	add	r3, pc, #716	; (adr r3, 800827c <__ieee754_pow+0xa4c>)
 8007fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb2:	4640      	mov	r0, r8
 8007fb4:	4649      	mov	r1, r9
 8007fb6:	f7f8 f90d 	bl	80001d4 <__adddf3>
 8007fba:	4622      	mov	r2, r4
 8007fbc:	ec41 0b1a 	vmov	d10, r0, r1
 8007fc0:	462b      	mov	r3, r5
 8007fc2:	4630      	mov	r0, r6
 8007fc4:	4639      	mov	r1, r7
 8007fc6:	f7f8 f903 	bl	80001d0 <__aeabi_dsub>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	460b      	mov	r3, r1
 8007fce:	ec51 0b1a 	vmov	r0, r1, d10
 8007fd2:	f7f8 fd45 	bl	8000a60 <__aeabi_dcmpgt>
 8007fd6:	2800      	cmp	r0, #0
 8007fd8:	f47f ae04 	bne.w	8007be4 <__ieee754_pow+0x3b4>
 8007fdc:	4aa2      	ldr	r2, [pc, #648]	; (8008268 <__ieee754_pow+0xa38>)
 8007fde:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	f340 8107 	ble.w	80081f6 <__ieee754_pow+0x9c6>
 8007fe8:	151b      	asrs	r3, r3, #20
 8007fea:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007fee:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007ff2:	fa4a fa03 	asr.w	sl, sl, r3
 8007ff6:	44da      	add	sl, fp
 8007ff8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8007ffc:	489b      	ldr	r0, [pc, #620]	; (800826c <__ieee754_pow+0xa3c>)
 8007ffe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008002:	4108      	asrs	r0, r1
 8008004:	ea00 030a 	and.w	r3, r0, sl
 8008008:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800800c:	f1c1 0114 	rsb	r1, r1, #20
 8008010:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008014:	fa4a fa01 	asr.w	sl, sl, r1
 8008018:	f1bb 0f00 	cmp.w	fp, #0
 800801c:	f04f 0200 	mov.w	r2, #0
 8008020:	4620      	mov	r0, r4
 8008022:	4629      	mov	r1, r5
 8008024:	bfb8      	it	lt
 8008026:	f1ca 0a00 	rsblt	sl, sl, #0
 800802a:	f7f8 f8d1 	bl	80001d0 <__aeabi_dsub>
 800802e:	ec41 0b19 	vmov	d9, r0, r1
 8008032:	4642      	mov	r2, r8
 8008034:	464b      	mov	r3, r9
 8008036:	ec51 0b19 	vmov	r0, r1, d9
 800803a:	f7f8 f8cb 	bl	80001d4 <__adddf3>
 800803e:	a37a      	add	r3, pc, #488	; (adr r3, 8008228 <__ieee754_pow+0x9f8>)
 8008040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008044:	2000      	movs	r0, #0
 8008046:	4604      	mov	r4, r0
 8008048:	460d      	mov	r5, r1
 800804a:	f7f8 fa79 	bl	8000540 <__aeabi_dmul>
 800804e:	ec53 2b19 	vmov	r2, r3, d9
 8008052:	4606      	mov	r6, r0
 8008054:	460f      	mov	r7, r1
 8008056:	4620      	mov	r0, r4
 8008058:	4629      	mov	r1, r5
 800805a:	f7f8 f8b9 	bl	80001d0 <__aeabi_dsub>
 800805e:	4602      	mov	r2, r0
 8008060:	460b      	mov	r3, r1
 8008062:	4640      	mov	r0, r8
 8008064:	4649      	mov	r1, r9
 8008066:	f7f8 f8b3 	bl	80001d0 <__aeabi_dsub>
 800806a:	a371      	add	r3, pc, #452	; (adr r3, 8008230 <__ieee754_pow+0xa00>)
 800806c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008070:	f7f8 fa66 	bl	8000540 <__aeabi_dmul>
 8008074:	a370      	add	r3, pc, #448	; (adr r3, 8008238 <__ieee754_pow+0xa08>)
 8008076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807a:	4680      	mov	r8, r0
 800807c:	4689      	mov	r9, r1
 800807e:	4620      	mov	r0, r4
 8008080:	4629      	mov	r1, r5
 8008082:	f7f8 fa5d 	bl	8000540 <__aeabi_dmul>
 8008086:	4602      	mov	r2, r0
 8008088:	460b      	mov	r3, r1
 800808a:	4640      	mov	r0, r8
 800808c:	4649      	mov	r1, r9
 800808e:	f7f8 f8a1 	bl	80001d4 <__adddf3>
 8008092:	4604      	mov	r4, r0
 8008094:	460d      	mov	r5, r1
 8008096:	4602      	mov	r2, r0
 8008098:	460b      	mov	r3, r1
 800809a:	4630      	mov	r0, r6
 800809c:	4639      	mov	r1, r7
 800809e:	f7f8 f899 	bl	80001d4 <__adddf3>
 80080a2:	4632      	mov	r2, r6
 80080a4:	463b      	mov	r3, r7
 80080a6:	4680      	mov	r8, r0
 80080a8:	4689      	mov	r9, r1
 80080aa:	f7f8 f891 	bl	80001d0 <__aeabi_dsub>
 80080ae:	4602      	mov	r2, r0
 80080b0:	460b      	mov	r3, r1
 80080b2:	4620      	mov	r0, r4
 80080b4:	4629      	mov	r1, r5
 80080b6:	f7f8 f88b 	bl	80001d0 <__aeabi_dsub>
 80080ba:	4642      	mov	r2, r8
 80080bc:	4606      	mov	r6, r0
 80080be:	460f      	mov	r7, r1
 80080c0:	464b      	mov	r3, r9
 80080c2:	4640      	mov	r0, r8
 80080c4:	4649      	mov	r1, r9
 80080c6:	f7f8 fa3b 	bl	8000540 <__aeabi_dmul>
 80080ca:	a35d      	add	r3, pc, #372	; (adr r3, 8008240 <__ieee754_pow+0xa10>)
 80080cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d0:	4604      	mov	r4, r0
 80080d2:	460d      	mov	r5, r1
 80080d4:	f7f8 fa34 	bl	8000540 <__aeabi_dmul>
 80080d8:	a35b      	add	r3, pc, #364	; (adr r3, 8008248 <__ieee754_pow+0xa18>)
 80080da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080de:	f7f8 f877 	bl	80001d0 <__aeabi_dsub>
 80080e2:	4622      	mov	r2, r4
 80080e4:	462b      	mov	r3, r5
 80080e6:	f7f8 fa2b 	bl	8000540 <__aeabi_dmul>
 80080ea:	a359      	add	r3, pc, #356	; (adr r3, 8008250 <__ieee754_pow+0xa20>)
 80080ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f0:	f7f8 f870 	bl	80001d4 <__adddf3>
 80080f4:	4622      	mov	r2, r4
 80080f6:	462b      	mov	r3, r5
 80080f8:	f7f8 fa22 	bl	8000540 <__aeabi_dmul>
 80080fc:	a356      	add	r3, pc, #344	; (adr r3, 8008258 <__ieee754_pow+0xa28>)
 80080fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008102:	f7f8 f865 	bl	80001d0 <__aeabi_dsub>
 8008106:	4622      	mov	r2, r4
 8008108:	462b      	mov	r3, r5
 800810a:	f7f8 fa19 	bl	8000540 <__aeabi_dmul>
 800810e:	a354      	add	r3, pc, #336	; (adr r3, 8008260 <__ieee754_pow+0xa30>)
 8008110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008114:	f7f8 f85e 	bl	80001d4 <__adddf3>
 8008118:	4622      	mov	r2, r4
 800811a:	462b      	mov	r3, r5
 800811c:	f7f8 fa10 	bl	8000540 <__aeabi_dmul>
 8008120:	4602      	mov	r2, r0
 8008122:	460b      	mov	r3, r1
 8008124:	4640      	mov	r0, r8
 8008126:	4649      	mov	r1, r9
 8008128:	f7f8 f852 	bl	80001d0 <__aeabi_dsub>
 800812c:	4604      	mov	r4, r0
 800812e:	460d      	mov	r5, r1
 8008130:	4602      	mov	r2, r0
 8008132:	460b      	mov	r3, r1
 8008134:	4640      	mov	r0, r8
 8008136:	4649      	mov	r1, r9
 8008138:	f7f8 fa02 	bl	8000540 <__aeabi_dmul>
 800813c:	2200      	movs	r2, #0
 800813e:	ec41 0b19 	vmov	d9, r0, r1
 8008142:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008146:	4620      	mov	r0, r4
 8008148:	4629      	mov	r1, r5
 800814a:	f7f8 f841 	bl	80001d0 <__aeabi_dsub>
 800814e:	4602      	mov	r2, r0
 8008150:	460b      	mov	r3, r1
 8008152:	ec51 0b19 	vmov	r0, r1, d9
 8008156:	f7f8 fb1d 	bl	8000794 <__aeabi_ddiv>
 800815a:	4632      	mov	r2, r6
 800815c:	4604      	mov	r4, r0
 800815e:	460d      	mov	r5, r1
 8008160:	463b      	mov	r3, r7
 8008162:	4640      	mov	r0, r8
 8008164:	4649      	mov	r1, r9
 8008166:	f7f8 f9eb 	bl	8000540 <__aeabi_dmul>
 800816a:	4632      	mov	r2, r6
 800816c:	463b      	mov	r3, r7
 800816e:	f7f8 f831 	bl	80001d4 <__adddf3>
 8008172:	4602      	mov	r2, r0
 8008174:	460b      	mov	r3, r1
 8008176:	4620      	mov	r0, r4
 8008178:	4629      	mov	r1, r5
 800817a:	f7f8 f829 	bl	80001d0 <__aeabi_dsub>
 800817e:	4642      	mov	r2, r8
 8008180:	464b      	mov	r3, r9
 8008182:	f7f8 f825 	bl	80001d0 <__aeabi_dsub>
 8008186:	460b      	mov	r3, r1
 8008188:	4602      	mov	r2, r0
 800818a:	4939      	ldr	r1, [pc, #228]	; (8008270 <__ieee754_pow+0xa40>)
 800818c:	2000      	movs	r0, #0
 800818e:	f7f8 f81f 	bl	80001d0 <__aeabi_dsub>
 8008192:	ec41 0b10 	vmov	d0, r0, r1
 8008196:	ee10 3a90 	vmov	r3, s1
 800819a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800819e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081a2:	da2b      	bge.n	80081fc <__ieee754_pow+0x9cc>
 80081a4:	4650      	mov	r0, sl
 80081a6:	f000 f877 	bl	8008298 <scalbn>
 80081aa:	ec51 0b10 	vmov	r0, r1, d0
 80081ae:	ec53 2b18 	vmov	r2, r3, d8
 80081b2:	f7ff bbee 	b.w	8007992 <__ieee754_pow+0x162>
 80081b6:	4b2f      	ldr	r3, [pc, #188]	; (8008274 <__ieee754_pow+0xa44>)
 80081b8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80081bc:	429e      	cmp	r6, r3
 80081be:	f77f af0d 	ble.w	8007fdc <__ieee754_pow+0x7ac>
 80081c2:	4b2d      	ldr	r3, [pc, #180]	; (8008278 <__ieee754_pow+0xa48>)
 80081c4:	440b      	add	r3, r1
 80081c6:	4303      	orrs	r3, r0
 80081c8:	d009      	beq.n	80081de <__ieee754_pow+0x9ae>
 80081ca:	ec51 0b18 	vmov	r0, r1, d8
 80081ce:	2200      	movs	r2, #0
 80081d0:	2300      	movs	r3, #0
 80081d2:	f7f8 fc27 	bl	8000a24 <__aeabi_dcmplt>
 80081d6:	3800      	subs	r0, #0
 80081d8:	bf18      	it	ne
 80081da:	2001      	movne	r0, #1
 80081dc:	e448      	b.n	8007a70 <__ieee754_pow+0x240>
 80081de:	4622      	mov	r2, r4
 80081e0:	462b      	mov	r3, r5
 80081e2:	f7f7 fff5 	bl	80001d0 <__aeabi_dsub>
 80081e6:	4642      	mov	r2, r8
 80081e8:	464b      	mov	r3, r9
 80081ea:	f7f8 fc2f 	bl	8000a4c <__aeabi_dcmpge>
 80081ee:	2800      	cmp	r0, #0
 80081f0:	f43f aef4 	beq.w	8007fdc <__ieee754_pow+0x7ac>
 80081f4:	e7e9      	b.n	80081ca <__ieee754_pow+0x99a>
 80081f6:	f04f 0a00 	mov.w	sl, #0
 80081fa:	e71a      	b.n	8008032 <__ieee754_pow+0x802>
 80081fc:	ec51 0b10 	vmov	r0, r1, d0
 8008200:	4619      	mov	r1, r3
 8008202:	e7d4      	b.n	80081ae <__ieee754_pow+0x97e>
 8008204:	491a      	ldr	r1, [pc, #104]	; (8008270 <__ieee754_pow+0xa40>)
 8008206:	2000      	movs	r0, #0
 8008208:	f7ff bb31 	b.w	800786e <__ieee754_pow+0x3e>
 800820c:	2000      	movs	r0, #0
 800820e:	2100      	movs	r1, #0
 8008210:	f7ff bb2d 	b.w	800786e <__ieee754_pow+0x3e>
 8008214:	4630      	mov	r0, r6
 8008216:	4639      	mov	r1, r7
 8008218:	f7ff bb29 	b.w	800786e <__ieee754_pow+0x3e>
 800821c:	9204      	str	r2, [sp, #16]
 800821e:	f7ff bb7b 	b.w	8007918 <__ieee754_pow+0xe8>
 8008222:	2300      	movs	r3, #0
 8008224:	f7ff bb65 	b.w	80078f2 <__ieee754_pow+0xc2>
 8008228:	00000000 	.word	0x00000000
 800822c:	3fe62e43 	.word	0x3fe62e43
 8008230:	fefa39ef 	.word	0xfefa39ef
 8008234:	3fe62e42 	.word	0x3fe62e42
 8008238:	0ca86c39 	.word	0x0ca86c39
 800823c:	be205c61 	.word	0xbe205c61
 8008240:	72bea4d0 	.word	0x72bea4d0
 8008244:	3e663769 	.word	0x3e663769
 8008248:	c5d26bf1 	.word	0xc5d26bf1
 800824c:	3ebbbd41 	.word	0x3ebbbd41
 8008250:	af25de2c 	.word	0xaf25de2c
 8008254:	3f11566a 	.word	0x3f11566a
 8008258:	16bebd93 	.word	0x16bebd93
 800825c:	3f66c16c 	.word	0x3f66c16c
 8008260:	5555553e 	.word	0x5555553e
 8008264:	3fc55555 	.word	0x3fc55555
 8008268:	3fe00000 	.word	0x3fe00000
 800826c:	fff00000 	.word	0xfff00000
 8008270:	3ff00000 	.word	0x3ff00000
 8008274:	4090cbff 	.word	0x4090cbff
 8008278:	3f6f3400 	.word	0x3f6f3400
 800827c:	652b82fe 	.word	0x652b82fe
 8008280:	3c971547 	.word	0x3c971547

08008284 <fabs>:
 8008284:	ec51 0b10 	vmov	r0, r1, d0
 8008288:	ee10 2a10 	vmov	r2, s0
 800828c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008290:	ec43 2b10 	vmov	d0, r2, r3
 8008294:	4770      	bx	lr
	...

08008298 <scalbn>:
 8008298:	b570      	push	{r4, r5, r6, lr}
 800829a:	ec55 4b10 	vmov	r4, r5, d0
 800829e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80082a2:	4606      	mov	r6, r0
 80082a4:	462b      	mov	r3, r5
 80082a6:	b999      	cbnz	r1, 80082d0 <scalbn+0x38>
 80082a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80082ac:	4323      	orrs	r3, r4
 80082ae:	d03f      	beq.n	8008330 <scalbn+0x98>
 80082b0:	4b35      	ldr	r3, [pc, #212]	; (8008388 <scalbn+0xf0>)
 80082b2:	4629      	mov	r1, r5
 80082b4:	ee10 0a10 	vmov	r0, s0
 80082b8:	2200      	movs	r2, #0
 80082ba:	f7f8 f941 	bl	8000540 <__aeabi_dmul>
 80082be:	4b33      	ldr	r3, [pc, #204]	; (800838c <scalbn+0xf4>)
 80082c0:	429e      	cmp	r6, r3
 80082c2:	4604      	mov	r4, r0
 80082c4:	460d      	mov	r5, r1
 80082c6:	da10      	bge.n	80082ea <scalbn+0x52>
 80082c8:	a327      	add	r3, pc, #156	; (adr r3, 8008368 <scalbn+0xd0>)
 80082ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ce:	e01f      	b.n	8008310 <scalbn+0x78>
 80082d0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80082d4:	4291      	cmp	r1, r2
 80082d6:	d10c      	bne.n	80082f2 <scalbn+0x5a>
 80082d8:	ee10 2a10 	vmov	r2, s0
 80082dc:	4620      	mov	r0, r4
 80082de:	4629      	mov	r1, r5
 80082e0:	f7f7 ff78 	bl	80001d4 <__adddf3>
 80082e4:	4604      	mov	r4, r0
 80082e6:	460d      	mov	r5, r1
 80082e8:	e022      	b.n	8008330 <scalbn+0x98>
 80082ea:	460b      	mov	r3, r1
 80082ec:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80082f0:	3936      	subs	r1, #54	; 0x36
 80082f2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80082f6:	4296      	cmp	r6, r2
 80082f8:	dd0d      	ble.n	8008316 <scalbn+0x7e>
 80082fa:	2d00      	cmp	r5, #0
 80082fc:	a11c      	add	r1, pc, #112	; (adr r1, 8008370 <scalbn+0xd8>)
 80082fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008302:	da02      	bge.n	800830a <scalbn+0x72>
 8008304:	a11c      	add	r1, pc, #112	; (adr r1, 8008378 <scalbn+0xe0>)
 8008306:	e9d1 0100 	ldrd	r0, r1, [r1]
 800830a:	a319      	add	r3, pc, #100	; (adr r3, 8008370 <scalbn+0xd8>)
 800830c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008310:	f7f8 f916 	bl	8000540 <__aeabi_dmul>
 8008314:	e7e6      	b.n	80082e4 <scalbn+0x4c>
 8008316:	1872      	adds	r2, r6, r1
 8008318:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800831c:	428a      	cmp	r2, r1
 800831e:	dcec      	bgt.n	80082fa <scalbn+0x62>
 8008320:	2a00      	cmp	r2, #0
 8008322:	dd08      	ble.n	8008336 <scalbn+0x9e>
 8008324:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008328:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800832c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008330:	ec45 4b10 	vmov	d0, r4, r5
 8008334:	bd70      	pop	{r4, r5, r6, pc}
 8008336:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800833a:	da08      	bge.n	800834e <scalbn+0xb6>
 800833c:	2d00      	cmp	r5, #0
 800833e:	a10a      	add	r1, pc, #40	; (adr r1, 8008368 <scalbn+0xd0>)
 8008340:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008344:	dac0      	bge.n	80082c8 <scalbn+0x30>
 8008346:	a10e      	add	r1, pc, #56	; (adr r1, 8008380 <scalbn+0xe8>)
 8008348:	e9d1 0100 	ldrd	r0, r1, [r1]
 800834c:	e7bc      	b.n	80082c8 <scalbn+0x30>
 800834e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008352:	3236      	adds	r2, #54	; 0x36
 8008354:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008358:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800835c:	4620      	mov	r0, r4
 800835e:	4b0c      	ldr	r3, [pc, #48]	; (8008390 <scalbn+0xf8>)
 8008360:	2200      	movs	r2, #0
 8008362:	e7d5      	b.n	8008310 <scalbn+0x78>
 8008364:	f3af 8000 	nop.w
 8008368:	c2f8f359 	.word	0xc2f8f359
 800836c:	01a56e1f 	.word	0x01a56e1f
 8008370:	8800759c 	.word	0x8800759c
 8008374:	7e37e43c 	.word	0x7e37e43c
 8008378:	8800759c 	.word	0x8800759c
 800837c:	fe37e43c 	.word	0xfe37e43c
 8008380:	c2f8f359 	.word	0xc2f8f359
 8008384:	81a56e1f 	.word	0x81a56e1f
 8008388:	43500000 	.word	0x43500000
 800838c:	ffff3cb0 	.word	0xffff3cb0
 8008390:	3c900000 	.word	0x3c900000

08008394 <with_errno>:
 8008394:	b570      	push	{r4, r5, r6, lr}
 8008396:	4604      	mov	r4, r0
 8008398:	460d      	mov	r5, r1
 800839a:	4616      	mov	r6, r2
 800839c:	f7ff f88e 	bl	80074bc <__errno>
 80083a0:	4629      	mov	r1, r5
 80083a2:	6006      	str	r6, [r0, #0]
 80083a4:	4620      	mov	r0, r4
 80083a6:	bd70      	pop	{r4, r5, r6, pc}

080083a8 <xflow>:
 80083a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083aa:	4614      	mov	r4, r2
 80083ac:	461d      	mov	r5, r3
 80083ae:	b108      	cbz	r0, 80083b4 <xflow+0xc>
 80083b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80083b4:	e9cd 2300 	strd	r2, r3, [sp]
 80083b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083bc:	4620      	mov	r0, r4
 80083be:	4629      	mov	r1, r5
 80083c0:	f7f8 f8be 	bl	8000540 <__aeabi_dmul>
 80083c4:	2222      	movs	r2, #34	; 0x22
 80083c6:	b003      	add	sp, #12
 80083c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083cc:	f7ff bfe2 	b.w	8008394 <with_errno>

080083d0 <__math_uflow>:
 80083d0:	b508      	push	{r3, lr}
 80083d2:	2200      	movs	r2, #0
 80083d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80083d8:	f7ff ffe6 	bl	80083a8 <xflow>
 80083dc:	ec41 0b10 	vmov	d0, r0, r1
 80083e0:	bd08      	pop	{r3, pc}

080083e2 <__math_oflow>:
 80083e2:	b508      	push	{r3, lr}
 80083e4:	2200      	movs	r2, #0
 80083e6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80083ea:	f7ff ffdd 	bl	80083a8 <xflow>
 80083ee:	ec41 0b10 	vmov	d0, r0, r1
 80083f2:	bd08      	pop	{r3, pc}

080083f4 <_init>:
 80083f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083f6:	bf00      	nop
 80083f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083fa:	bc08      	pop	{r3}
 80083fc:	469e      	mov	lr, r3
 80083fe:	4770      	bx	lr

08008400 <_fini>:
 8008400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008402:	bf00      	nop
 8008404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008406:	bc08      	pop	{r3}
 8008408:	469e      	mov	lr, r3
 800840a:	4770      	bx	lr
